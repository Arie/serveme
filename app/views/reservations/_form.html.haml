.row
  .col-md-12
    %p.alert.alert-warning
      Please pick your start and end time carefully, reservations that have no players for 30 minutes (60 minutes for premium users) get ended automatically and you will receive a 24h temp ban. Use the "idle reset" button if you need more time before you start (e.g. your lobby takes a long time to fill). All times are in timezone:
      = link_to(Time.zone, edit_users_path)

= render "donator_nag"

= render "server_reservations_table"

.row
  .col-md-7.col-md-offset-2
    = simple_form_for(@reservation, :html => { :class => 'form-horizontal reservation' }) do |f|
      - if @reservation.schedulable?
        = f.input :starts_at,       :as => :string, :input_html => { :value => I18n.l(@reservation.starts_at, :format => :datepicker), :data => { :"datepicker-format" => "dd-mm-yyyy hh:ii", :"datepicker-nodefault" => "false" } }, :label => "Starts at"
        = f.input :ends_at,         :as => :string, :input_html => { :value => I18n.l(@reservation.ends_at,   :format => :datepicker), :data => { :"datepicker-format" => "dd-mm-yyyy hh:ii", :"datepicker-nodefault" => "false" } }, :label => "Ends at"

      :javascript
        free_servers = #{free_servers.map { |s| {id: s.id, text: s.name, flag: s.location_flag, ip_and_port: "#{s.ip}:#{s.port}"} }.to_json};
        find_server_url = "#{@reservation.persisted? ? find_servers_for_reservation_reservations_path(id: @reservation.id) : find_servers_for_user_reservations_path}";

      = f.input :server_id, :label => "Server", :required => true, :disabled => !@reservation.schedulable?
      .form-group.string.optional.readonly.disabled.reservation_ping
        %label.string.optional.col-lg-2.control-label{for: 'reservation_ping'}
          Ping
        .col-lg-2
          %input#reservation_ping.string.optional.readonly.disabled.form-control{disabled: "disabled", type: "text"}

      = f.input :password,            :as => :string, :placeholder => "The server password to join the game"
      = f.input :rcon,                :as => :string, :placeholder => "The RCON password to control the server",        :disabled => !@reservation.schedulable?
      = f.input :first_map,           :collection => MapUpload.available_maps, :input_html => { :class => "select2" },  :disabled => !@reservation.schedulable?
      = f.input :tv_password,         :as => :string,   :placeholder => "Password for STV, default tv"
      = f.input :tv_relaypassword,    :as => :string,   :placeholder => "Password for STV (relay), default tv"
      = f.input :enable_plugins,      :as => :boolean,  :hint => "Enable SOAP DM and MGE (premium only)",               :disabled => (!current_user.donator? || !@reservation.schedulable? )
      = f.association :server_config, :collection => ServerConfig.ordered, :hint => "Specify a league config to run on each map start", :input_html => { :class => "select2" }
      = f.input :whitelist_type, :label => "Item whitelist" do
        = radio_button_tag :whitelist_type, "default_whitelist", (!@reservation.custom_whitelist_id.present? && !@reservation.whitelist.present?)
        %span Default whitelist
        = radio_button_tag :whitelist_type, "league_whitelist", (@reservation.whitelist_id.present?)
        %span League whitelist
        = radio_button_tag :whitelist_type, "custom_whitelist", (@reservation.custom_whitelist_id.present?)
        %span Whitelist.tf (custom whitelist)
      = f.association :whitelist,     :collection => Whitelist.ordered,    :hint => "Some configs have a default whitelist, but you can still override that here. 6v6 with 9v9 unlocks? No problem!"
      = f.input :custom_whitelist_id, :hint => "Enter the whitelist ID or preset name (e.g. etf2l_6v6_s22) from <a href='http://whitelist.tf/configure' target='_blank'>whitelist.tf</a>".html_safe

      - users_last_reservation = current_user.reservations.last
      - if users_last_reservation && users_last_reservation.past? && users_last_reservation.inactive_too_long?
        - hint = "Auto-ending is forced on for your next reservation, because you didn't end your last one"
        - readonly = true
      - else
        - hint = "Automatically end the reservation once everyone has left the server"
        - readonly = false
      = f.input :auto_end, :as => :boolean, :hint => hint, :readonly => readonly, :disabled => readonly, :input_html => { :value => true }

      .col-md-offset-2
        %button.btn.btn-primary{:type => :submit}
          Save

    = render "datepicker_javascript_options"

    :javascript
      $("#reservation_server_id").select2("enable", #{@reservation.schedulable?});

