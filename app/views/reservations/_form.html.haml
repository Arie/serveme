%p.alert
  Please pick your start and end time carefully, reservations that have no players for 30 minutes (60 minutes for donators) get ended automatically. All times are in timezone:
  = link_to(Time.zone, edit_users_path)
= simple_form_for(@reservation, :html => { :class => 'form-horizontal' }) do |f|
  = f.input :server, :as => :select, :disabled => !@reservation.schedulable? do
    = f.select :server_id, ServerFinder.available_for_user(current_user).map {|s| [s.name, s.id, :"data-flag" => s.decorate.flag_abbreviation]}, :selected => @reservation.server_id, :input_html => { :class => "select2" }
    = f.error :server_id, :class => "error"
  = f.input :password,            :as => :string, :value => @reservation.password, :hint => "The server password to join the game"
  = f.input :rcon,                :as => :string, :hint => "The RCON password to control the server"
  = f.input :first_map,           :hint => "First map", :collection => MAPS, :input_html => { :class => "select2", :data => { :placeholder => "Select first map (optional)" } }
  = f.input :disable_source_tv,   :as => :boolean,  :hint => "Disable STV if you want to run a TF2Lobby game"
  = f.input :tv_password,         :as => :string,   :hint => "Password to connect to the STV as a spectator",   :placeholder => 'tv'
  = f.input :tv_relaypassword,    :as => :string,   :hint => "Password to connect to the STV with a relay",     :placeholder => 'tv'
  = f.association :server_config, :collection => ServerConfig.ordered, :hint => "Specify a league config to run on each map start"
  = f.input :whitelist_type, :label => "Whitelist" do
    = radio_button_tag :whitelist_type, "default_whitelist", (!@reservation.custom_whitelist_id.present? && !@reservation.whitelist.present?)
    Default whitelist
    = radio_button_tag :whitelist_type, "league_whitelist", (@reservation.whitelist_id.present?)
    League whitelist
    = radio_button_tag :whitelist_type, "custom_whitelist", (@reservation.custom_whitelist_id.present?)
    Custom whitelist
  = f.association :whitelist,     :collection => Whitelist.ordered,    :hint => "Some configs have a default whitelist, but you can still override that here. 6v6 with 9v9 unlocks? No problem!"
  = f.input :custom_whitelist_id, :hint => "Enter the number (ID) for a whitelist from <a href='http://whitelist.tf/configure', target='_blank'>whitelist.tf</a>"
  %span.inline
    .starts_at
      = f.input :starts_at,       :as => :string, :input_html => { :value => I18n.l(@reservation.starts_at, :format => :datepicker), :data => { :"datepicker-format" => "dd-mm-yyyy hh:ii", :"datepicker-nodefault" => "false" } }, :label => "Start/end time" , :disabled => !@reservation.schedulable?
    = f.input :ends_at,           :as => :string, :input_html => { :value => I18n.l(@reservation.ends_at,   :format => :datepicker), :data => { :"datepicker-format" => "dd-mm-yyyy hh:ii", :"datepicker-nodefault" => "false" } }, :label => false,             :disabled => !@reservation.schedulable?
  %button.btn{:type => :submit}
    Save

= render "datepicker_javascript_options"

:javascript
  function formatServer(server) {
    element = server.element;
    return "<span class='flags flags-" + $(element).data('flag') + "'></span>" + server.text;
  };

  function enableDefaultWhitelist() {
    $("#reservation_whitelist_id").val('');
    $("#reservation_whitelist_id").prop('disabled', true);
    $(".reservation_whitelist").hide();
    $("#reservation_custom_whitelist_id").val('');
    $("#reservation_custom_whitelist_id").prop('disabled', true);
    $(".reservation_custom_whitelist_id").hide();
  };

  function enableLeagueWhitelist() {
    $("#reservation_whitelist_id").prop('disabled', false);
    $(".reservation_whitelist").show();
    $("#reservation_custom_whitelist_id").val('', true);
    $("#reservation_custom_whitelist_id").prop('disabled', true);
    $(".reservation_custom_whitelist_id").hide();
  };

  function enableCustomWhitelist() {
    $("#reservation_custom_whitelist_id").prop('disabled', false);
    $(".reservation_custom_whitelist_id").show();
    $("#reservation_whitelist_id").val('');
    $("#reservation_whitelist_id").prop('disabled', true);
    $(".reservation_whitelist").hide();
  };

  if ($("#whitelist_type_default_whitelist").is(':checked'))  { enableDefaultWhitelist(); };
  if ($("#whitelist_type_league_whitelist").is(':checked')) { enableLeagueWhitelist(); };
  if ($("#whitelist_type_custom_whitelist").is(':checked')) { enableCustomWhitelist(); };

  $("#reservation_first_map").select2();

  $("#reservation_server_id").select2({
    formatResult: formatServer,
    formatSelection: formatServer,
    escapeMarkup: function(m) { return m }
  });

  $("#reservation_server_id").select2("enable", #{@reservation.schedulable?});

  $("#whitelist_type_default_whitelist").change(function() {
    enableDefaultWhitelist();
  });

  $("#whitelist_type_custom_whitelist").change(function() {
  enableCustomWhitelist();
  });

  $("#whitelist_type_league_whitelist").change(function() {
    enableLeagueWhitelist();
  });
