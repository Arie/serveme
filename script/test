#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require "fileutils"
require "open3"
require "sorbet-runtime"
require_relative "../lib/timing"

APP_ROOT = File.expand_path("..", __dir__)
OK = "\e[92m✓\e[0m"
CROSS = "\e[91m✗\e[0m"

def system!(*args)
  if !system(*args)
    puts
    abort "❌ #{args.first} failed"
  end
end

options = {
  autocorrect: false
}

OptionParser.new do |parser|
  parser.banner = "Usage: ./script/test [options]"

  parser.on("-a", "--[no-]autocorrect", "Automatically autocorrects problems") do |v|
    options[:autocorrect] = v
  end

  parser.on("-h", "--help", "Prints this help") do
    puts parser
    exit
  end
end.parse!

TESTS = {
  brakeman: "bin/brakeman --no-pager --quiet --no-summary",
  importmap: "bin/importmap audit",
  rubocop: "bin/rubocop -f github",
  rubocop_autocorrect: "bin/rubocop --autocorrect-all",
  sorbet: "bin/srb tc",
  tapioca_gem: "bin/tapioca gem --verify",
  tapioca_dsl: "bin/tapioca dsl --verify",
  tapioca_gem_autocorrect: "bin/tapioca gem",
  tapioca_dsl_autocorrect: "bin/tapioca dsl",
  rspec: "bin/rails spec",
  cucumber: "bin/rails cucumber",
  test: "bin/rails test:all"
}

CHECKS = if options[:autocorrect]
  %i[brakeman importmap rubocop_autocorrect sorbet tapioca_gem_autocorrect tapioca_dsl_autocorrect]
else
  %i[brakeman importmap rubocop sorbet tapioca_gem tapioca_dsl]
end

FRAMES = [ "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" ]

spinner = Thread.new do
  puts
  i = 0
  loop do
    print "\r\e[96m#{FRAMES[i % FRAMES.size]}\e[0m "
    i += 1
    sleep 0.1
  end
end

class Test
  attr_reader :name

  def initialize(name)
    @name = name
    @command = TESTS.fetch(name)
    @status = nil
    @output = nil
    @duration = 0
  end

  def run
    @duration = Timing.measure(round: 3) do
      @output, @status = Open3.capture2e(@command)
    end
  end

  def message
    if @status.success?
      "\r#{OK} #{@name} check passed in #{@duration} seconds"
    else
      "\r#{CROSS} #{@name} check failed in #{@duration} seconds:\n\n#{@output}\n"
    end
  end

  def success?
    @status.success?
  end
end

FileUtils.chdir APP_ROOT do
  threads = []
  check_time = Timing.measure(round: 3) do
    threads = CHECKS.map do |name|
      Thread.new do
        test = Test.new(name)
        Thread.current[:test] = test
        test.run
        puts test.message
      end
    end
    threads.map(&:join)
  end
  spinner.kill
  print "\r \r"

  failed_tests = threads.map { _1[:test] }.reject(&:success?)
  if failed_tests.none?
    puts
    puts "✅ All checks passed in #{check_time} seconds"
    puts
  else
    puts
    abort "❌ Checks #{failed_tests.map(&:name).join(", ")} failed in #{check_time} seconds"
  end

  duration = Timing.measure(round: 3) do
    system! TESTS.fetch(:rspec)
  end
  puts
  puts "✅ RSpec tests passed in #{duration} seconds"
  puts

  duration = Timing.measure(round: 3) do
    system! TESTS.fetch(:cucumber)
  end
  puts
  puts "✅ Cucumber features passed in #{duration} seconds"
  puts
end
