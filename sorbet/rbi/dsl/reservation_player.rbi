# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ReservationPlayer`.
# Please instead update this file by running `bin/tapioca dsl ReservationPlayer`.

class ReservationPlayer
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::ReservationPlayer).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::ReservationPlayer]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::ReservationPlayer)) }
    def fifth; end

    sig { returns(::ReservationPlayer) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::ReservationPlayer)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::ReservationPlayer) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::ReservationPlayer)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::ReservationPlayer) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::ReservationPlayer) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::ReservationPlayer) }
    def first!; end

    sig { returns(T.nilable(::ReservationPlayer)) }
    def forty_two; end

    sig { returns(::ReservationPlayer) }
    def forty_two!; end

    sig { returns(T.nilable(::ReservationPlayer)) }
    def fourth; end

    sig { returns(::ReservationPlayer) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::ReservationPlayer) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::ReservationPlayer).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ReservationPlayer).void)
      ).returns(::ReservationPlayer)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ReservationPlayer).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ReservationPlayer).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::ReservationPlayer)) }
    def second; end

    sig { returns(::ReservationPlayer) }
    def second!; end

    sig { returns(T.nilable(::ReservationPlayer)) }
    def second_to_last; end

    sig { returns(::ReservationPlayer) }
    def second_to_last!; end

    sig { returns(::ReservationPlayer) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::ReservationPlayer) }
    def take!; end

    sig { returns(T.nilable(::ReservationPlayer)) }
    def third; end

    sig { returns(::ReservationPlayer) }
    def third!; end

    sig { returns(T.nilable(::ReservationPlayer)) }
    def third_to_last; end

    sig { returns(::ReservationPlayer) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Reservation) }
    def build_reservation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Server) }
    def build_server(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Reservation) }
    def create_reservation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Reservation) }
    def create_reservation!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Server) }
    def create_server(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Server) }
    def create_server!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::Reservation)) }
    def reload_reservation; end

    sig { returns(T.nilable(::Server)) }
    def reload_server; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::Reservation)) }
    def reservation; end

    sig { params(value: T.nilable(::Reservation)).void }
    def reservation=(value); end

    sig { returns(T.nilable(::Server)) }
    def server; end

    sig { params(value: T.nilable(::Server)).void }
    def server=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def near(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_reverse_geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def within_bounding_box(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ip=(value); end

    sig { returns(T::Boolean) }
    def ip?; end

    sig { returns(T.nilable(::String)) }
    def ip_before_last_save; end

    sig { returns(T.untyped) }
    def ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def ip_changed?; end

    sig { returns(T.nilable(::String)) }
    def ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_previous_change; end

    sig { returns(T::Boolean) }
    def ip_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ip_was; end

    sig { void }
    def ip_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def latitude; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def latitude=(value); end

    sig { returns(T::Boolean) }
    def latitude?; end

    sig { returns(T.nilable(::Float)) }
    def latitude_before_last_save; end

    sig { returns(T.untyped) }
    def latitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def latitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def latitude_changed?; end

    sig { returns(T.nilable(::Float)) }
    def latitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_previous_change; end

    sig { returns(T::Boolean) }
    def latitude_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def latitude_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def latitude_was; end

    sig { void }
    def latitude_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def longitude; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def longitude=(value); end

    sig { returns(T::Boolean) }
    def longitude?; end

    sig { returns(T.nilable(::Float)) }
    def longitude_before_last_save; end

    sig { returns(T.untyped) }
    def longitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def longitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def longitude_changed?; end

    sig { returns(T.nilable(::Float)) }
    def longitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_previous_change; end

    sig { returns(T::Boolean) }
    def longitude_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def longitude_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def longitude_was; end

    sig { void }
    def longitude_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def reservation_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def reservation_id=(value); end

    sig { returns(T::Boolean) }
    def reservation_id?; end

    sig { returns(T.nilable(::Integer)) }
    def reservation_id_before_last_save; end

    sig { returns(T.untyped) }
    def reservation_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def reservation_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def reservation_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def reservation_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reservation_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def reservation_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def reservation_id_previous_change; end

    sig { returns(T::Boolean) }
    def reservation_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def reservation_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def reservation_id_was; end

    sig { void }
    def reservation_id_will_change!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_ip!; end

    sig { void }
    def restore_latitude!; end

    sig { void }
    def restore_longitude!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_reservation_id!; end

    sig { void }
    def restore_steam_uid!; end

    sig { void }
    def restore_whitelisted!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_ip?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_latitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_latitude?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_longitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_longitude?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_reservation_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_reservation_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_steam_uid; end

    sig { returns(T::Boolean) }
    def saved_change_to_steam_uid?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_whitelisted; end

    sig { returns(T::Boolean) }
    def saved_change_to_whitelisted?; end

    sig { returns(T.nilable(::String)) }
    def steam_uid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def steam_uid=(value); end

    sig { returns(T::Boolean) }
    def steam_uid?; end

    sig { returns(T.nilable(::String)) }
    def steam_uid_before_last_save; end

    sig { returns(T.untyped) }
    def steam_uid_before_type_cast; end

    sig { returns(T::Boolean) }
    def steam_uid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def steam_uid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def steam_uid_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def steam_uid_changed?; end

    sig { returns(T.nilable(::String)) }
    def steam_uid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def steam_uid_previous_change; end

    sig { returns(T::Boolean) }
    def steam_uid_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def steam_uid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def steam_uid_was; end

    sig { void }
    def steam_uid_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def whitelisted; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def whitelisted=(value); end

    sig { returns(T::Boolean) }
    def whitelisted?; end

    sig { returns(T.nilable(T::Boolean)) }
    def whitelisted_before_last_save; end

    sig { returns(T.untyped) }
    def whitelisted_before_type_cast; end

    sig { returns(T::Boolean) }
    def whitelisted_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def whitelisted_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def whitelisted_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def whitelisted_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def whitelisted_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def whitelisted_previous_change; end

    sig { returns(T::Boolean) }
    def whitelisted_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def whitelisted_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def whitelisted_was; end

    sig { void }
    def whitelisted_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_latitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_longitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reservation_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_steam_uid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_whitelisted?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def near(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_reverse_geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def within_bounding_box(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ReservationPlayer } }

    sig { returns(T::Array[::ReservationPlayer]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::ReservationPlayer } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ReservationPlayer } }

    sig do
      params(
        records: T.any(::ReservationPlayer, T::Enumerable[T.any(::ReservationPlayer, T::Enumerable[::ReservationPlayer])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::ReservationPlayer, T::Enumerable[T.any(::ReservationPlayer, T::Enumerable[::ReservationPlayer])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::ReservationPlayer, T::Enumerable[T.any(::ReservationPlayer, T::Enumerable[::ReservationPlayer])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::ReservationPlayer, Integer, String, T::Enumerable[T.any(::ReservationPlayer, Integer, String, T::Enumerable[::ReservationPlayer])])
      ).returns(T::Array[::ReservationPlayer])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::ReservationPlayer, Integer, String, T::Enumerable[T.any(::ReservationPlayer, Integer, String, T::Enumerable[::ReservationPlayer])])
      ).returns(T::Array[::ReservationPlayer])
    end
    def destroy(*records); end

    sig { returns(T::Array[::ReservationPlayer]) }
    def load_target; end

    sig do
      params(
        records: T.any(::ReservationPlayer, T::Enumerable[T.any(::ReservationPlayer, T::Enumerable[::ReservationPlayer])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::ReservationPlayer, T::Enumerable[T.any(::ReservationPlayer, T::Enumerable[::ReservationPlayer])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::ReservationPlayer, T::Enumerable[T.any(::ReservationPlayer, T::Enumerable[::ReservationPlayer])])
      ).returns(T::Array[::ReservationPlayer])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::ReservationPlayer]) }
    def target; end

    sig { returns(T::Array[::ReservationPlayer]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::ReservationPlayer } }

    sig { returns(T::Array[::ReservationPlayer]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::ReservationPlayer } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
