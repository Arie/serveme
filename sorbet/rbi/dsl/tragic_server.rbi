# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `TragicServer`.
# Please instead update this file by running `bin/tapioca dsl TragicServer`.


class TragicServer
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::TragicServer).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::TragicServer).void)).returns(::TragicServer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::TragicServer).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::TragicServer).void)).returns(::TragicServer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::TragicServer).void)).returns(::TragicServer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::TragicServer]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::TragicServer)) }
    def fifth; end

    sig { returns(::TragicServer) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::TragicServer)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::TragicServer])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::TragicServer).void
      ).returns(T.nilable(::TragicServer))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::TragicServer)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::TragicServer) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::TragicServer).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::TragicServer])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::TragicServer]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::TragicServer]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::TragicServer)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::TragicServer) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::TragicServer) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::TragicServer)) }
    sig { params(limit: Integer).returns(T::Array[::TragicServer]) }
    def first(limit = nil); end

    sig { returns(::TragicServer) }
    def first!; end

    sig { returns(T.nilable(::TragicServer)) }
    def forty_two; end

    sig { returns(::TragicServer) }
    def forty_two!; end

    sig { returns(T.nilable(::TragicServer)) }
    def fourth; end

    sig { returns(::TragicServer) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::TragicServer)) }
    sig { params(limit: Integer).returns(T::Array[::TragicServer]) }
    def last(limit = nil); end

    sig { returns(::TragicServer) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::TragicServer).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::TragicServer).void)).returns(::TragicServer) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(T::Array[::TragicServer])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::TragicServer).void)
      ).returns(::TragicServer)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::TragicServer).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::TragicServer).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::TragicServer)) }
    def second; end

    sig { returns(::TragicServer) }
    def second!; end

    sig { returns(T.nilable(::TragicServer)) }
    def second_to_last; end

    sig { returns(::TragicServer) }
    def second_to_last!; end

    sig { returns(::TragicServer) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::TragicServer).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::TragicServer)) }
    sig { params(limit: Integer).returns(T::Array[::TragicServer]) }
    def take(limit = nil); end

    sig { returns(::TragicServer) }
    def take!; end

    sig { returns(T.nilable(::TragicServer)) }
    def third; end

    sig { returns(::TragicServer) }
    def third!; end

    sig { returns(T.nilable(::TragicServer)) }
    def third_to_last; end

    sig { returns(::TragicServer) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Location) }
    def build_location(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Location) }
    def create_location(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Location) }
    def create_location!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def current_reservation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def current_reservation_ids=(ids); end

    # This method is created by ActiveRecord on the `Server` class because it declared `has_many :current_reservations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reservation::PrivateCollectionProxy) }
    def current_reservations; end

    sig { params(value: T::Enumerable[::Reservation]).void }
    def current_reservations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def group_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def group_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def group_server_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def group_server_ids=(ids); end

    # This method is created by ActiveRecord on the `Server` class because it declared `has_many :group_servers`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::GroupServer::PrivateCollectionProxy) }
    def group_servers; end

    sig { params(value: T::Enumerable[::GroupServer]).void }
    def group_servers=(value); end

    # This method is created by ActiveRecord on the `Server` class because it declared `has_many :groups, through: :group_servers`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Group::PrivateCollectionProxy) }
    def groups; end

    sig { params(value: T::Enumerable[::Group]).void }
    def groups=(value); end

    sig { returns(T.nilable(::Location)) }
    def location; end

    sig { params(value: T.nilable(::Location)).void }
    def location=(value); end

    sig { returns(T::Array[T.untyped]) }
    def recent_server_statistic_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def recent_server_statistic_ids=(ids); end

    # This method is created by ActiveRecord on the `Server` class because it declared `has_many :recent_server_statistics`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ServerStatistic::PrivateCollectionProxy) }
    def recent_server_statistics; end

    sig { params(value: T::Enumerable[::ServerStatistic]).void }
    def recent_server_statistics=(value); end

    sig { returns(T.nilable(::Location)) }
    def reload_location; end

    sig { returns(T::Array[T.untyped]) }
    def reservation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reservation_ids=(ids); end

    # This method is created by ActiveRecord on the `Server` class because it declared `has_many :reservations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reservation::PrivateCollectionProxy) }
    def reservations; end

    sig { params(value: T::Enumerable[::Reservation]).void }
    def reservations=(value); end

    sig { void }
    def reset_location; end

    sig { returns(T::Array[T.untyped]) }
    def server_statistic_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def server_statistic_ids=(ids); end

    # This method is created by ActiveRecord on the `Server` class because it declared `has_many :server_statistics`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ServerStatistic::PrivateCollectionProxy) }
    def server_statistics; end

    sig { params(value: T::Enumerable[::ServerStatistic]).void }
    def server_statistics=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def near(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_reverse_geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def within_bounding_box(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(T::Boolean)) }
    def active; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billing_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_id=(value); end

    sig { returns(T::Boolean) }
    def billing_id?; end

    sig { returns(T.nilable(::String)) }
    def billing_id_before_last_save; end

    sig { returns(T.untyped) }
    def billing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_id_was; end

    sig { void }
    def billing_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ftp_password; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ftp_password=(value); end

    sig { returns(T::Boolean) }
    def ftp_password?; end

    sig { returns(T.nilable(::String)) }
    def ftp_password_before_last_save; end

    sig { returns(T.untyped) }
    def ftp_password_before_type_cast; end

    sig { returns(T::Boolean) }
    def ftp_password_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ftp_password_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ftp_password_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ftp_password_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ftp_password_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ftp_password_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ftp_password_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ftp_password_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ftp_password_was; end

    sig { void }
    def ftp_password_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def ftp_port; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def ftp_port=(value); end

    sig { returns(T::Boolean) }
    def ftp_port?; end

    sig { returns(T.nilable(::Integer)) }
    def ftp_port_before_last_save; end

    sig { returns(T.untyped) }
    def ftp_port_before_type_cast; end

    sig { returns(T::Boolean) }
    def ftp_port_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ftp_port_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ftp_port_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def ftp_port_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ftp_port_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ftp_port_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def ftp_port_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ftp_port_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def ftp_port_was; end

    sig { void }
    def ftp_port_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ftp_username; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ftp_username=(value); end

    sig { returns(T::Boolean) }
    def ftp_username?; end

    sig { returns(T.nilable(::String)) }
    def ftp_username_before_last_save; end

    sig { returns(T.untyped) }
    def ftp_username_before_type_cast; end

    sig { returns(T::Boolean) }
    def ftp_username_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ftp_username_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ftp_username_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ftp_username_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ftp_username_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ftp_username_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ftp_username_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ftp_username_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ftp_username_was; end

    sig { void }
    def ftp_username_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ip=(value); end

    sig { returns(T::Boolean) }
    def ip?; end

    sig { returns(T.nilable(::String)) }
    def ip_before_last_save; end

    sig { returns(T.untyped) }
    def ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ip_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ip_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ip_was; end

    sig { void }
    def ip_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_known_version; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_known_version=(value); end

    sig { returns(T::Boolean) }
    def last_known_version?; end

    sig { returns(T.nilable(::Integer)) }
    def last_known_version_before_last_save; end

    sig { returns(T.untyped) }
    def last_known_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_known_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_known_version_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_known_version_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_known_version_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_known_version_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_known_version_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_known_version_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_known_version_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_known_version_was; end

    sig { void }
    def last_known_version_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_sdr_ip=(value); end

    sig { returns(T::Boolean) }
    def last_sdr_ip?; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_ip_before_last_save; end

    sig { returns(T.untyped) }
    def last_sdr_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sdr_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_ip_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_sdr_ip_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_sdr_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_ip_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_sdr_ip_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_sdr_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_ip_was; end

    sig { void }
    def last_sdr_ip_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_port; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_sdr_port=(value); end

    sig { returns(T::Boolean) }
    def last_sdr_port?; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_port_before_last_save; end

    sig { returns(T.untyped) }
    def last_sdr_port_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sdr_port_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_port_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_port_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_sdr_port_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_sdr_port_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_port_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_sdr_port_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_sdr_port_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_port_was; end

    sig { void }
    def last_sdr_port_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_tv_port; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_sdr_tv_port=(value); end

    sig { returns(T::Boolean) }
    def last_sdr_tv_port?; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_tv_port_before_last_save; end

    sig { returns(T.untyped) }
    def last_sdr_tv_port_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sdr_tv_port_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_tv_port_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_tv_port_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_sdr_tv_port_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_sdr_tv_port_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sdr_tv_port_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_sdr_tv_port_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_sdr_tv_port_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_sdr_tv_port_was; end

    sig { void }
    def last_sdr_tv_port_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def latitude; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def latitude=(value); end

    sig { returns(T::Boolean) }
    def latitude?; end

    sig { returns(T.nilable(::Float)) }
    def latitude_before_last_save; end

    sig { returns(T.untyped) }
    def latitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def latitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_change_to_be_saved; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def latitude_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def latitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_previous_change; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def latitude_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def latitude_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def latitude_was; end

    sig { void }
    def latitude_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def location_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def location_id=(value); end

    sig { returns(T::Boolean) }
    def location_id?; end

    sig { returns(T.nilable(::Integer)) }
    def location_id_before_last_save; end

    sig { returns(T.untyped) }
    def location_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def location_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def location_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def location_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def location_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def location_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def location_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def location_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def location_id_was; end

    sig { void }
    def location_id_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def longitude; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def longitude=(value); end

    sig { returns(T::Boolean) }
    def longitude?; end

    sig { returns(T.nilable(::Float)) }
    def longitude_before_last_save; end

    sig { returns(T.untyped) }
    def longitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def longitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_change_to_be_saved; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def longitude_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def longitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_previous_change; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def longitude_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def longitude_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def longitude_was; end

    sig { void }
    def longitude_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def path; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def path=(value); end

    sig { returns(T::Boolean) }
    def path?; end

    sig { returns(T.nilable(::String)) }
    def path_before_last_save; end

    sig { returns(T.untyped) }
    def path_before_type_cast; end

    sig { returns(T::Boolean) }
    def path_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def path_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def path_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def path_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def path_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def path_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def path_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def path_previously_was; end

    sig { returns(T.nilable(::String)) }
    def path_was; end

    sig { void }
    def path_will_change!; end

    sig { returns(T.nilable(::String)) }
    def port; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def port=(value); end

    sig { returns(T::Boolean) }
    def port?; end

    sig { returns(T.nilable(::String)) }
    def port_before_last_save; end

    sig { returns(T.untyped) }
    def port_before_type_cast; end

    sig { returns(T::Boolean) }
    def port_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def port_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def port_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def port_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def port_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def port_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def port_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def port_previously_was; end

    sig { returns(T.nilable(::String)) }
    def port_was; end

    sig { void }
    def port_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def position; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def position=(value); end

    sig { returns(T::Boolean) }
    def position?; end

    sig { returns(T.nilable(::Integer)) }
    def position_before_last_save; end

    sig { returns(T.untyped) }
    def position_before_type_cast; end

    sig { returns(T::Boolean) }
    def position_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def position_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def position_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def position_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def position_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def position_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def position_was; end

    sig { void }
    def position_will_change!; end

    sig { returns(T.nilable(::String)) }
    def rcon; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def rcon=(value); end

    sig { returns(T::Boolean) }
    def rcon?; end

    sig { returns(T.nilable(::String)) }
    def rcon_before_last_save; end

    sig { returns(T.untyped) }
    def rcon_before_type_cast; end

    sig { returns(T::Boolean) }
    def rcon_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def rcon_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def rcon_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def rcon_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def rcon_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def rcon_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def rcon_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def rcon_previously_was; end

    sig { returns(T.nilable(::String)) }
    def rcon_was; end

    sig { void }
    def rcon_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_billing_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_ftp_password!; end

    sig { void }
    def restore_ftp_port!; end

    sig { void }
    def restore_ftp_username!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_ip!; end

    sig { void }
    def restore_last_known_version!; end

    sig { void }
    def restore_last_sdr_ip!; end

    sig { void }
    def restore_last_sdr_port!; end

    sig { void }
    def restore_last_sdr_tv_port!; end

    sig { void }
    def restore_latitude!; end

    sig { void }
    def restore_location_id!; end

    sig { void }
    def restore_longitude!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_path!; end

    sig { void }
    def restore_port!; end

    sig { void }
    def restore_position!; end

    sig { void }
    def restore_rcon!; end

    sig { void }
    def restore_sdr!; end

    sig { void }
    def restore_tv_port!; end

    sig { void }
    def restore_type!; end

    sig { void }
    def restore_update_started_at!; end

    sig { void }
    def restore_update_status!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ftp_password; end

    sig { returns(T::Boolean) }
    def saved_change_to_ftp_password?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_ftp_port; end

    sig { returns(T::Boolean) }
    def saved_change_to_ftp_port?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ftp_username; end

    sig { returns(T::Boolean) }
    def saved_change_to_ftp_username?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_ip?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_known_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_known_version?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_sdr_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sdr_ip?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_sdr_port; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sdr_port?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_sdr_tv_port; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sdr_tv_port?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_latitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_latitude?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_location_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_location_id?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_longitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_longitude?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_path; end

    sig { returns(T::Boolean) }
    def saved_change_to_path?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_port; end

    sig { returns(T::Boolean) }
    def saved_change_to_port?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_position; end

    sig { returns(T::Boolean) }
    def saved_change_to_position?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_rcon; end

    sig { returns(T::Boolean) }
    def saved_change_to_rcon?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_sdr; end

    sig { returns(T::Boolean) }
    def saved_change_to_sdr?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tv_port; end

    sig { returns(T::Boolean) }
    def saved_change_to_tv_port?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_update_started_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_update_started_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_update_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_update_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(T::Boolean)) }
    def sdr; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def sdr=(value); end

    sig { returns(T::Boolean) }
    def sdr?; end

    sig { returns(T.nilable(T::Boolean)) }
    def sdr_before_last_save; end

    sig { returns(T.untyped) }
    def sdr_before_type_cast; end

    sig { returns(T::Boolean) }
    def sdr_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def sdr_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def sdr_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def sdr_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def sdr_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def sdr_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def sdr_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def sdr_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def sdr_was; end

    sig { void }
    def sdr_will_change!; end

    sig { returns(T.nilable(::String)) }
    def tv_port; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def tv_port=(value); end

    sig { returns(T::Boolean) }
    def tv_port?; end

    sig { returns(T.nilable(::String)) }
    def tv_port_before_last_save; end

    sig { returns(T.untyped) }
    def tv_port_before_type_cast; end

    sig { returns(T::Boolean) }
    def tv_port_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tv_port_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tv_port_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tv_port_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tv_port_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tv_port_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tv_port_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tv_port_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tv_port_was; end

    sig { void }
    def tv_port_will_change!; end

    sig { returns(T.nilable(::String)) }
    def type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def type=(value); end

    sig { returns(T::Boolean) }
    def type?; end

    sig { returns(T.nilable(::String)) }
    def type_before_last_save; end

    sig { returns(T.untyped) }
    def type_before_type_cast; end

    sig { returns(T::Boolean) }
    def type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def type_was; end

    sig { void }
    def type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def update_started_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def update_started_at=(value); end

    sig { returns(T::Boolean) }
    def update_started_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def update_started_at_before_last_save; end

    sig { returns(T.untyped) }
    def update_started_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def update_started_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def update_started_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def update_started_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def update_started_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def update_started_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def update_started_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def update_started_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def update_started_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def update_started_at_was; end

    sig { void }
    def update_started_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def update_status; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def update_status=(value); end

    sig { returns(T::Boolean) }
    def update_status?; end

    sig { returns(T.nilable(::String)) }
    def update_status_before_last_save; end

    sig { returns(T.untyped) }
    def update_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def update_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def update_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def update_status_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def update_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def update_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def update_status_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def update_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def update_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def update_status_was; end

    sig { void }
    def update_status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ftp_password?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ftp_port?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ftp_username?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_known_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sdr_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sdr_port?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sdr_tv_port?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_latitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_longitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_path?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_port?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_position?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rcon?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sdr?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tv_port?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_update_started_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_update_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def near(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_reverse_geocoded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def within_bounding_box(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::TragicServer } }

    sig { returns(T::Array[::TragicServer]) }
    def to_a; end

    sig { returns(T::Array[::TragicServer]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::TragicServer } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::TragicServer } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::TragicServer } }

    sig do
      params(
        records: T.any(::TragicServer, T::Enumerable[T.any(::TragicServer, T::Enumerable[::TragicServer])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::TragicServer, T::Enumerable[T.any(::TragicServer, T::Enumerable[::TragicServer])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::TragicServer, T::Enumerable[T.any(::TragicServer, T::Enumerable[::TragicServer])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::TragicServer]) }
    def load_target; end

    sig do
      params(
        records: T.any(::TragicServer, T::Enumerable[T.any(::TragicServer, T::Enumerable[::TragicServer])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::TragicServer, T::Enumerable[T.any(::TragicServer, T::Enumerable[::TragicServer])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::TragicServer, T::Enumerable[T.any(::TragicServer, T::Enumerable[::TragicServer])])
      ).returns(T::Array[::TragicServer])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::TragicServer]) }
    def target; end

    sig { returns(T::Array[::TragicServer]) }
    def to_a; end

    sig { returns(T::Array[::TragicServer]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::TragicServer } }

    sig { returns(T::Array[::TragicServer]) }
    def to_a; end

    sig { returns(T::Array[::TragicServer]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::TragicServer } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::TragicServer } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
