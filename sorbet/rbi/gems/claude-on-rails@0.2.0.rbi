# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `claude-on-rails` gem.
# Please instead update this file by running `bin/tapioca gem claude-on-rails`.


# source://claude-on-rails//lib/claude_on_rails/version.rb#3
module ClaudeOnRails
  class << self
    # source://claude-on-rails//lib/claude_on_rails.rb#24
    def analyze_project(root_path = T.unsafe(nil)); end

    # source://claude-on-rails//lib/claude_on_rails.rb#28
    def build_swarm(project_analysis); end

    # source://claude-on-rails//lib/claude_on_rails.rb#20
    def configuration; end

    # @yield [configuration]
    #
    # source://claude-on-rails//lib/claude_on_rails.rb#16
    def configure; end
  end
end

# source://claude-on-rails//lib/claude_on_rails/configuration.rb#4
class ClaudeOnRails::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#7
  def initialize; end

  # Returns the value of attribute default_model.
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#5
  def default_model; end

  # Sets the attribute default_model
  #
  # @param value the value to set the attribute default_model to.
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#5
  def default_model=(_arg0); end

  # Returns the value of attribute log_directory.
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#5
  def log_directory; end

  # Sets the attribute log_directory
  #
  # @param value the value to set the attribute log_directory to.
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#5
  def log_directory=(_arg0); end

  # Returns the value of attribute session_directory.
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#5
  def session_directory; end

  # Sets the attribute session_directory
  #
  # @param value the value to set the attribute session_directory to.
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#5
  def session_directory=(_arg0); end

  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#14
  def to_h; end

  # Returns the value of attribute vibe_mode.
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#5
  def vibe_mode; end

  # Sets the attribute vibe_mode
  #
  # @param value the value to set the attribute vibe_mode to.
  #
  # source://claude-on-rails//lib/claude_on_rails/configuration.rb#5
  def vibe_mode=(_arg0); end
end

# source://claude-on-rails//lib/claude_on_rails.rb#13
class ClaudeOnRails::Error < ::StandardError; end

# Support module for Rails MCP Server integration
#
# source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#5
module ClaudeOnRails::MCPSupport
  class << self
    # Check if Rails MCP Server gem is available on the system
    #
    # @return [Boolean]
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#8
    def available?; end

    # Get available resources that can be downloaded
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#44
    def available_resources; end

    # Check if common resources are set up
    #
    # @return [Boolean]
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#61
    def common_resources_setup?; end

    # Check if we can download a resource (always true for gem-based server)
    #
    # @return [Boolean]
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#35
    def download_resource?(_resource_name); end

    # Check which resources are currently downloaded
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#49
    def downloaded_resources; end

    # Generate installation instructions
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#67
    def installation_instructions; end

    # Check which resources are missing
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#55
    def missing_resources; end

    # Check if a specific resource is downloaded
    #
    # @return [Boolean]
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#18
    def resource_available?(_resource_name); end

    # Get the MCP server configuration for swarm
    #
    # source://claude-on-rails//lib/claude_on_rails/mcp_support.rb#24
    def server_config(rails_env = T.unsafe(nil)); end
  end
end

# source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#4
class ClaudeOnRails::ProjectAnalyzer
  # @return [ProjectAnalyzer] a new instance of ProjectAnalyzer
  #
  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#7
  def initialize(root_path); end

  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#11
  def analyze; end

  # Returns the value of attribute root_path.
  #
  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#5
  def root_path; end

  private

  # @return [Boolean]
  #
  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#28
  def api_only?; end

  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#120
  def detect_custom_patterns; end

  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#92
  def detect_database; end

  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#108
  def detect_deployment_method; end

  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#76
  def detect_javascript_framework; end

  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#35
  def detect_test_framework; end

  # @return [Boolean]
  #
  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#62
  def devise?; end

  # @return [Boolean]
  #
  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#43
  def graphql?; end

  # @return [Boolean]
  #
  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#69
  def sidekiq?; end

  # @return [Boolean]
  #
  # source://claude-on-rails//lib/claude_on_rails/project_analyzer.rb#52
  def turbo?; end
end

# Railtie to load rake tasks in Rails applications
#
# source://claude-on-rails//lib/claude_on_rails/railtie.rb#7
class ClaudeOnRails::Railtie < ::Rails::Railtie; end

# source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#4
class ClaudeOnRails::SwarmBuilder
  # @return [SwarmBuilder] a new instance of SwarmBuilder
  #
  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#7
  def initialize(project_analysis); end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#11
  def build; end

  # Returns the value of attribute project_analysis.
  #
  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#5
  def project_analysis; end

  private

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#112
  def build_api_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#54
  def build_architect; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#84
  def build_controllers_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#174
  def build_devops_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#122
  def build_graphql_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#24
  def build_instances; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#152
  def build_jobs_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#74
  def build_models_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#142
  def build_services_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#132
  def build_stimulus_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#162
  def build_tests_agent; end

  # source://claude-on-rails//lib/claude_on_rails/swarm_builder.rb#98
  def build_views_agent; end
end

# source://claude-on-rails//lib/claude_on_rails/version.rb#4
ClaudeOnRails::VERSION = T.let(T.unsafe(nil), String)
