# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cronex` gem.
# Please instead update this file by running `bin/tapioca gem cronex`.


# source://cronex//lib/cronex/version.rb#1
module Cronex; end

# source://cronex//lib/cronex/exp_descriptor.rb#5
Cronex::CASINGS = T.let(T.unsafe(nil), Array)

# source://cronex//lib/cronex/exp_descriptor.rb#10
Cronex::CRONEX_OPTS = T.let(T.unsafe(nil), Hash)

# source://cronex//lib/cronex/parser.rb#3
Cronex::DAYS = T.let(T.unsafe(nil), Array)

# abbr dayname => long dayname
#
# source://cronex//lib/cronex/parser.rb#10
Cronex::DAY_DAY = T.let(T.unsafe(nil), Hash)

# source://cronex//lib/cronex/parser.rb#6
Cronex::DAY_NUM = T.let(T.unsafe(nil), Hash)

# source://cronex//lib/cronex/description/day_of_month.rb#2
class Cronex::DayOfMonthDescription < ::Cronex::Description
  # source://cronex//lib/cronex/description/day_of_month.rb#11
  def between_description_format(expression); end

  # source://cronex//lib/cronex/description/day_of_month.rb#15
  def description_format(expression); end

  # source://cronex//lib/cronex/description/day_of_month.rb#7
  def interval_description_format(expression); end

  # source://cronex//lib/cronex/description/day_of_month.rb#3
  def single_item_description(expression); end

  # source://cronex//lib/cronex/description/day_of_month.rb#19
  def starting_description_format(expression); end
end

# source://cronex//lib/cronex/description/day_of_week.rb#2
class Cronex::DayOfWeekDescription < ::Cronex::Description
  # source://cronex//lib/cronex/description/day_of_week.rb#30
  def between_description_format(expression); end

  # source://cronex//lib/cronex/description/day_of_week.rb#34
  def description_format(expression); end

  # source://cronex//lib/cronex/description/day_of_week.rb#26
  def interval_description_format(expression); end

  # source://cronex//lib/cronex/description/day_of_week.rb#3
  def single_item_description(expression); end

  # source://cronex//lib/cronex/description/day_of_week.rb#48
  def starting_description_format(expression); end
end

# source://cronex//lib/cronex/description/base.rb#2
class Cronex::Description
  # @return [Description] a new instance of Description
  #
  # source://cronex//lib/cronex/description/base.rb#6
  def initialize(resources, options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  #
  # source://cronex//lib/cronex/description/base.rb#4
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://cronex//lib/cronex/description/base.rb#4
  def options=(_arg0); end

  # source://cronex//lib/cronex/description/base.rb#54
  def plural(expression, singular, plural); end

  # Returns the value of attribute resources.
  #
  # source://cronex//lib/cronex/description/base.rb#4
  def resources; end

  # Sets the attribute resources
  #
  # @param value the value to set the attribute resources to.
  #
  # source://cronex//lib/cronex/description/base.rb#4
  def resources=(_arg0); end

  # source://cronex//lib/cronex/description/base.rb#15
  def segment_description(expression, all_values_description); end

  # source://cronex//lib/cronex/description/base.rb#11
  def special_chars; end
end

# source://cronex//lib/cronex/exp_descriptor.rb#21
class Cronex::ExpressionDescriptor
  # @return [ExpressionDescriptor] a new instance of ExpressionDescriptor
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#24
  def initialize(expression, options = T.unsafe(nil)); end

  # source://cronex//lib/cronex/exp_descriptor.rb#111
  def day_of_month_description(expression_parts); end

  # source://cronex//lib/cronex/exp_descriptor.rb#101
  def day_of_week_description(expression_parts); end

  # source://cronex//lib/cronex/exp_descriptor.rb#37
  def description(type = T.unsafe(nil)); end

  # Returns the value of attribute expression.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def expression; end

  # Sets the attribute expression
  #
  # @param value the value to set the attribute expression to.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def expression=(_arg0); end

  # Returns the value of attribute expression_parts.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def expression_parts; end

  # Sets the attribute expression_parts
  #
  # @param value the value to set the attribute expression_parts to.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def expression_parts=(_arg0); end

  # source://cronex//lib/cronex/exp_descriptor.rb#163
  def full_description(expression_parts); end

  # source://cronex//lib/cronex/exp_descriptor.rb#91
  def hours_description(expression_parts); end

  # source://cronex//lib/cronex/exp_descriptor.rb#86
  def minutes_description(expression_parts); end

  # source://cronex//lib/cronex/exp_descriptor.rb#106
  def month_description(expression_parts); end

  # Returns the value of attribute options.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def options=(_arg0); end

  # Returns the value of attribute parsed.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def parsed; end

  # Sets the attribute parsed
  #
  # @param value the value to set the attribute parsed to.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def parsed=(_arg0); end

  # Returns the value of attribute resources.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def resources; end

  # Sets the attribute resources
  #
  # @param value the value to set the attribute resources to.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def resources=(_arg0); end

  # source://cronex//lib/cronex/exp_descriptor.rb#81
  def seconds_description(expression_parts); end

  # source://cronex//lib/cronex/exp_descriptor.rb#131
  def time_of_day_description(expression_parts); end

  # Returns the value of attribute timezone.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def timezone; end

  # Sets the attribute timezone
  #
  # @param value the value to set the attribute timezone to.
  #
  # source://cronex//lib/cronex/exp_descriptor.rb#22
  def timezone=(_arg0); end

  # source://cronex//lib/cronex/exp_descriptor.rb#33
  def to_hash; end

  # source://cronex//lib/cronex/exp_descriptor.rb#175
  def transform_case(desc, case_type = T.unsafe(nil)); end

  # source://cronex//lib/cronex/exp_descriptor.rb#186
  def transform_verbosity(desc, verbose = T.unsafe(nil)); end

  # source://cronex//lib/cronex/exp_descriptor.rb#96
  def year_description(expression_parts); end
end

# source://cronex//lib/cronex/errors.rb#2
class Cronex::ExpressionError < ::StandardError; end

# source://cronex//lib/cronex/description/hours.rb#2
class Cronex::HoursDescription < ::Cronex::Description
  # source://cronex//lib/cronex/description/hours.rb#11
  def between_description_format(expression); end

  # source://cronex//lib/cronex/description/hours.rb#15
  def description_format(expression); end

  # source://cronex//lib/cronex/description/hours.rb#7
  def interval_description_format(expression); end

  # source://cronex//lib/cronex/description/hours.rb#3
  def single_item_description(expression, timezone = T.unsafe(nil)); end

  # source://cronex//lib/cronex/description/hours.rb#19
  def starting_description_format(expression); end
end

# source://cronex//lib/cronex/parser.rb#4
Cronex::MONTHS = T.let(T.unsafe(nil), Array)

# source://cronex//lib/cronex/parser.rb#7
Cronex::MONTH_NUM = T.let(T.unsafe(nil), Hash)

# source://cronex//lib/cronex/description/minutes.rb#2
class Cronex::MinutesDescription < ::Cronex::Description
  # source://cronex//lib/cronex/description/minutes.rb#11
  def between_description_format(expression); end

  # source://cronex//lib/cronex/description/minutes.rb#15
  def description_format(expression); end

  # source://cronex//lib/cronex/description/minutes.rb#7
  def interval_description_format(expression); end

  # source://cronex//lib/cronex/description/minutes.rb#23
  def min_plural(expression); end

  # source://cronex//lib/cronex/description/minutes.rb#3
  def single_item_description(expression); end

  # source://cronex//lib/cronex/description/minutes.rb#19
  def starting_description_format(expression); end
end

# source://cronex//lib/cronex/description/month.rb#2
class Cronex::MonthDescription < ::Cronex::Description
  # source://cronex//lib/cronex/description/month.rb#11
  def between_description_format(expression); end

  # source://cronex//lib/cronex/description/month.rb#15
  def description_format(expression); end

  # source://cronex//lib/cronex/description/month.rb#7
  def interval_description_format(expression); end

  # source://cronex//lib/cronex/description/month.rb#3
  def single_item_description(expression); end

  # source://cronex//lib/cronex/description/month.rb#19
  def starting_description_format(expression); end
end

# source://cronex//lib/cronex/parser.rb#12
class Cronex::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://cronex//lib/cronex/parser.rb#15
  def initialize(expression, options = T.unsafe(nil)); end

  # Returns the value of attribute expression.
  #
  # source://cronex//lib/cronex/parser.rb#13
  def expression; end

  # Sets the attribute expression
  #
  # @param value the value to set the attribute expression to.
  #
  # source://cronex//lib/cronex/parser.rb#13
  def expression=(_arg0); end

  # source://cronex//lib/cronex/parser.rb#61
  def normalize(expression_parts, options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  #
  # source://cronex//lib/cronex/parser.rb#13
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://cronex//lib/cronex/parser.rb#13
  def options=(_arg0); end

  # source://cronex//lib/cronex/parser.rb#20
  def parse(exp = T.unsafe(nil)); end

  # source://cronex//lib/cronex/parser.rb#50
  def sanitize(exp = T.unsafe(nil)); end
end

# source://cronex//lib/cronex/resource.rb#3
Cronex::RESOURCES_DIR = T.let(T.unsafe(nil), String)

# source://cronex//lib/cronex/resource.rb#5
class Cronex::Resource
  # @return [Resource] a new instance of Resource
  #
  # source://cronex//lib/cronex/resource.rb#8
  def initialize(loc = T.unsafe(nil)); end

  # source://cronex//lib/cronex/resource.rb#28
  def [](key); end

  # source://cronex//lib/cronex/resource.rb#28
  def get(key); end

  # source://cronex//lib/cronex/resource.rb#22
  def load(loc); end

  # Returns the value of attribute locale.
  #
  # source://cronex//lib/cronex/resource.rb#6
  def locale; end

  # source://cronex//lib/cronex/resource.rb#12
  def locale=(loc); end

  # Returns the value of attribute messages.
  #
  # source://cronex//lib/cronex/resource.rb#6
  def messages; end
end

# source://cronex//lib/cronex/errors.rb#3
class Cronex::ResourceError < ::StandardError; end

# source://cronex//lib/cronex/exp_descriptor.rb#6
Cronex::SEGMENTS = T.let(T.unsafe(nil), Array)

# source://cronex//lib/cronex/exp_descriptor.rb#8
Cronex::SPECIAL_CHARS = T.let(T.unsafe(nil), Array)

# source://cronex//lib/cronex/description/seconds.rb#2
class Cronex::SecondsDescription < ::Cronex::Description
  # source://cronex//lib/cronex/description/seconds.rb#11
  def between_description_format(expression); end

  # source://cronex//lib/cronex/description/seconds.rb#15
  def description_format(expression); end

  # source://cronex//lib/cronex/description/seconds.rb#7
  def interval_description_format(expression); end

  # source://cronex//lib/cronex/description/seconds.rb#3
  def single_item_description(expression); end

  # source://cronex//lib/cronex/description/seconds.rb#19
  def starting_description_format(expression); end
end

# source://cronex//lib/cronex/utils.rb#4
module Cronex::Utils
  extend ::Cronex::Utils

  # source://cronex//lib/cronex/utils.rb#25
  def day_of_week_name(number); end

  # source://cronex//lib/cronex/utils.rb#29
  def format_minutes(minute_expression); end

  # source://cronex//lib/cronex/utils.rb#37
  def format_time(hour_expression, minute_expression, second_expression = T.unsafe(nil), timezone = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://cronex//lib/cronex/utils.rb#11
  def include_any?(str, chars); end

  # source://cronex//lib/cronex/utils.rb#19
  def integer(str); end

  # @return [Boolean]
  #
  # source://cronex//lib/cronex/utils.rb#15
  def number?(str); end

  # @return [Boolean]
  #
  # source://cronex//lib/cronex/utils.rb#7
  def present?(str); end
end

# source://cronex//lib/cronex/version.rb#2
Cronex::VERSION = T.let(T.unsafe(nil), String)

# source://cronex//lib/cronex/description/year.rb#2
class Cronex::YearDescription < ::Cronex::Description
  # source://cronex//lib/cronex/description/year.rb#11
  def between_description_format(expression); end

  # source://cronex//lib/cronex/description/year.rb#15
  def description_format(expression); end

  # source://cronex//lib/cronex/description/year.rb#7
  def interval_description_format(expression); end

  # source://cronex//lib/cronex/description/year.rb#3
  def single_item_description(expression); end

  # source://cronex//lib/cronex/description/year.rb#19
  def starting_description_format(expression); end
end
