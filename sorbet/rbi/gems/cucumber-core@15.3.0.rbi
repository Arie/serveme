# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cucumber-core` gem.
# Please instead update this file by running `bin/tapioca gem cucumber-core`.


# source://cucumber-core//lib/cucumber/core/platform.rb#7
module Cucumber; end

# source://cucumber-core//lib/cucumber/core/event.rb#4
module Cucumber::Core
  # source://cucumber-core//lib/cucumber/core.rb#20
  def compile(gherkin_documents, last_receiver, filters = T.unsafe(nil), event_bus = T.unsafe(nil)); end

  # @yield [event_bus]
  #
  # source://cucumber-core//lib/cucumber/core.rb#13
  def execute(gherkin_documents, filters = T.unsafe(nil), event_bus = T.unsafe(nil)); end

  private

  # source://cucumber-core//lib/cucumber/core.rb#39
  def compose(filters, last_receiver); end

  # source://cucumber-core//lib/cucumber/core.rb#30
  def parse(gherkin_documents, compiler, event_bus, gherkin_query); end
end

# Compiles the Pickles into test cases
#
# source://cucumber-core//lib/cucumber/core/compiler.rb#15
class Cucumber::Core::Compiler
  # @return [Compiler] a new instance of Compiler
  #
  # source://cucumber-core//lib/cucumber/core/compiler.rb#19
  def initialize(receiver, gherkin_query, event_bus = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#31
  def done; end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#26
  def pickle(pickle); end

  private

  # source://cucumber-core//lib/cucumber/core/compiler.rb#57
  def create_multiline_arg(pickle_step, _uri); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#38
  def create_test_case(pickle); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#49
  def create_test_step(pickle_step, uri); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#103
  def data_table_from_pickle_step(pickle_step); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#95
  def doc_string_from_pickle_step(pickle_step); end

  # Returns the value of attribute gherkin_query.
  #
  # source://cucumber-core//lib/cucumber/core/compiler.rb#16
  def gherkin_query; end

  # Returns the value of attribute id_generator.
  #
  # source://cucumber-core//lib/cucumber/core/compiler.rb#16
  def id_generator; end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#69
  def location_from_pickle(pickle); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#79
  def location_from_pickle_step(pickle_step, uri); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#74
  def parent_locations_from_pickle(pickle); end

  # Returns the value of attribute receiver.
  #
  # source://cucumber-core//lib/cucumber/core/compiler.rb#16
  def receiver; end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#91
  def source_line(id); end

  # source://cucumber-core//lib/cucumber/core/compiler.rb#84
  def tags_from_pickle(pickle, uri); end
end

# source://cucumber-core//lib/cucumber/core/event.rb#5
class Cucumber::Core::Event
  class << self
    # @return [Symbol] the underscored name of the class to be used as the key in an event registry
    #
    # source://cucumber-core//lib/cucumber/core/event.rb#42
    def event_id; end

    # Macro to generate new sub-classes of {Event} with
    # attribute readers.
    #
    # source://cucumber-core//lib/cucumber/core/event.rb#8
    def new(*events); end

    private

    # source://cucumber-core//lib/cucumber/core/event.rb#48
    def underscore(string); end
  end
end

# Event Bus
#
# Implements an in-process pub-sub event broadcaster allowing multiple observers
# to subscribe to events that fire as your tests are executed.
#
# source://cucumber-core//lib/cucumber/core/event_bus.rb#11
class Cucumber::Core::EventBus
  # @param registry [Hash{Symbol => Class}] a hash of event types to use on the bus
  # @return [EventBus] a new instance of EventBus
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#15
  def initialize(registry = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#30
  def broadcast(event); end

  # Returns the value of attribute event_types.
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#12
  def event_types; end

  # source://cucumber-core//lib/cucumber/core/event_bus.rb#37
  def method_missing(event_id, *args); end

  # Register for an event. The handler proc will be called back with each of the attributes of the event
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#22
  def on(event_id, handler_object = T.unsafe(nil), &handler_proc); end

  private

  # source://cucumber-core//lib/cucumber/core/event_bus.rb#48
  def broadcast_queued_events_to(handler, event_type); end

  # source://cucumber-core//lib/cucumber/core/event_bus.rb#52
  def handlers_for(event_class); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#60
  def registered_id?(event_id); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#56
  def registered_type?(event_type); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#42
  def respond_to_missing?(event_id, *args); end

  # @raise [ArgumentError]
  #
  # source://cucumber-core//lib/cucumber/core/event_bus.rb#64
  def validate_handler_and_event_id!(handler, event_id); end
end

# source://cucumber-core//lib/cucumber/core/events.rb#7
module Cucumber::Core::Events
  class << self
    # Build an event registry to be passed to the {EventBus}
    # constructor from a list of types.
    #
    # Each type must respond to `event_id` so that it can be added
    # to the registry hash.
    #
    # @return [Hash{Symbol => Class}]
    #
    # source://cucumber-core//lib/cucumber/core/events.rb#88
    def build_registry(*types); end

    # The registry contains all the events registered in the core,
    # that will be used by the {EventBus} by default.
    #
    # source://cucumber-core//lib/cucumber/core/events.rb#68
    def registry; end
  end
end

# source://cucumber-core//lib/cucumber/core/events.rb#8
class Cucumber::Core::Events::Envelope < ::Cucumber::Core::Event
  # Returns the value of attribute envelope.
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#9
  def envelope; end
end

# Signals that a gherkin source has been parsed
#
# source://cucumber-core//lib/cucumber/core/events.rb#13
class Cucumber::Core::Events::GherkinSourceParsed < ::Cucumber::Core::Event
  # @return [GherkinDocument] the GherkinDocument Ast Node
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#15
  def gherkin_document; end
end

# Signals that a Test::Case was created from a Pickle
#
# source://cucumber-core//lib/cucumber/core/events.rb#28
class Cucumber::Core::Events::TestCaseCreated < ::Cucumber::Core::Event
  # The source pickle step
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#33
  def pickle; end

  # The created test step
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#30
  def test_case; end
end

# Signals that a {Test::Case} has finished executing
#
# source://cucumber-core//lib/cucumber/core/events.rb#58
class Cucumber::Core::Events::TestCaseFinished < ::Cucumber::Core::Event
  # @return [Test::Result] the result of running the {Test::Step}
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#63
  def result; end

  # @return [Test::Case] that was executed
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#60
  def test_case; end
end

# Signals that a {Test::Case} is about to be executed
#
# source://cucumber-core//lib/cucumber/core/events.rb#37
class Cucumber::Core::Events::TestCaseStarted < ::Cucumber::Core::Event
  # @return [Test::Case] the test case to be executed
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#39
  def test_case; end
end

# Signals that a Test::Step was created from a PickleStep
#
# source://cucumber-core//lib/cucumber/core/events.rb#19
class Cucumber::Core::Events::TestStepCreated < ::Cucumber::Core::Event
  # The source pickle step
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#24
  def pickle_step; end

  # The created test step
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#21
  def test_step; end
end

# Signals that a {Test::Step} has finished executing
#
# source://cucumber-core//lib/cucumber/core/events.rb#49
class Cucumber::Core::Events::TestStepFinished < ::Cucumber::Core::Event
  # @return [Test::Result] the result of running the {Test::Step}
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#54
  def result; end

  # @return [Test::Step] the test step that was executed
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#51
  def test_step; end
end

# Signals that a {Test::Step} is about to be executed
#
# source://cucumber-core//lib/cucumber/core/events.rb#43
class Cucumber::Core::Events::TestStepStarted < ::Cucumber::Core::Event
  # @return [Test::Step] the test step to be executed
  #
  # source://cucumber-core//lib/cucumber/core/events.rb#45
  def test_step; end
end

# Filters process test cases.
#
# Each filter must respond to the following protocol:
#
#   * `with_receiver(new_receiver)`
#   * `test_case(test_case, &describe_test_steps)`
#   * `done`
#
# The `with_receiver` method is used to assemble the filters into a chain. It should return a new instance of the
# filter with the receiver attribute set to the new receiver. The receiver will also respond to the filter protocol.
#
# When a `test_case` message is received, the filter can choose to:
#
# 1. pass the test_case directly to its receiver (no-op)
# 2. pass a modified copy of the test_case to its receiver
# 3. not pass the test_case to its receiver at all
#
# Finally, the `done` message is sent. A filter should pass this message directly to its receiver.
#
# source://cucumber-core//lib/cucumber/core/filter.rb#24
module Cucumber::Core::Filter
  class << self
    # Utility method for quick construction of filter classes.
    #
    # The attribute names passed to the Filter constructor will become private attributes of
    # your filter class.
    #
    # @example Example usage:
    #
    #   class BlankingFilter < Filter.new(:name_to_blank, :receiver)
    #   def test_case(test_case)
    #   if name_to_blank == test_case.name
    #   test_case.with_steps([]).describe_to(receiver)
    #   else
    #   test_case.describe_to(receiver)
    #   end
    #   end
    #   end
    #
    # source://cucumber-core//lib/cucumber/core/filter.rb#42
    def new(*attributes, &block); end
  end
end

# source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#7
module Cucumber::Core::Gherkin; end

# source://cucumber-core//lib/cucumber/core/gherkin/document.rb#6
class Cucumber::Core::Gherkin::Document
  # @return [Document] a new instance of Document
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#9
  def initialize(uri, body, language = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#19
  def ==(other); end

  # Returns the value of attribute body.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#7
  def body; end

  # Returns the value of attribute language.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#7
  def language; end

  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#15
  def to_s; end

  # Returns the value of attribute uri.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/document.rb#7
  def uri; end
end

# source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#8
class Cucumber::Core::Gherkin::ParseError < ::StandardError; end

# source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#10
class Cucumber::Core::Gherkin::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#14
  def initialize(receiver, event_bus, gherkin_query); end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#20
  def document(document); end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#35
  def done; end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#26
  def gherkin_options(document); end

  private

  # Returns the value of attribute event_bus.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#11
  def event_bus; end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#58
  def generate_envelope(message); end

  # Returns the value of attribute gherkin_query.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#11
  def gherkin_query; end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#46
  def process(message, document); end

  # Returns the value of attribute receiver.
  #
  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#11
  def receiver; end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#42
  def source_messages(document); end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#66
  def type(message); end

  # source://cucumber-core//lib/cucumber/core/gherkin/parser.rb#62
  def update_gherkin_query(message); end
end

# source://cucumber-core//lib/cucumber/core/report/summary.rb#5
module Cucumber::Core::Report; end

# source://cucumber-core//lib/cucumber/core/report/summary.rb#6
class Cucumber::Core::Report::Summary
  # @return [Summary] a new instance of Summary
  #
  # source://cucumber-core//lib/cucumber/core/report/summary.rb#9
  def initialize(event_bus); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/report/summary.rb#16
  def ok?(strict: T.unsafe(nil)); end

  # Returns the value of attribute test_cases.
  #
  # source://cucumber-core//lib/cucumber/core/report/summary.rb#7
  def test_cases; end

  # Returns the value of attribute test_steps.
  #
  # source://cucumber-core//lib/cucumber/core/report/summary.rb#7
  def test_steps; end

  private

  # source://cucumber-core//lib/cucumber/core/report/summary.rb#28
  def register_test_case_finished_listener(event_bus); end

  # source://cucumber-core//lib/cucumber/core/report/summary.rb#40
  def register_test_step_finished_listener(event_bus); end

  # source://cucumber-core//lib/cucumber/core/report/summary.rb#22
  def subscribe_to(event_bus); end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#8
module Cucumber::Core::Test; end

# source://cucumber-core//lib/cucumber/core/test/action/defined.rb#10
module Cucumber::Core::Test::Action; end

# source://cucumber-core//lib/cucumber/core/test/action/defined.rb#11
class Cucumber::Core::Test::Action::Defined
  # @raise [ArgumentError]
  # @return [Defined] a new instance of Defined
  #
  # source://cucumber-core//lib/cucumber/core/test/action/defined.rb#14
  def initialize(location = T.unsafe(nil), &block); end

  # source://cucumber-core//lib/cucumber/core/test/action/defined.rb#22
  def execute(*args); end

  # source://cucumber-core//lib/cucumber/core/test/action/defined.rb#32
  def inspect; end

  # Returns the value of attribute location.
  #
  # source://cucumber-core//lib/cucumber/core/test/action/defined.rb#12
  def location; end

  # source://cucumber-core//lib/cucumber/core/test/action/defined.rb#36
  def skip(*_arg0); end

  private

  # source://cucumber-core//lib/cucumber/core/test/action/defined.rb#46
  def failed(exception); end

  # source://cucumber-core//lib/cucumber/core/test/action/defined.rb#42
  def passed; end

  # source://cucumber-core//lib/cucumber/core/test/action/defined.rb#50
  def skipped; end
end

# source://cucumber-core//lib/cucumber/core/test/action/undefined.rb#9
class Cucumber::Core::Test::Action::Undefined
  # @return [Undefined] a new instance of Undefined
  #
  # source://cucumber-core//lib/cucumber/core/test/action/undefined.rb#12
  def initialize(source_location); end

  # source://cucumber-core//lib/cucumber/core/test/action/undefined.rb#16
  def execute(*_arg0); end

  # Returns the value of attribute location.
  #
  # source://cucumber-core//lib/cucumber/core/test/action/undefined.rb#10
  def location; end

  # source://cucumber-core//lib/cucumber/core/test/action/undefined.rb#20
  def skip(*_arg0); end

  private

  # source://cucumber-core//lib/cucumber/core/test/action/undefined.rb#26
  def undefined; end
end

# source://cucumber-core//lib/cucumber/core/test/action/unskippable.rb#10
class Cucumber::Core::Test::Action::Unskippable < ::Cucumber::Core::Test::Action::Defined
  # source://cucumber-core//lib/cucumber/core/test/action/unskippable.rb#11
  def skip(*args); end
end

# source://cucumber-core//lib/cucumber/core/test/around_hook.rb#6
class Cucumber::Core::Test::AroundHook
  # @return [AroundHook] a new instance of AroundHook
  #
  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#7
  def initialize(&block); end

  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#12
  def describe_to(visitor, *args, &continue); end

  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#20
  def execute(*_args, &continue); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#16
  def hook?; end

  private

  # source://cucumber-core//lib/cucumber/core/test/around_hook.rb#32
  def failed(exception); end
end

# source://cucumber-core//lib/cucumber/core/test/case.rb#9
class Cucumber::Core::Test::Case
  # @raise [ArgumentError]
  # @return [Case] a new instance of Case
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#12
  def initialize(id, name, test_steps, location, parent_locations, tags, language, around_hooks = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#85
  def ==(other); end

  # Returns the value of attribute around_hooks.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def around_hooks; end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#29
  def describe_to(visitor, *args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#81
  def eql?(other); end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#77
  def hash; end

  # Returns the value of attribute id.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def id; end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#73
  def inspect; end

  # Returns the value of attribute language.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def language; end

  # Returns the value of attribute location.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def location; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#56
  def match_locations?(queried_locations); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#52
  def match_name?(name_regexp); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#48
  def match_tags?(*expressions); end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#64
  def matching_locations; end

  # Returns the value of attribute name.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def name; end

  # Returns the value of attribute parent_locations.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def parent_locations; end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#25
  def step_count; end

  # Returns the value of attribute tags.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def tags; end

  # Returns the value of attribute test_steps.
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#10
  def test_steps; end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#44
  def with_around_hooks(around_hooks); end

  # source://cucumber-core//lib/cucumber/core/test/case.rb#40
  def with_steps(test_steps); end

  private

  # source://cucumber-core//lib/cucumber/core/test/case.rb#91
  def compose_around_hooks(visitor, *args, &block); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/case.rb#97
  def match_single_tag_expression?(expression); end
end

# Step Definitions that match a plain text Step with a multiline argument table
# will receive it as an instance of DataTable. A DataTable object holds the data of a
# table parsed from a feature file and lets you access and manipulate the data
# in different ways.
#
# For example:
#
#   Given I have:
#     | a | b |
#     | c | d |
#
# And a matching StepDefinition:
#
#   Given /I have:/ do |table|
#     data = table.raw
#   end
#
# This will store <tt>[['a', 'b'], ['c', 'd']]</tt> in the <tt>data</tt> variable.
#
# source://cucumber-core//lib/cucumber/core/test/data_table.rb#25
class Cucumber::Core::Test::DataTable
  # Creates a new instance. +raw+ should be an Array of Array of String
  # or an Array of Hash
  # You don't typically create your own DataTable objects - Cucumber will do
  # it internally and pass them to your Step Definitions.
  #
  # @return [DataTable] a new instance of DataTable
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#31
  def initialize(rows); end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#87
  def ==(other); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#46
  def data_table?; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#38
  def describe_to(visitor, *args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#50
  def doc_string?; end

  # Creates a copy of this table
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#56
  def dup; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#91
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#83
  def lines_count; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#75
  def map(&block); end

  # Returns the value of attribute raw.
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#36
  def raw; end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#42
  def to_step_definition_arg; end

  # Returns a new, transposed table. Example:
  #
  #   | a | 7 | 4 |
  #   | b | 9 | 2 |
  #
  # Gets converted into the following:
  #
  #   | a | b |
  #   | 7 | 9 |
  #   | 4 | 2 |
  #
  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#71
  def transpose; end

  private

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#103
  def ensure_array_of_array(array); end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#107
  def hashes_to_array(hashes); end

  # source://cucumber-core//lib/cucumber/core/test/data_table.rb#97
  def verify_rows_are_same_length(raw); end
end

# Represents an inline argument in a step. Example:
#
#   Given the message
#     """
#     I like
#     Cucumber sandwich
#     """
#
# The text between the pair of <tt>"""</tt> is stored inside a DocString,
# which is yielded to the StepDefinition block as the last argument.
#
# The StepDefinition can then access the String via the #to_s method. In the
# example above, that would return: <tt>"I like\nCucumber sandwich"</tt>
#
# Note how the indentation from the source is stripped away.
#
# source://cucumber-core//lib/cucumber/core/test/doc_string.rb#23
class Cucumber::Core::Test::DocString < ::SimpleDelegator
  # @return [DocString] a new instance of DocString
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#26
  def initialize(content, content_type); end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#59
  def ==(other); end

  # Returns the value of attribute content.
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#24
  def content; end

  # Returns the value of attribute content_type.
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#24
  def content_type; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#36
  def data_table?; end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#32
  def describe_to(visitor, *args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#40
  def doc_string?; end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#66
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#55
  def lines_count; end

  # @raise [ArgumentError]
  #
  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#44
  def map; end

  # source://cucumber-core//lib/cucumber/core/test/doc_string.rb#51
  def to_step_definition_arg; end
end

# source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#6
class Cucumber::Core::Test::EmptyMultilineArgument
  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#11
  def data_table?; end

  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#7
  def describe_to(*_arg0); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#15
  def doc_string?; end

  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#27
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#23
  def lines_count; end

  # source://cucumber-core//lib/cucumber/core/test/empty_multiline_argument.rb#19
  def map; end
end

# source://cucumber-core//lib/cucumber/core/test/location.rb#146
module Cucumber::Core::Test::HasLocation
  # source://cucumber-core//lib/cucumber/core/test/location.rb#165
  def attributes; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#174
  def comments; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#151
  def file; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#147
  def file_colon_line; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#155
  def line; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#159
  def location; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#179
  def multiline_arg; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#169
  def tags; end
end

# source://cucumber-core//lib/cucumber/core/test/hook_step.rb#8
class Cucumber::Core::Test::HookStep < ::Cucumber::Core::Test::Step
  # @return [HookStep] a new instance of HookStep
  #
  # source://cucumber-core//lib/cucumber/core/test/hook_step.rb#9
  def initialize(id, text, location, action); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/hook_step.rb#13
  def hook?; end
end

# source://cucumber-core//lib/cucumber/core/test/location.rb#10
class Cucumber::Core::Test::IncompatibleLocations < ::StandardError; end

# source://cucumber-core//lib/cucumber/core/test/location.rb#12
module Cucumber::Core::Test::Location
  class << self
    # source://cucumber-core//lib/cucumber/core/test/location.rb#17
    def from_file_colon_line(file_colon_line); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#22
    def from_source_location(file, line, *_args); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#34
    def new(file, raw_lines = T.unsafe(nil)); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#13
    def of_caller(additional_depth = T.unsafe(nil)); end
  end
end

# source://cucumber-core//lib/cucumber/core/test/location.rb#99
class Cucumber::Core::Test::Location::Lines < ::Struct
  # @return [Lines] a new instance of Lines
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#102
  def initialize(raw_data); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#122
  def +(other); end

  # Sets the attribute data
  #
  # @param value [Object] the value to set the attribute data to.
  # @return [Object] the newly set value
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#99
  def data=(_); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#106
  def first; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#118
  def include?(other); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#134
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#114
  def max; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#110
  def min; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#127
  def to_s; end

  protected

  # Returns the value of attribute data
  #
  # @return [Object] the current value of data
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#99
  def data; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#140
  def range?; end

  class << self
    # source://cucumber-core//lib/cucumber/core/test/location.rb#99
    def [](*_arg0); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#99
    def inspect; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#99
    def keyword_init?; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#99
    def members; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#99
    def new(*_arg0); end
  end
end

# source://cucumber-core//lib/cucumber/core/test/location.rb#56
class Cucumber::Core::Test::Location::Precise < ::Struct
  # Returns the value of attribute file
  #
  # @return [Object] the current value of file
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#56
  def file; end

  # Sets the attribute file
  #
  # @param value [Object] the value to set the attribute file to.
  # @return [Object] the newly set value
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#56
  def file=(_); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#75
  def hash; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#57
  def include?(other_lines); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#94
  def inspect; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#61
  def line; end

  # Returns the value of attribute lines
  #
  # @return [Object] the current value of lines
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#56
  def lines; end

  # Sets the attribute lines
  #
  # @param value [Object] the value to set the attribute lines to.
  # @return [Object] the newly set value
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#56
  def lines=(_); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#65
  def match?(other); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#83
  def merge(multiline_arg); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#90
  def on_line(new_line); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#71
  def to_s; end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#79
  def to_str; end

  class << self
    # source://cucumber-core//lib/cucumber/core/test/location.rb#56
    def [](*_arg0); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#56
    def inspect; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#56
    def keyword_init?; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#56
    def members; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#56
    def new(*_arg0); end
  end
end

# source://cucumber-core//lib/cucumber/core/test/location.rb#42
class Cucumber::Core::Test::Location::Wildcard < ::Struct
  # Returns the value of attribute file
  #
  # @return [Object] the current value of file
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#42
  def file; end

  # Sets the attribute file
  #
  # @param value [Object] the value to set the attribute file to.
  # @return [Object] the newly set value
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#42
  def file=(_); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#51
  def include?(_lines); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/location.rb#47
  def match?(other); end

  # source://cucumber-core//lib/cucumber/core/test/location.rb#43
  def to_s; end

  class << self
    # source://cucumber-core//lib/cucumber/core/test/location.rb#42
    def [](*_arg0); end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#42
    def inspect; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#42
    def keyword_init?; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#42
    def members; end

    # source://cucumber-core//lib/cucumber/core/test/location.rb#42
    def new(*_arg0); end
  end
end

# Sorts and filters scenarios based on a list of locations
#
# source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#9
class Cucumber::Core::Test::LocationsFilter
  # source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#15
  def done; end

  # source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#10
  def test_case(test_case); end

  private

  # source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#25
  def sorted_test_cases; end

  # source://cucumber-core//lib/cucumber/core/test/filters/locations_filter.rb#33
  def test_cases; end
end

# source://cucumber-core//lib/cucumber/core/test/filters/name_filter.rb#8
class Cucumber::Core::Test::NameFilter
  # source://cucumber-core//lib/cucumber/core/test/filters/name_filter.rb#9
  def test_case(test_case); end

  private

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/filters/name_filter.rb#16
  def accept?(test_case); end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#9
module Cucumber::Core::Test::Result
  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#13
    def ok?(type, strict: T.unsafe(nil)); end

    # Defines to_sym on a result class for the given result type
    #
    # Defines predicate methods on a result class with only the given one returning true
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#21
    def query_methods(result_type); end
  end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#401
class Cucumber::Core::Test::Result::Duration
  include ::Cucumber::Messages::Helpers::TimeConversion

  # @return [Duration] a new instance of Duration
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#406
  def initialize(nanoseconds); end

  # Returns the value of attribute nanoseconds.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#404
  def nanoseconds; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#410
  def to_message_duration; end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#100
class Cucumber::Core::Test::Result::Failed
  # @raise [ArgumentError]
  # @return [Failed] a new instance of Failed
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#109
  def initialize(duration, exception); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#117
  def describe_to(visitor, *args); end

  # Returns the value of attribute duration.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#103
  def duration; end

  # Returns the value of attribute exception.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#103
  def exception; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#142
  def ok?(*_arg0); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#128
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#124
  def to_s; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#150
  def with_appended_backtrace(step); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#146
  def with_duration(new_duration); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#155
  def with_filtered_backtrace(filter); end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#105
    def ok?(*_arg0); end
  end
end

# Flaky is not used directly as an execution result, but is used as a
# reporting result type for test cases that fails and the passes on
# retry, therefore only the class method self.ok? is needed.
#
# source://cucumber-core//lib/cucumber/core/test/result.rb#163
class Cucumber::Core::Test::Result::Flaky
  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#164
    def ok?(strict: T.unsafe(nil)); end
  end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#55
class Cucumber::Core::Test::Result::Passed
  # @raise [ArgumentError]
  # @return [Passed] a new instance of Passed
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#64
  def initialize(duration); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#70
  def describe_to(visitor, *args); end

  # Returns the value of attribute duration.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#58
  def duration; end

  # Sets the attribute duration
  #
  # @param value the value to set the attribute duration to.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#58
  def duration=(_arg0); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#87
  def ok?(*_arg0); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#80
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#76
  def to_s; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#91
  def with_appended_backtrace(_step); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#95
  def with_filtered_backtrace(_filter); end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#60
    def ok?(*_arg0); end
  end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#257
class Cucumber::Core::Test::Result::Pending < ::Cucumber::Core::Test::Result::Raisable
  # source://cucumber-core//lib/cucumber/core/test/result.rb#264
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#274
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#270
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#260
    def ok?(strict: T.unsafe(nil)); end
  end
end

# Base class for exceptions that can be raised in a step definition causing the step to have that result.
#
# source://cucumber-core//lib/cucumber/core/test/result.rb#170
class Cucumber::Core::Test::Result::Raisable < ::StandardError
  # @return [Raisable] a new instance of Raisable
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#173
  def initialize(message = T.unsafe(nil), duration = T.unsafe(nil), backtrace = T.unsafe(nil)); end

  # Returns the value of attribute duration.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#171
  def duration; end

  # Returns the value of attribute message.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#171
  def message; end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#202
  def ok?(strict: T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#188
  def with_appended_backtrace(step); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#184
  def with_duration(new_duration); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#196
  def with_filtered_backtrace(filter); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#180
  def with_message(new_message); end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#11
Cucumber::Core::Test::Result::STRICT_AFFECTED_TYPES = T.let(T.unsafe(nil), Array)

# source://cucumber-core//lib/cucumber/core/test/result.rb#232
class Cucumber::Core::Test::Result::Skipped < ::Cucumber::Core::Test::Result::Raisable
  # source://cucumber-core//lib/cucumber/core/test/result.rb#239
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#249
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#245
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#235
    def ok?(*_arg0); end
  end
end

# Handles the strict settings for the result types that are
# affected by the strict options (that is the STRICT_AFFECTED_TYPES).
#
# source://cucumber-core//lib/cucumber/core/test/result.rb#284
class Cucumber::Core::Test::Result::StrictConfiguration
  # @return [StrictConfiguration] a new instance of StrictConfiguration
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#288
  def initialize(strict_types = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#317
  def merge!(other); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#324
  def set?(type); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#309
  def set_strict(setting, type = T.unsafe(nil)); end

  # Sets the attribute settings
  #
  # @param value the value to set the attribute settings to.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#285
  def settings=(_arg0); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#295
  def strict?(type = T.unsafe(nil)); end

  private

  # Returns the value of attribute settings.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#285
  def settings; end
end

# An object that responds to the description protocol from the results and collects summary information.
#
# e.g.
#     summary = Result::Summary.new
#     Result::Passed.new(0).describe_to(summary)
#     puts summary.total_passed
#     => 1
#
# source://cucumber-core//lib/cucumber/core/test/result.rb#338
class Cucumber::Core::Test::Result::Summary
  # @return [Summary] a new instance of Summary
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#341
  def initialize; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#384
  def decrement_failed; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#371
  def duration(duration); end

  # Returns the value of attribute durations.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#339
  def durations; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#366
  def exception(exception); end

  # Returns the value of attribute exceptions.
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#339
  def exceptions; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#347
  def method_missing(name, *_args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#359
  def ok?(strict: T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#376
  def total(for_status = T.unsafe(nil)); end

  private

  # source://cucumber-core//lib/cucumber/core/test/result.rb#390
  def get_total(method_name); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#395
  def increment_total(status); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/result.rb#355
  def respond_to_missing?(*_arg0); end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#10
Cucumber::Core::Test::Result::TYPES = T.let(T.unsafe(nil), Array)

# source://cucumber-core//lib/cucumber/core/test/result.rb#207
class Cucumber::Core::Test::Result::Undefined < ::Cucumber::Core::Test::Result::Raisable
  # source://cucumber-core//lib/cucumber/core/test/result.rb#214
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#224
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#220
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://cucumber-core//lib/cucumber/core/test/result.rb#210
    def ok?(strict: T.unsafe(nil)); end
  end
end

# Null object for results. Represents the state where we haven't run anything yet
#
# source://cucumber-core//lib/cucumber/core/test/result.rb#36
class Cucumber::Core::Test::Result::Unknown
  # source://cucumber-core//lib/cucumber/core/test/result.rb#39
  def describe_to(_visitor, *_args); end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#47
  def to_message; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#43
  def with_filtered_backtrace(_filter); end
end

# source://cucumber-core//lib/cucumber/core/test/result.rb#422
class Cucumber::Core::Test::Result::UnknownDuration
  include ::Cucumber::Messages::Helpers::TimeConversion

  # source://cucumber-core//lib/cucumber/core/test/result.rb#429
  def nanoseconds; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#425
  def tap; end

  # source://cucumber-core//lib/cucumber/core/test/result.rb#433
  def to_message_duration; end
end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#8
class Cucumber::Core::Test::Runner
  # @return [Runner] a new instance of Runner
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#12
  def initialize(event_bus); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#36
  def around_hook(hook, &continue); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#43
  def done; end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#16
  def test_case(test_case, &descend); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#27
  def test_step(test_step); end

  private

  # Returns the value of attribute event_bus.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#9
  def event_bus; end

  # Returns the value of attribute running_test_case.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#9
  def running_test_case; end

  # Returns the value of attribute running_test_step.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#9
  def running_test_step; end
end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#47
class Cucumber::Core::Test::Runner::RunningTestCase
  # @return [RunningTestCase] a new instance of RunningTestCase
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#48
  def initialize; end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#90
  def duration(_step_duration, _step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#86
  def exception(_step_exception, _step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#53
  def execute(test_step, &continue); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#61
  def failed(step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#66
  def passed(step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#71
  def pending(_message, step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#57
  def result; end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#76
  def skipped(step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#81
  def undefined(step_result); end

  private

  # Returns the value of attribute status.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#94
  def status; end
end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#97
module Cucumber::Core::Test::Runner::RunningTestCase::Status; end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#98
class Cucumber::Core::Test::Runner::RunningTestCase::Status::Base
  # @return [Base] a new instance of Base
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#102
  def initialize(step_result); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#106
  def execute(test_step, monitor, &continue); end

  # @raise [NoMethodError]
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#113
  def result; end

  private

  # Returns the value of attribute step_result.
  #
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#99
  def step_result; end
end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#130
class Cucumber::Core::Test::Runner::RunningTestCase::Status::Failing < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Base
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#131
  def execute(test_step, monitor); end

  # source://cucumber-core//lib/cucumber/core/test/runner.rb#140
  def result(duration); end
end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#124
class Cucumber::Core::Test::Runner::RunningTestCase::Status::Passing < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Base
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#125
  def result(duration); end
end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#145
class Cucumber::Core::Test::Runner::RunningTestCase::Status::Pending < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Failing; end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#147
class Cucumber::Core::Test::Runner::RunningTestCase::Status::Skipping < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Failing
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#148
  def result(duration); end
end

# source://cucumber-core//lib/cucumber/core/test/runner.rb#118
class Cucumber::Core::Test::Runner::RunningTestCase::Status::Unknown < ::Cucumber::Core::Test::Runner::RunningTestCase::Status::Base
  # source://cucumber-core//lib/cucumber/core/test/runner.rb#119
  def result(_duration); end
end

# source://cucumber-core//lib/cucumber/core/test/step.rb#10
class Cucumber::Core::Test::Step
  # @raise [ArgumentError]
  # @return [Step] a new instance of Step
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#13
  def initialize(id, text, location, multiline_arg = T.unsafe(nil), action = T.unsafe(nil)); end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#51
  def action_location; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#43
  def backtrace_line; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#23
  def describe_to(visitor, *args); end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#35
  def execute(*args); end

  # @return [Boolean]
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#27
  def hook?; end

  # Returns the value of attribute id.
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#11
  def id; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#59
  def inspect; end

  # Returns the value of attribute location.
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#11
  def location; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#55
  def matching_locations; end

  # Returns the value of attribute multiline_arg.
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#11
  def multiline_arg; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#31
  def skip(*args); end

  # Returns the value of attribute text.
  #
  # source://cucumber-core//lib/cucumber/core/test/step.rb#11
  def text; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#47
  def to_s; end

  # source://cucumber-core//lib/cucumber/core/test/step.rb#39
  def with_action(action_location = T.unsafe(nil), &block); end
end

# source://cucumber-core//lib/cucumber/core/test/tag.rb#6
class Cucumber::Core::Test::Tag
  include ::Cucumber::Core::Test::HasLocation

  # @return [Tag] a new instance of Tag
  #
  # source://cucumber-core//lib/cucumber/core/test/tag.rb#11
  def initialize(location, name); end

  # source://cucumber-core//lib/cucumber/core/test/tag.rb#16
  def inspect; end

  # Returns the value of attribute name.
  #
  # source://cucumber-core//lib/cucumber/core/test/tag.rb#9
  def name; end
end

# source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#8
class Cucumber::Core::Test::TagFilter
  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#15
  def done; end

  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#9
  def test_case(test_case); end

  private

  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#22
  def test_cases; end
end

# source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#26
class Cucumber::Core::Test::TagFilter::TestCases
  # @return [TestCases] a new instance of TestCases
  #
  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#29
  def initialize; end

  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#33
  def <<(test_case); end

  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#40
  def with_tag_name(tag_name); end

  private

  # Returns the value of attribute test_cases_by_tag_name.
  #
  # source://cucumber-core//lib/cucumber/core/test/filters/tag_filter.rb#27
  def test_cases_by_tag_name; end
end

# source://cucumber-core//lib/cucumber/core/test/timer.rb#8
class Cucumber::Core::Test::Timer
  # source://cucumber-core//lib/cucumber/core/test/timer.rb#14
  def duration; end

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#18
  def nsec; end

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#22
  def sec; end

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#9
  def start; end

  private

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#28
  def time_in_nanoseconds; end
end

# source://cucumber-core//lib/cucumber/core/test/timer.rb#32
module Cucumber::Core::Test::Timer::MonotonicTime
  private

  # source://cucumber-core//lib/cucumber/core/test/timer.rb#36
  def time_in_nanoseconds; end

  class << self
    # source://cucumber-core//lib/cucumber/core/test/timer.rb#36
    def time_in_nanoseconds; end
  end
end

# source://cucumber-core//lib/cucumber/core/platform.rb#10
Cucumber::IRONRUBY = T.let(T.unsafe(nil), FalseClass)

# source://cucumber-core//lib/cucumber/core/platform.rb#9
Cucumber::JRUBY = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core//lib/cucumber/core/platform.rb#12
Cucumber::OS_X = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core//lib/cucumber/core/platform.rb#15
Cucumber::RUBY_1_9 = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core//lib/cucumber/core/platform.rb#14
Cucumber::RUBY_2_0 = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core//lib/cucumber/core/platform.rb#11
Cucumber::WINDOWS = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core//lib/cucumber/core/platform.rb#13
Cucumber::WINDOWS_MRI = T.let(T.unsafe(nil), T.untyped)
