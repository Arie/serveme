# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cucumber-cucumber-expressions` gem.
# Please instead update this file by running `bin/tapioca gem cucumber-cucumber-expressions`.

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#1
module Cucumber
  class << self
    # source://cucumber/8.0.0/lib/cucumber/deprecate.rb#52
    def deprecate(*args); end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#21
    def file_mode(mode, encoding = T.unsafe(nil)); end

    # source://cucumber/8.0.0/lib/cucumber.rb#15
    def logger; end

    # source://cucumber/8.0.0/lib/cucumber.rb#23
    def logger=(logger); end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#18
    def use_full_backtrace; end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#18
    def use_full_backtrace=(_arg0); end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def use_legacy_autoloader; end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def use_legacy_autoloader=(_arg0); end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def wants_to_quit; end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def wants_to_quit=(_arg0); end
  end
end

# source://cucumber/8.0.0/lib/cucumber/platform.rb#11
Cucumber::BINARY = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#2
module Cucumber::CucumberExpressions; end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#4
Cucumber::CucumberExpressions::ALTERNATION_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#141
class Cucumber::CucumberExpressions::AlternationNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [AlternationNotAllowedInOptional] a new instance of AlternationNotAllowedInOptional
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#142
  def initialize(expression, current); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#53
class Cucumber::CucumberExpressions::AlternativeMayNotBeEmpty < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [AlternativeMayNotBeEmpty] a new instance of AlternativeMayNotBeEmpty
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#54
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#41
class Cucumber::CucumberExpressions::AlternativeMayNotExclusivelyContainOptionals < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [AlternativeMayNotExclusivelyContainOptionals] a new instance of AlternativeMayNotExclusivelyContainOptionals
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#42
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#186
class Cucumber::CucumberExpressions::AmbiguousParameterTypeError < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [AmbiguousParameterTypeError] a new instance of AmbiguousParameterTypeError
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#187
  def initialize(parameter_type_regexp, expression_regexp, parameter_types, generated_expressions); end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#209
  def expressions(generated_expressions); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#205
  def parameter_type_names(parameter_types); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#6
class Cucumber::CucumberExpressions::Argument
  # @return [Argument] a new instance of Argument
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#26
  def initialize(group, parameter_type); end

  # Returns the value of attribute group.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#7
  def group; end

  # Returns the value of attribute parameter_type.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#7
  def parameter_type; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#30
  def value(self_obj = T.unsafe(nil)); end

  class << self
    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#9
    def build(tree_regexp, text, parameter_types); end
  end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#7
Cucumber::CucumberExpressions::BEGIN_OPTIONAL_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#5
Cucumber::CucumberExpressions::BEGIN_PARAMETER_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#65
class Cucumber::CucumberExpressions::CantEscape < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [CantEscape] a new instance of CantEscape
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#66
  def initialize(expression, index); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#6
class Cucumber::CucumberExpressions::CombinatorialGeneratedExpressionFactory
  # @return [CombinatorialGeneratedExpressionFactory] a new instance of CombinatorialGeneratedExpressionFactory
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#7
  def initialize(expression_template, parameter_type_combinations); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#12
  def generate_expressions; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#21
  def generate_permutations(generated_expressions, depth, current_parameter_types); end
end

# 256 generated expressions ought to be enough for anybody
#
# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#19
Cucumber::CucumberExpressions::CombinatorialGeneratedExpressionFactory::MAX_EXPRESSIONS = T.let(T.unsafe(nil), Integer)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#8
class Cucumber::CucumberExpressions::CucumberExpression
  # @return [CucumberExpression] a new instance of CucumberExpression
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#12
  def initialize(expression, parameter_type_registry); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#22
  def match(text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#30
  def regexp; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#26
  def source; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#34
  def to_s; end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#117
  def assert_no_optionals(node, &raise_error); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#112
  def assert_no_parameters(node, &raise_error); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#107
  def assert_not_empty(node, &raise_error); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#60
  def escape_regex(expression); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#72
  def rewrite_alternation(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#84
  def rewrite_alternative(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#102
  def rewrite_expression(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#64
  def rewrite_optional(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#88
  def rewrite_parameter(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#40
  def rewrite_to_regex(node); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#10
Cucumber::CucumberExpressions::CucumberExpression::ESCAPE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#5
class Cucumber::CucumberExpressions::CucumberExpressionError < ::StandardError
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#7
  def build_message(index, expression, pointer, problem, solution); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#25
  def point_at(index); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#29
  def point_at_located(node); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#7
class Cucumber::CucumberExpressions::CucumberExpressionGenerator
  # @return [CucumberExpressionGenerator] a new instance of CucumberExpressionGenerator
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#8
  def initialize(parameter_type_registry); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#12
  def generate_expressions(text); end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#71
  def create_parameter_type_matchers(text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#81
  def create_parameter_type_matchers2(parameter_type, text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#89
  def escape(s); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#7
class Cucumber::CucumberExpressions::CucumberExpressionParser
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#8
  def parse(expression); end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#202
  def create_alternative_nodes(start, _end, separators, alternatives); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#173
  def looking_at(tokens, at, token); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#169
  def looking_at_any(tokens, at, token_types); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#118
  def parse_between(type, begin_token, end_token, parsers); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#140
  def parse_token(expression, parsers, tokens, start_at); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#149
  def parse_tokens_until(expression, parsers, tokens, start_at, end_tokens); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#185
  def split_alternatives(start, _end, alternation); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#6
class Cucumber::CucumberExpressions::CucumberExpressionTokenizer
  # @raise [TheEndOfLineCannotBeEscaped]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#7
  def tokenize(expression); end

  private

  # TODO: Make these lambdas
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#57
  def convert_buffer_to_token(token_type); end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#89
  def should_create_new_token?(previous_token_type, current_token_type); end

  # @raise [CantEscape]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#76
  def token_type_of(codepoint, treat_as_text); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#8
Cucumber::CucumberExpressions::END_OPTIONAL_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#6
Cucumber::CucumberExpressions::END_PARAMETER_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#3
Cucumber::CucumberExpressions::ESCAPE_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#3
class Cucumber::CucumberExpressions::GeneratedExpression
  # @return [GeneratedExpression] a new instance of GeneratedExpression
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#6
  def initialize(expression_template, parameters_types); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#14
  def parameter_names; end

  # Returns the value of attribute parameter_types.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#4
  def parameter_types; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#10
  def source; end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#23
  def get_parameter_name(type_name, usage_by_type_name); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#3
class Cucumber::CucumberExpressions::Group
  # @return [Group] a new instance of Group
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#6
  def initialize(value, start, _end, children); end

  # Returns the value of attribute children.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#4
  def children; end

  # Returns the value of attribute end.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#4
  def end; end

  # Returns the value of attribute start.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#4
  def start; end

  # Returns the value of attribute value.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#4
  def value; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#13
  def values; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#5
class Cucumber::CucumberExpressions::GroupBuilder
  # @return [GroupBuilder] a new instance of GroupBuilder
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#8
  def initialize; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#13
  def add(group_builder); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#17
  def build(match, group_indices); end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#27
  def capturing?; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#37
  def children; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#31
  def move_children_to(group_builder); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#23
  def set_non_capturing!; end

  # Returns the value of attribute source.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#6
  def source; end

  # Sets the attribute source
  #
  # @param value the value to set the attribute source to.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#6
  def source=(_arg0); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#153
class Cucumber::CucumberExpressions::InvalidParameterTypeName < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [InvalidParameterTypeName] a new instance of InvalidParameterTypeName
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#154
  def initialize(type_name); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#161
class Cucumber::CucumberExpressions::InvalidParameterTypeNameInNode < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [InvalidParameterTypeNameInNode] a new instance of InvalidParameterTypeNameInNode
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#162
  def initialize(expression, token); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#126
class Cucumber::CucumberExpressions::MissingEndToken < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [MissingEndToken] a new instance of MissingEndToken
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#127
  def initialize(expression, begin_token, end_token, current); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#10
class Cucumber::CucumberExpressions::Node
  # @return [Node] a new instance of Node
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#11
  def initialize(type, nodes, token, start, _end); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#38
  def end; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#26
  def nodes; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#34
  def start; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#42
  def text; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#49
  def to_hash; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#30
  def token; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#22
  def type; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#64
module Cucumber::CucumberExpressions::NodeType; end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#67
Cucumber::CucumberExpressions::NodeType::ALTERNATION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#68
Cucumber::CucumberExpressions::NodeType::ALTERNATIVE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#70
Cucumber::CucumberExpressions::NodeType::EXPRESSION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#66
Cucumber::CucumberExpressions::NodeType::OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#69
Cucumber::CucumberExpressions::NodeType::PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#65
Cucumber::CucumberExpressions::NodeType::TEXT = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#101
class Cucumber::CucumberExpressions::OptionalIsNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [OptionalIsNotAllowedInOptional] a new instance of OptionalIsNotAllowedInOptional
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#102
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#77
class Cucumber::CucumberExpressions::OptionalMayNotBeEmpty < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [OptionalMayNotBeEmpty] a new instance of OptionalMayNotBeEmpty
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#78
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#89
class Cucumber::CucumberExpressions::ParameterIsNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [ParameterIsNotAllowedInOptional] a new instance of ParameterIsNotAllowedInOptional
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#90
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#5
class Cucumber::CucumberExpressions::ParameterType
  # Create a new Parameter
  #
  # @param name the name of the parameter type
  # @param regexp [Array] list of regexps for capture groups. A single regexp can also be used
  # @param type the return type of the transformed
  # @param transformer lambda that transforms a String to (possibly) another type
  # @param use_for_snippets true if this should be used for snippet generation
  # @param prefer_for_regexp_match true if this should be preferred over similar types
  # @return [ParameterType] a new instance of ParameterType
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#41
  def initialize(name, regexp, type, transformer, use_for_snippets, prefer_for_regexp_match); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#57
  def <=>(other); end

  # Returns the value of attribute name.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#9
  def name; end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#24
  def prefer_for_regexp_match?; end

  # Returns the value of attribute regexps.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#9
  def regexps; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#53
  def transform(self_obj, group_values); end

  # Returns the value of attribute type.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#9
  def type; end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#28
  def use_for_snippets?; end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#71
  def regexp_source(regexp); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#66
  def string_array(regexps); end

  class << self
    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#11
    def check_parameter_type_name(type_name); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#17
    def is_valid_parameter_type_name(type_name); end
  end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#6
Cucumber::CucumberExpressions::ParameterType::ILLEGAL_PARAMETER_NAME_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#7
Cucumber::CucumberExpressions::ParameterType::UNESCAPE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#3
class Cucumber::CucumberExpressions::ParameterTypeMatcher
  # @return [ParameterTypeMatcher] a new instance of ParameterTypeMatcher
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#6
  def initialize(parameter_type, regexp, text, match_position = T.unsafe(nil)); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#38
  def <=>(other); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#11
  def advance_to(new_match_position); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#22
  def find; end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#26
  def full_word?; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#34
  def group; end

  # Returns the value of attribute parameter_type.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#4
  def parameter_type; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#30
  def start; end

  private

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#53
  def space_after_match_or_sentence_end?; end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#48
  def space_before_match_or_sentence_start?; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#8
class Cucumber::CucumberExpressions::ParameterTypeRegistry
  # @return [ParameterTypeRegistry] a new instance of ParameterTypeRegistry
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#15
  def initialize; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#53
  def define_parameter_type(parameter_type); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#36
  def lookup_by_regexp(parameter_type_regexp, expression_regexp, text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#32
  def lookup_by_type_name(name); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#49
  def parameter_types; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#13
Cucumber::CucumberExpressions::ParameterTypeRegistry::ANONYMOUS_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#10
Cucumber::CucumberExpressions::ParameterTypeRegistry::FLOAT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#9
Cucumber::CucumberExpressions::ParameterTypeRegistry::INTEGER_REGEXPS = T.let(T.unsafe(nil), Array)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#12
Cucumber::CucumberExpressions::ParameterTypeRegistry::STRING_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#11
Cucumber::CucumberExpressions::ParameterTypeRegistry::WORD_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#7
class Cucumber::CucumberExpressions::RegularExpression
  # @return [RegularExpression] a new instance of RegularExpression
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#9
  def initialize(expression_regexp, parameter_type_registry); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#15
  def match(text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#35
  def regexp; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#39
  def source; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#43
  def to_s; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#113
class Cucumber::CucumberExpressions::TheEndOfLineCannotBeEscaped < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [TheEndOfLineCannotBeEscaped] a new instance of TheEndOfLineCannotBeEscaped
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#114
  def initialize(expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#74
class Cucumber::CucumberExpressions::Token
  # @return [Token] a new instance of Token
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#75
  def initialize(type, text, start, _end); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#91
  def end; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#87
  def start; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#83
  def text; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#179
  def to_hash; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#79
  def type; end

  class << self
    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#99
    def can_escape(codepoint); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#95
    def is_escape_character(codepoint); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#162
    def purpose_of(token); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#145
    def symbol_of(token); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#123
    def type_of(codepoint); end
  end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#189
module Cucumber::CucumberExpressions::TokenType; end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#197
Cucumber::CucumberExpressions::TokenType::ALTERNATION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#193
Cucumber::CucumberExpressions::TokenType::BEGIN_OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#195
Cucumber::CucumberExpressions::TokenType::BEGIN_PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#191
Cucumber::CucumberExpressions::TokenType::END_OF_LINE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#194
Cucumber::CucumberExpressions::TokenType::END_OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#196
Cucumber::CucumberExpressions::TokenType::END_PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#190
Cucumber::CucumberExpressions::TokenType::START_OF_LINE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#198
Cucumber::CucumberExpressions::TokenType::TEXT = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#192
Cucumber::CucumberExpressions::TokenType::WHITE_SPACE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#6
class Cucumber::CucumberExpressions::TreeRegexp
  # @return [TreeRegexp] a new instance of TreeRegexp
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#9
  def initialize(regexp); end

  # Returns the value of attribute group_builder.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#7
  def group_builder; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#14
  def match(s); end

  # Returns the value of attribute regexp.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#7
  def regexp; end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#48
  def create_group_builder(regexp); end

  # @raise [CucumberExpressionError]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#21
  def is_non_capturing(source, i); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#173
class Cucumber::CucumberExpressions::UndefinedParameterTypeError < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [UndefinedParameterTypeError] a new instance of UndefinedParameterTypeError
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#176
  def initialize(node, expression, undefined_parameter_type_name); end

  # Returns the value of attribute undefined_parameter_type_name.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#174
  def undefined_parameter_type_name; end
end

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#9
Cucumber::IRONRUBY = T.let(T.unsafe(nil), FalseClass)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#8
Cucumber::JRUBY = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#12
Cucumber::LIBDIR = T.let(T.unsafe(nil), String)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#11
Cucumber::OS_X = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#13
Cucumber::RAILS = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#15
Cucumber::RUBY = T.let(T.unsafe(nil), String)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#14
Cucumber::RUBY_1_9 = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#13
Cucumber::RUBY_2_0 = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#14
Cucumber::RUBY_BINARY = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#10
Cucumber::VERSION = T.let(T.unsafe(nil), String)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#10
Cucumber::WINDOWS = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#12
Cucumber::WINDOWS_MRI = T.let(T.unsafe(nil), T.untyped)
