# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cucumber-cucumber-expressions` gem.
# Please instead update this file by running `bin/tapioca gem cucumber-cucumber-expressions`.


# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#3
module Cucumber; end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#4
module Cucumber::CucumberExpressions; end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#6
Cucumber::CucumberExpressions::ALTERNATION_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#153
class Cucumber::CucumberExpressions::AlternationNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [AlternationNotAllowedInOptional] a new instance of AlternationNotAllowedInOptional
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#154
  def initialize(expression, current); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#50
class Cucumber::CucumberExpressions::AlternativeMayNotBeEmpty < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [AlternativeMayNotBeEmpty] a new instance of AlternativeMayNotBeEmpty
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#51
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#36
class Cucumber::CucumberExpressions::AlternativeMayNotExclusivelyContainOptionals < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [AlternativeMayNotExclusivelyContainOptionals] a new instance of AlternativeMayNotExclusivelyContainOptionals
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#37
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#204
class Cucumber::CucumberExpressions::AmbiguousParameterTypeError < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [AmbiguousParameterTypeError] a new instance of AmbiguousParameterTypeError
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#205
  def initialize(parameter_type_regexp, expression_regexp, parameter_types, generated_expressions); end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#227
  def expressions(generated_expressions); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#223
  def parameter_type_names(parameter_types); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#8
class Cucumber::CucumberExpressions::Argument
  # @return [Argument] a new instance of Argument
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#29
  def initialize(group, parameter_type); end

  # Returns the value of attribute group.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#9
  def group; end

  # Returns the value of attribute parameter_type.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#9
  def parameter_type; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#33
  def value(self_obj = T.unsafe(nil)); end

  class << self
    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/argument.rb#11
    def build(tree_regexp, text, parameter_types); end
  end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#9
Cucumber::CucumberExpressions::BEGIN_OPTIONAL_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#7
Cucumber::CucumberExpressions::BEGIN_PARAMETER_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#64
class Cucumber::CucumberExpressions::CantEscape < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [CantEscape] a new instance of CantEscape
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#65
  def initialize(expression, index); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#7
class Cucumber::CucumberExpressions::CombinatorialGeneratedExpressionFactory
  # @return [CombinatorialGeneratedExpressionFactory] a new instance of CombinatorialGeneratedExpressionFactory
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#8
  def initialize(expression_template, parameter_type_combinations); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#13
  def generate_expressions; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#22
  def generate_permutations(generated_expressions, depth, current_parameter_types); end
end

# 256 generated expressions ought to be enough for anybody
#
# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/combinatorial_generated_expression_factory.rb#20
Cucumber::CucumberExpressions::CombinatorialGeneratedExpressionFactory::MAX_EXPRESSIONS = T.let(T.unsafe(nil), Integer)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#10
class Cucumber::CucumberExpressions::CucumberExpression
  # @return [CucumberExpression] a new instance of CucumberExpression
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#13
  def initialize(expression, parameter_type_registry); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#23
  def match(text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#31
  def regexp; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#27
  def source; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#35
  def to_s; end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#115
  def assert_no_optionals(node, &raise_error); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#110
  def assert_no_parameters(node, &raise_error); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#105
  def assert_not_empty(node, &raise_error); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#61
  def escape_regex(expression); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#73
  def rewrite_alternation(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#84
  def rewrite_alternative(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#100
  def rewrite_expression(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#65
  def rewrite_optional(node); end

  # @raise [UndefinedParameterTypeError]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#88
  def rewrite_parameter(node); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#41
  def rewrite_to_regex(node); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression.rb#11
Cucumber::CucumberExpressions::CucumberExpression::ESCAPE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#7
class Cucumber::CucumberExpressions::CucumberExpressionError < ::StandardError
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#8
  def build_message(index, expression, pointer, problem, solution); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#20
  def point_at(index); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#24
  def point_at_located(node); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#9
class Cucumber::CucumberExpressions::CucumberExpressionGenerator
  # @return [CucumberExpressionGenerator] a new instance of CucumberExpressionGenerator
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#10
  def initialize(parameter_type_registry); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#14
  def generate_expressions(text); end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#69
  def create_parameter_type_matchers(text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#77
  def create_parameter_type_matchers2(parameter_type, text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_generator.rb#85
  def escape(s); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#9
class Cucumber::CucumberExpressions::CucumberExpressionParser
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#10
  def parse(expression); end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#186
  def create_alternative_nodes(start, _end, separators, alternatives); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#158
  def looking_at(tokens, at, token); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#154
  def looking_at_any(tokens, at, token_types); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#105
  def parse_between(type, begin_token, end_token, parsers); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#125
  def parse_token(expression, parsers, tokens, start_at); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#134
  def parse_tokens_until(expression, parsers, tokens, start_at, end_tokens); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_parser.rb#169
  def split_alternatives(start, _end, alternation); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#8
class Cucumber::CucumberExpressions::CucumberExpressionTokenizer
  # @raise [TheEndOfLineCannotBeEscaped]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#9
  def tokenize(expression); end

  private

  # TODO: Make these lambdas
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#57
  def convert_buffer_to_token(token_type); end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#84
  def should_create_new_token?(previous_token_type, current_token_type); end

  # @raise [CantEscape]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/cucumber_expression_tokenizer.rb#76
  def token_type_of(codepoint, treat_as_text); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#10
Cucumber::CucumberExpressions::END_OPTIONAL_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#8
Cucumber::CucumberExpressions::END_PARAMETER_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#5
Cucumber::CucumberExpressions::ESCAPE_CHARACTER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#5
class Cucumber::CucumberExpressions::GeneratedExpression
  # @return [GeneratedExpression] a new instance of GeneratedExpression
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#8
  def initialize(expression_template, parameters_types); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#16
  def parameter_names; end

  # Returns the value of attribute parameter_types.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#6
  def parameter_types; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#12
  def source; end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/generated_expression.rb#25
  def get_parameter_name(type_name, usage_by_type_name); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#5
class Cucumber::CucumberExpressions::Group
  # @return [Group] a new instance of Group
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#8
  def initialize(value, start, _end, children); end

  # Returns the value of attribute children.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#6
  def children; end

  # Returns the value of attribute end.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#6
  def end; end

  # Returns the value of attribute start.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#6
  def start; end

  # Returns the value of attribute value.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#6
  def value; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group.rb#15
  def values; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#7
class Cucumber::CucumberExpressions::GroupBuilder
  # @return [GroupBuilder] a new instance of GroupBuilder
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#10
  def initialize; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#15
  def add(group_builder); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#19
  def build(match, group_indices); end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#29
  def capturing?; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#39
  def children; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#33
  def move_children_to(group_builder); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#25
  def set_non_capturing!; end

  # Returns the value of attribute source.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#8
  def source; end

  # Sets the attribute source
  #
  # @param value the value to set the attribute source to.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/group_builder.rb#8
  def source=(_arg0); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#167
class Cucumber::CucumberExpressions::InvalidParameterTypeName < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [InvalidParameterTypeName] a new instance of InvalidParameterTypeName
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#168
  def initialize(type_name); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#173
class Cucumber::CucumberExpressions::InvalidParameterTypeNameInNode < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [InvalidParameterTypeNameInNode] a new instance of InvalidParameterTypeNameInNode
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#174
  def initialize(expression, token); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#135
class Cucumber::CucumberExpressions::MissingEndToken < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [MissingEndToken] a new instance of MissingEndToken
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#136
  def initialize(expression, begin_token, end_token, current); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#12
class Cucumber::CucumberExpressions::Node
  # @return [Node] a new instance of Node
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#15
  def initialize(type, nodes, token, start, ending); end

  # Returns the value of attribute end.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#13
  def end; end

  # Returns the value of attribute nodes.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#13
  def nodes; end

  # Returns the value of attribute start.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#13
  def start; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#25
  def text; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#31
  def to_hash; end

  # Returns the value of attribute token.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#13
  def token; end

  # Returns the value of attribute type.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#13
  def type; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#42
module Cucumber::CucumberExpressions::NodeType; end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#45
Cucumber::CucumberExpressions::NodeType::ALTERNATION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#46
Cucumber::CucumberExpressions::NodeType::ALTERNATIVE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#48
Cucumber::CucumberExpressions::NodeType::EXPRESSION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#44
Cucumber::CucumberExpressions::NodeType::OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#47
Cucumber::CucumberExpressions::NodeType::PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#43
Cucumber::CucumberExpressions::NodeType::TEXT = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#106
class Cucumber::CucumberExpressions::OptionalIsNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [OptionalIsNotAllowedInOptional] a new instance of OptionalIsNotAllowedInOptional
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#107
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#78
class Cucumber::CucumberExpressions::OptionalMayNotBeEmpty < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [OptionalMayNotBeEmpty] a new instance of OptionalMayNotBeEmpty
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#79
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#92
class Cucumber::CucumberExpressions::ParameterIsNotAllowedInOptional < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [ParameterIsNotAllowedInOptional] a new instance of ParameterIsNotAllowedInOptional
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#93
  def initialize(node, expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#7
class Cucumber::CucumberExpressions::ParameterType
  # Create a new Parameter
  #
  # @param name the name of the parameter type
  # @param regexp [Array] list of regexps for capture groups. A single regexp can also be used
  # @param type the return type of the transformed
  # @param transformer lambda that transforms a String to (possibly) another type
  # @param use_for_snippets true if this should be used for snippet generation
  # @param prefer_for_regexp_match true if this should be preferred over similar types
  # @return [ParameterType] a new instance of ParameterType
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#31
  def initialize(name, regexp, type, transformer, use_for_snippets, prefer_for_regexp_match); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#47
  def <=>(other); end

  # Returns the value of attribute name.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#11
  def name; end

  # Returns the value of attribute prefer_for_regexp_match.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#11
  def prefer_for_regexp_match; end

  # Returns the value of attribute regexps.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#11
  def regexps; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#43
  def transform(self_obj, group_values); end

  # Returns the value of attribute transformer.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#11
  def transformer; end

  # Returns the value of attribute type.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#11
  def type; end

  # Returns the value of attribute use_for_snippets.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#11
  def use_for_snippets; end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#61
  def regexp_source(regexp); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#56
  def string_array(regexps); end

  class << self
    # @raise [CucumberExpressionError]
    #
    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#13
    def check_parameter_type_name(type_name); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#17
    def is_valid_parameter_type_name(type_name); end
  end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#8
Cucumber::CucumberExpressions::ParameterType::ILLEGAL_PARAMETER_NAME_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type.rb#9
Cucumber::CucumberExpressions::ParameterType::UNESCAPE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#5
class Cucumber::CucumberExpressions::ParameterTypeMatcher
  # @return [ParameterTypeMatcher] a new instance of ParameterTypeMatcher
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#8
  def initialize(parameter_type, regexp, text, match_position = T.unsafe(nil)); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#38
  def <=>(other); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#13
  def advance_to(new_match_position); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#22
  def find; end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#26
  def full_word?; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#34
  def group; end

  # Returns the value of attribute parameter_type.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#6
  def parameter_type; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#30
  def start; end

  private

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#55
  def space_after_match_or_sentence_end?; end

  # @return [Boolean]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_matcher.rb#50
  def space_before_match_or_sentence_start?; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#10
class Cucumber::CucumberExpressions::ParameterTypeRegistry
  # @return [ParameterTypeRegistry] a new instance of ParameterTypeRegistry
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#17
  def initialize; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#56
  def define_parameter_type(parameter_type); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#38
  def lookup_by_regexp(parameter_type_regexp, expression_regexp, text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#34
  def lookup_by_type_name(name); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#52
  def parameter_types; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#15
Cucumber::CucumberExpressions::ParameterTypeRegistry::ANONYMOUS_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#12
Cucumber::CucumberExpressions::ParameterTypeRegistry::FLOAT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#11
Cucumber::CucumberExpressions::ParameterTypeRegistry::INTEGER_REGEXPS = T.let(T.unsafe(nil), Array)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#14
Cucumber::CucumberExpressions::ParameterTypeRegistry::STRING_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/parameter_type_registry.rb#13
Cucumber::CucumberExpressions::ParameterTypeRegistry::WORD_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#9
class Cucumber::CucumberExpressions::RegularExpression
  # @return [RegularExpression] a new instance of RegularExpression
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#10
  def initialize(expression_regexp, parameter_type_registry); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#16
  def match(text); end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#36
  def regexp; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#40
  def source; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/regular_expression.rb#44
  def to_s; end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#120
class Cucumber::CucumberExpressions::TheEndOfLineCannotBeEscaped < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [TheEndOfLineCannotBeEscaped] a new instance of TheEndOfLineCannotBeEscaped
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#121
  def initialize(expression); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#51
class Cucumber::CucumberExpressions::Token
  # @return [Token] a new instance of Token
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#54
  def initialize(type, text, start, ending); end

  # Returns the value of attribute end.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#52
  def end; end

  # Returns the value of attribute start.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#52
  def start; end

  # Returns the value of attribute text.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#52
  def text; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#144
  def to_hash; end

  # Returns the value of attribute type.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#52
  def type; end

  class << self
    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#62
    def can_escape(codepoint); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#58
    def is_escape_character(codepoint); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#127
    def purpose_of(token); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#110
    def symbol_of(token); end

    # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#87
    def type_of(codepoint); end
  end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#154
module Cucumber::CucumberExpressions::TokenType; end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#162
Cucumber::CucumberExpressions::TokenType::ALTERNATION = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#158
Cucumber::CucumberExpressions::TokenType::BEGIN_OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#160
Cucumber::CucumberExpressions::TokenType::BEGIN_PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#156
Cucumber::CucumberExpressions::TokenType::END_OF_LINE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#159
Cucumber::CucumberExpressions::TokenType::END_OPTIONAL = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#161
Cucumber::CucumberExpressions::TokenType::END_PARAMETER = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#155
Cucumber::CucumberExpressions::TokenType::START_OF_LINE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#163
Cucumber::CucumberExpressions::TokenType::TEXT = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/ast.rb#157
Cucumber::CucumberExpressions::TokenType::WHITE_SPACE = T.let(T.unsafe(nil), String)

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#8
class Cucumber::CucumberExpressions::TreeRegexp
  # @return [TreeRegexp] a new instance of TreeRegexp
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#11
  def initialize(regexp); end

  # Returns the value of attribute group_builder.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#9
  def group_builder; end

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#16
  def match(s); end

  # Returns the value of attribute regexp.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#9
  def regexp; end

  private

  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#51
  def create_group_builder(regexp); end

  # @raise [CucumberExpressionError]
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/tree_regexp.rb#24
  def is_non_capturing(source, i); end
end

# source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#187
class Cucumber::CucumberExpressions::UndefinedParameterTypeError < ::Cucumber::CucumberExpressions::CucumberExpressionError
  # @return [UndefinedParameterTypeError] a new instance of UndefinedParameterTypeError
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#190
  def initialize(node, expression, undefined_parameter_type_name); end

  # Returns the value of attribute undefined_parameter_type_name.
  #
  # source://cucumber-cucumber-expressions//lib/cucumber/cucumber_expressions/errors.rb#188
  def undefined_parameter_type_name; end
end
