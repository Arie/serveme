# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cucumber-messages/all/cucumber-messages.rbi
#
# cucumber-messages-22.0.0

module Cucumber
end
module Cucumber::Messages
end
class Cucumber::Messages::Message
  extend Cucumber::Messages::Message::Deserialization::ClassMethods
  extend Cucumber::Messages::Message::Utils::ClassMethods
  extend Cucumber::Messages::Message::Utils::ClassMethods
  include Cucumber::Messages::Message::Deserialization
  include Cucumber::Messages::Message::Serialization
  include Cucumber::Messages::Message::Utils
  include Cucumber::Messages::Message::Utils
end
module Cucumber::Messages::Message::Utils
  def self.included(other); end
end
module Cucumber::Messages::Message::Utils::ClassMethods
  def camelize(term); end
  def underscore(term); end
end
module Cucumber::Messages::Message::Deserialization
  def self.included(other); end
end
module Cucumber::Messages::Message::Deserialization::ClassMethods
  def from_json(json_string); end
end
module Cucumber::Messages::Message::Serialization
  def prepare_value(value, camelize:, reject_nil_values:); end
  def to_h(camelize: nil, reject_nil_values: nil); end
  def to_json; end
end
class Cucumber::Messages::Attachment < Cucumber::Messages::Message
  def body; end
  def content_encoding; end
  def file_name; end
  def initialize(body: nil, content_encoding: nil, file_name: nil, media_type: nil, source: nil, test_case_started_id: nil, test_step_id: nil, url: nil); end
  def media_type; end
  def self.from_h(hash); end
  def source; end
  def test_case_started_id; end
  def test_step_id; end
  def url; end
end
class Cucumber::Messages::Duration < Cucumber::Messages::Message
  def initialize(seconds: nil, nanos: nil); end
  def nanos; end
  def seconds; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Envelope < Cucumber::Messages::Message
  def attachment; end
  def gherkin_document; end
  def hook; end
  def initialize(attachment: nil, gherkin_document: nil, hook: nil, meta: nil, parameter_type: nil, parse_error: nil, pickle: nil, source: nil, step_definition: nil, test_case: nil, test_case_finished: nil, test_case_started: nil, test_run_finished: nil, test_run_started: nil, test_step_finished: nil, test_step_started: nil, undefined_parameter_type: nil); end
  def meta; end
  def parameter_type; end
  def parse_error; end
  def pickle; end
  def self.from_h(hash); end
  def source; end
  def step_definition; end
  def test_case; end
  def test_case_finished; end
  def test_case_started; end
  def test_run_finished; end
  def test_run_started; end
  def test_step_finished; end
  def test_step_started; end
  def undefined_parameter_type; end
end
class Cucumber::Messages::Exception < Cucumber::Messages::Message
  def initialize(type: nil, message: nil); end
  def message; end
  def self.from_h(hash); end
  def type; end
end
class Cucumber::Messages::GherkinDocument < Cucumber::Messages::Message
  def comments; end
  def feature; end
  def initialize(uri: nil, feature: nil, comments: nil); end
  def self.from_h(hash); end
  def uri; end
end
class Cucumber::Messages::Background < Cucumber::Messages::Message
  def description; end
  def id; end
  def initialize(location: nil, keyword: nil, name: nil, description: nil, steps: nil, id: nil); end
  def keyword; end
  def location; end
  def name; end
  def self.from_h(hash); end
  def steps; end
end
class Cucumber::Messages::Comment < Cucumber::Messages::Message
  def initialize(location: nil, text: nil); end
  def location; end
  def self.from_h(hash); end
  def text; end
end
class Cucumber::Messages::DataTable < Cucumber::Messages::Message
  def initialize(location: nil, rows: nil); end
  def location; end
  def rows; end
  def self.from_h(hash); end
end
class Cucumber::Messages::DocString < Cucumber::Messages::Message
  def content; end
  def delimiter; end
  def initialize(location: nil, media_type: nil, content: nil, delimiter: nil); end
  def location; end
  def media_type; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Examples < Cucumber::Messages::Message
  def description; end
  def id; end
  def initialize(location: nil, tags: nil, keyword: nil, name: nil, description: nil, table_header: nil, table_body: nil, id: nil); end
  def keyword; end
  def location; end
  def name; end
  def self.from_h(hash); end
  def table_body; end
  def table_header; end
  def tags; end
end
class Cucumber::Messages::Feature < Cucumber::Messages::Message
  def children; end
  def description; end
  def initialize(location: nil, tags: nil, language: nil, keyword: nil, name: nil, description: nil, children: nil); end
  def keyword; end
  def language; end
  def location; end
  def name; end
  def self.from_h(hash); end
  def tags; end
end
class Cucumber::Messages::FeatureChild < Cucumber::Messages::Message
  def background; end
  def initialize(rule: nil, background: nil, scenario: nil); end
  def rule; end
  def scenario; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Rule < Cucumber::Messages::Message
  def children; end
  def description; end
  def id; end
  def initialize(location: nil, tags: nil, keyword: nil, name: nil, description: nil, children: nil, id: nil); end
  def keyword; end
  def location; end
  def name; end
  def self.from_h(hash); end
  def tags; end
end
class Cucumber::Messages::RuleChild < Cucumber::Messages::Message
  def background; end
  def initialize(background: nil, scenario: nil); end
  def scenario; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Scenario < Cucumber::Messages::Message
  def description; end
  def examples; end
  def id; end
  def initialize(location: nil, tags: nil, keyword: nil, name: nil, description: nil, steps: nil, examples: nil, id: nil); end
  def keyword; end
  def location; end
  def name; end
  def self.from_h(hash); end
  def steps; end
  def tags; end
end
class Cucumber::Messages::Step < Cucumber::Messages::Message
  def data_table; end
  def doc_string; end
  def id; end
  def initialize(location: nil, keyword: nil, keyword_type: nil, text: nil, doc_string: nil, data_table: nil, id: nil); end
  def keyword; end
  def keyword_type; end
  def location; end
  def self.from_h(hash); end
  def text; end
end
class Cucumber::Messages::TableCell < Cucumber::Messages::Message
  def initialize(location: nil, value: nil); end
  def location; end
  def self.from_h(hash); end
  def value; end
end
class Cucumber::Messages::TableRow < Cucumber::Messages::Message
  def cells; end
  def id; end
  def initialize(location: nil, cells: nil, id: nil); end
  def location; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Tag < Cucumber::Messages::Message
  def id; end
  def initialize(location: nil, name: nil, id: nil); end
  def location; end
  def name; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Hook < Cucumber::Messages::Message
  def id; end
  def initialize(id: nil, name: nil, source_reference: nil, tag_expression: nil); end
  def name; end
  def self.from_h(hash); end
  def source_reference; end
  def tag_expression; end
end
class Cucumber::Messages::Location < Cucumber::Messages::Message
  def column; end
  def initialize(line: nil, column: nil); end
  def line; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Meta < Cucumber::Messages::Message
  def ci; end
  def cpu; end
  def implementation; end
  def initialize(protocol_version: nil, implementation: nil, runtime: nil, os: nil, cpu: nil, ci: nil); end
  def os; end
  def protocol_version; end
  def runtime; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Ci < Cucumber::Messages::Message
  def build_number; end
  def git; end
  def initialize(name: nil, url: nil, build_number: nil, git: nil); end
  def name; end
  def self.from_h(hash); end
  def url; end
end
class Cucumber::Messages::Git < Cucumber::Messages::Message
  def branch; end
  def initialize(remote: nil, revision: nil, branch: nil, tag: nil); end
  def remote; end
  def revision; end
  def self.from_h(hash); end
  def tag; end
end
class Cucumber::Messages::Product < Cucumber::Messages::Message
  def initialize(name: nil, version: nil); end
  def name; end
  def self.from_h(hash); end
  def version; end
end
class Cucumber::Messages::ParameterType < Cucumber::Messages::Message
  def id; end
  def initialize(name: nil, regular_expressions: nil, prefer_for_regular_expression_match: nil, use_for_snippets: nil, id: nil, source_reference: nil); end
  def name; end
  def prefer_for_regular_expression_match; end
  def regular_expressions; end
  def self.from_h(hash); end
  def source_reference; end
  def use_for_snippets; end
end
class Cucumber::Messages::ParseError < Cucumber::Messages::Message
  def initialize(source: nil, message: nil); end
  def message; end
  def self.from_h(hash); end
  def source; end
end
class Cucumber::Messages::Pickle < Cucumber::Messages::Message
  def ast_node_ids; end
  def id; end
  def initialize(id: nil, uri: nil, name: nil, language: nil, steps: nil, tags: nil, ast_node_ids: nil); end
  def language; end
  def name; end
  def self.from_h(hash); end
  def steps; end
  def tags; end
  def uri; end
end
class Cucumber::Messages::PickleDocString < Cucumber::Messages::Message
  def content; end
  def initialize(media_type: nil, content: nil); end
  def media_type; end
  def self.from_h(hash); end
end
class Cucumber::Messages::PickleStep < Cucumber::Messages::Message
  def argument; end
  def ast_node_ids; end
  def id; end
  def initialize(argument: nil, ast_node_ids: nil, id: nil, type: nil, text: nil); end
  def self.from_h(hash); end
  def text; end
  def type; end
end
class Cucumber::Messages::PickleStepArgument < Cucumber::Messages::Message
  def data_table; end
  def doc_string; end
  def initialize(doc_string: nil, data_table: nil); end
  def self.from_h(hash); end
end
class Cucumber::Messages::PickleTable < Cucumber::Messages::Message
  def initialize(rows: nil); end
  def rows; end
  def self.from_h(hash); end
end
class Cucumber::Messages::PickleTableCell < Cucumber::Messages::Message
  def initialize(value: nil); end
  def self.from_h(hash); end
  def value; end
end
class Cucumber::Messages::PickleTableRow < Cucumber::Messages::Message
  def cells; end
  def initialize(cells: nil); end
  def self.from_h(hash); end
end
class Cucumber::Messages::PickleTag < Cucumber::Messages::Message
  def ast_node_id; end
  def initialize(name: nil, ast_node_id: nil); end
  def name; end
  def self.from_h(hash); end
end
class Cucumber::Messages::Source < Cucumber::Messages::Message
  def data; end
  def initialize(uri: nil, data: nil, media_type: nil); end
  def media_type; end
  def self.from_h(hash); end
  def uri; end
end
class Cucumber::Messages::SourceReference < Cucumber::Messages::Message
  def initialize(uri: nil, java_method: nil, java_stack_trace_element: nil, location: nil); end
  def java_method; end
  def java_stack_trace_element; end
  def location; end
  def self.from_h(hash); end
  def uri; end
end
class Cucumber::Messages::JavaMethod < Cucumber::Messages::Message
  def class_name; end
  def initialize(class_name: nil, method_name: nil, method_parameter_types: nil); end
  def method_name; end
  def method_parameter_types; end
  def self.from_h(hash); end
end
class Cucumber::Messages::JavaStackTraceElement < Cucumber::Messages::Message
  def class_name; end
  def file_name; end
  def initialize(class_name: nil, file_name: nil, method_name: nil); end
  def method_name; end
  def self.from_h(hash); end
end
class Cucumber::Messages::StepDefinition < Cucumber::Messages::Message
  def id; end
  def initialize(id: nil, pattern: nil, source_reference: nil); end
  def pattern; end
  def self.from_h(hash); end
  def source_reference; end
end
class Cucumber::Messages::StepDefinitionPattern < Cucumber::Messages::Message
  def initialize(source: nil, type: nil); end
  def self.from_h(hash); end
  def source; end
  def type; end
end
class Cucumber::Messages::TestCase < Cucumber::Messages::Message
  def id; end
  def initialize(id: nil, pickle_id: nil, test_steps: nil); end
  def pickle_id; end
  def self.from_h(hash); end
  def test_steps; end
end
class Cucumber::Messages::Group < Cucumber::Messages::Message
  def children; end
  def initialize(children: nil, start: nil, value: nil); end
  def self.from_h(hash); end
  def start; end
  def value; end
end
class Cucumber::Messages::StepMatchArgument < Cucumber::Messages::Message
  def group; end
  def initialize(group: nil, parameter_type_name: nil); end
  def parameter_type_name; end
  def self.from_h(hash); end
end
class Cucumber::Messages::StepMatchArgumentsList < Cucumber::Messages::Message
  def initialize(step_match_arguments: nil); end
  def self.from_h(hash); end
  def step_match_arguments; end
end
class Cucumber::Messages::TestStep < Cucumber::Messages::Message
  def hook_id; end
  def id; end
  def initialize(hook_id: nil, id: nil, pickle_step_id: nil, step_definition_ids: nil, step_match_arguments_lists: nil); end
  def pickle_step_id; end
  def self.from_h(hash); end
  def step_definition_ids; end
  def step_match_arguments_lists; end
end
class Cucumber::Messages::TestCaseFinished < Cucumber::Messages::Message
  def initialize(test_case_started_id: nil, timestamp: nil, will_be_retried: nil); end
  def self.from_h(hash); end
  def test_case_started_id; end
  def timestamp; end
  def will_be_retried; end
end
class Cucumber::Messages::TestCaseStarted < Cucumber::Messages::Message
  def attempt; end
  def id; end
  def initialize(attempt: nil, id: nil, test_case_id: nil, worker_id: nil, timestamp: nil); end
  def self.from_h(hash); end
  def test_case_id; end
  def timestamp; end
  def worker_id; end
end
class Cucumber::Messages::TestRunFinished < Cucumber::Messages::Message
  def exception; end
  def initialize(message: nil, success: nil, timestamp: nil, exception: nil); end
  def message; end
  def self.from_h(hash); end
  def success; end
  def timestamp; end
end
class Cucumber::Messages::TestRunStarted < Cucumber::Messages::Message
  def initialize(timestamp: nil); end
  def self.from_h(hash); end
  def timestamp; end
end
class Cucumber::Messages::TestStepFinished < Cucumber::Messages::Message
  def initialize(test_case_started_id: nil, test_step_id: nil, test_step_result: nil, timestamp: nil); end
  def self.from_h(hash); end
  def test_case_started_id; end
  def test_step_id; end
  def test_step_result; end
  def timestamp; end
end
class Cucumber::Messages::TestStepResult < Cucumber::Messages::Message
  def duration; end
  def exception; end
  def initialize(duration: nil, message: nil, status: nil, exception: nil); end
  def message; end
  def self.from_h(hash); end
  def status; end
end
class Cucumber::Messages::TestStepStarted < Cucumber::Messages::Message
  def initialize(test_case_started_id: nil, test_step_id: nil, timestamp: nil); end
  def self.from_h(hash); end
  def test_case_started_id; end
  def test_step_id; end
  def timestamp; end
end
class Cucumber::Messages::Timestamp < Cucumber::Messages::Message
  def initialize(seconds: nil, nanos: nil); end
  def nanos; end
  def seconds; end
  def self.from_h(hash); end
end
class Cucumber::Messages::UndefinedParameterType < Cucumber::Messages::Message
  def expression; end
  def initialize(expression: nil, name: nil); end
  def name; end
  def self.from_h(hash); end
end
class Cucumber::Messages::AttachmentContentEncoding
end
class Cucumber::Messages::PickleStepType
end
class Cucumber::Messages::SourceMediaType
end
class Cucumber::Messages::StepDefinitionPatternType
end
class Cucumber::Messages::StepKeywordType
end
class Cucumber::Messages::TestStepResultStatus
end
class Cucumber::Messages::NdjsonToMessageEnumerator < Enumerator
  def initialize(io); end
end
module Cucumber::Messages::TimeConversion
  def duration_to_seconds(duration); end
  def seconds_to_duration(seconds_float); end
  def time_to_timestamp(time); end
  def timestamp_to_time(timestamp); end
end
module Cucumber::Messages::IdGenerator
end
class Cucumber::Messages::IdGenerator::Incrementing
  def initialize; end
  def new_id; end
end
class Cucumber::Messages::IdGenerator::UUID
  def new_id; end
end
