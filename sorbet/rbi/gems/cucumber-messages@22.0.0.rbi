# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cucumber-messages` gem.
# Please instead update this file by running `bin/tapioca gem cucumber-messages`.


# The code was auto-generated by {this script}[https://github.com/cucumber/messages/blob/main/jsonschema/scripts/codegen.rb]
#
# source://cucumber-messages//lib/cucumber/messages/message/utils.rb#1
module Cucumber
  class << self
    # source://cucumber/9.2.0/lib/cucumber/deprecate.rb#7
    def deprecate(message, method, remove_after_version); end

    # source://cucumber/9.2.0/lib/cucumber/platform.rb#17
    def file_mode(mode, encoding = T.unsafe(nil)); end

    # source://cucumber/9.2.0/lib/cucumber.rb#15
    def logger; end

    # source://cucumber/9.2.0/lib/cucumber.rb#23
    def logger=(logger); end

    # source://cucumber/9.2.0/lib/cucumber/platform.rb#14
    def use_full_backtrace; end

    # source://cucumber/9.2.0/lib/cucumber/platform.rb#14
    def use_full_backtrace=(_arg0); end

    # source://cucumber/9.2.0/lib/cucumber.rb#13
    def use_legacy_autoloader; end

    # source://cucumber/9.2.0/lib/cucumber.rb#13
    def use_legacy_autoloader=(_arg0); end

    # source://cucumber/9.2.0/lib/cucumber.rb#13
    def wants_to_quit; end

    # source://cucumber/9.2.0/lib/cucumber.rb#13
    def wants_to_quit=(_arg0); end
  end
end

# source://cucumber-messages//lib/cucumber/messages/message/utils.rb#2
module Cucumber::Messages; end

# Represents the Attachment message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# //// Attachments (parse errors, execution errors, screenshots, links...)
#
# *
#  An attachment represents any kind of data associated with a line in a
#  [Source](#io.cucumber.messages.Source) file. It can be used for:
#
#  * Syntax errors during parse time
#  * Screenshots captured and attached during execution
#  * Logs captured and attached during execution
#
#  It is not to be used for runtime errors raised/thrown during execution. This
#  is captured in `TestResult`.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#27
class Cucumber::Messages::Attachment < ::Cucumber::Messages::Message
  # @return [Attachment] a new instance of Attachment
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#87
  def initialize(body: T.unsafe(nil), content_encoding: T.unsafe(nil), file_name: T.unsafe(nil), media_type: T.unsafe(nil), source: T.unsafe(nil), test_case_started_id: T.unsafe(nil), test_step_id: T.unsafe(nil), url: T.unsafe(nil)); end

  # *
  #  The body of the attachment. If `contentEncoding` is `IDENTITY`, the attachment
  #  is simply the string. If it's `BASE64`, the string should be Base64 decoded to
  #  obtain the attachment.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#35
  def body; end

  # *
  #  Whether to interpret `body` "as-is" (IDENTITY) or if it needs to be Base64-decoded (BASE64).
  #
  #  Content encoding is *not* determined by the media type, but rather by the type
  #  of the object being attached:
  #
  #  - string: IDENTITY
  #  - byte array: BASE64
  #  - stream: BASE64
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#48
  def content_encoding; end

  # *
  #  Suggested file name of the attachment. (Provided by the user as an argument to `attach`)
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#54
  def file_name; end

  # *
  #  The media type of the data. This can be any valid
  #  [IANA Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml)
  #  as well as Cucumber-specific media types such as `text/x.cucumber.gherkin+plain`
  #  and `text/x.cucumber.stacktrace+plain`
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#63
  def media_type; end

  # Returns the value of attribute source.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#65
  def source; end

  # Returns the value of attribute test_case_started_id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#67
  def test_case_started_id; end

  # Returns the value of attribute test_step_id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#69
  def test_step_id; end

  # *
  #  A URL where the attachment can be retrieved. This field should not be set by Cucumber.
  #  It should be set by a program that reads a message stream and does the following for
  #  each Attachment message:
  #
  #  - Writes the body (after base64 decoding if necessary) to a new file.
  #  - Sets `body` and `contentEncoding` to `null`
  #  - Writes out the new attachment message
  #
  #  This will result in a smaller message stream, which can improve performance and
  #  reduce bandwidth of message consumers. It also makes it easier to process and download attachments
  #  separately from reports.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#85
  def url; end

  class << self
    # Returns a new Attachment from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Attachment.from_h(some_hash) # => #<Cucumber::Messages::Attachment:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#20
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1961
class Cucumber::Messages::AttachmentContentEncoding; end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1963
Cucumber::Messages::AttachmentContentEncoding::BASE64 = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1962
Cucumber::Messages::AttachmentContentEncoding::IDENTITY = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#300
class Cucumber::Messages::Background < ::Cucumber::Messages::Message
  # @return [Background] a new instance of Background
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#317
  def initialize(location: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), steps: T.unsafe(nil), id: T.unsafe(nil)); end

  # Returns the value of attribute description.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#311
  def description; end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#315
  def id; end

  # Returns the value of attribute keyword.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#307
  def keyword; end

  # The location of the `Background` keyword
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#305
  def location; end

  # Returns the value of attribute name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#309
  def name; end

  # Returns the value of attribute steps.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#313
  def steps; end

  class << self
    # Returns a new Background from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Background.from_h(some_hash) # => #<Cucumber::Messages::Background:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#142
    def from_h(hash); end
  end
end

# Represents the Ci message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# CI environment
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#940
class Cucumber::Messages::Ci < ::Cucumber::Messages::Message
  # @return [Ci] a new instance of Ci
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#959
  def initialize(name: T.unsafe(nil), url: T.unsafe(nil), build_number: T.unsafe(nil), git: T.unsafe(nil)); end

  # The build number. Some CI servers use non-numeric build numbers, which is why this is a string
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#955
  def build_number; end

  # Returns the value of attribute git.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#957
  def git; end

  # Name of the CI product, e.g. "Jenkins", "CircleCI" etc.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#945
  def name; end

  # Link to the build
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#950
  def url; end

  class << self
    # Returns a new Ci from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Ci.from_h(some_hash) # => #<Cucumber::Messages::Ci:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#524
    def from_h(hash); end
  end
end

# Represents the Comment message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  A comment in a Gherkin document
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#342
class Cucumber::Messages::Comment < ::Cucumber::Messages::Message
  # @return [Comment] a new instance of Comment
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#354
  def initialize(location: T.unsafe(nil), text: T.unsafe(nil)); end

  # The location of the comment
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#347
  def location; end

  # The text of the comment
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#352
  def text; end

  class << self
    # Returns a new Comment from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Comment.from_h(some_hash) # => #<Cucumber::Messages::Comment:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#166
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#370
class Cucumber::Messages::DataTable < ::Cucumber::Messages::Message
  # @return [DataTable] a new instance of DataTable
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#376
  def initialize(location: T.unsafe(nil), rows: T.unsafe(nil)); end

  # Returns the value of attribute location.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#372
  def location; end

  # Returns the value of attribute rows.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#374
  def rows; end

  class << self
    # Returns a new DataTable from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::DataTable.from_h(some_hash) # => #<Cucumber::Messages::DataTable:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#186
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#392
class Cucumber::Messages::DocString < ::Cucumber::Messages::Message
  # @return [DocString] a new instance of DocString
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#402
  def initialize(location: T.unsafe(nil), media_type: T.unsafe(nil), content: T.unsafe(nil), delimiter: T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#398
  def content; end

  # Returns the value of attribute delimiter.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#400
  def delimiter; end

  # Returns the value of attribute location.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#394
  def location; end

  # Returns the value of attribute media_type.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#396
  def media_type; end

  class << self
    # Returns a new DocString from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::DocString.from_h(some_hash) # => #<Cucumber::Messages::DocString:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#206
    def from_h(hash); end
  end
end

# Represents the Duration message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# The structure is pretty close of the Timestamp one. For clarity, a second type
#  of message is used.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#116
class Cucumber::Messages::Duration < ::Cucumber::Messages::Message
  # @return [Duration] a new instance of Duration
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#128
  def initialize(seconds: T.unsafe(nil), nanos: T.unsafe(nil)); end

  # Non-negative fractions of a second at nanosecond resolution. Negative
  #  second values with fractions must still have non-negative nanos values
  #  that count forward in time. Must be from 0 to 999,999,999
  #  inclusive.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#126
  def nanos; end

  # Returns the value of attribute seconds.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#118
  def seconds; end

  class << self
    # Returns a new Duration from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Duration.from_h(some_hash) # => #<Cucumber::Messages::Duration:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#46
    def from_h(hash); end
  end
end

# Represents the Envelope message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# When removing a field, replace it with reserved, rather than deleting the line.
#  When adding a field, add it to the end and increment the number by one.
#  See https://developers.google.com/protocol-buffers/docs/proto#updating for details
#
# *
#  All the messages that are passed between different components/processes are Envelope
#  messages.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#150
class Cucumber::Messages::Envelope < ::Cucumber::Messages::Message
  # @return [Envelope] a new instance of Envelope
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#186
  def initialize(attachment: T.unsafe(nil), gherkin_document: T.unsafe(nil), hook: T.unsafe(nil), meta: T.unsafe(nil), parameter_type: T.unsafe(nil), parse_error: T.unsafe(nil), pickle: T.unsafe(nil), source: T.unsafe(nil), step_definition: T.unsafe(nil), test_case: T.unsafe(nil), test_case_finished: T.unsafe(nil), test_case_started: T.unsafe(nil), test_run_finished: T.unsafe(nil), test_run_started: T.unsafe(nil), test_step_finished: T.unsafe(nil), test_step_started: T.unsafe(nil), undefined_parameter_type: T.unsafe(nil)); end

  # Returns the value of attribute attachment.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#152
  def attachment; end

  # Returns the value of attribute gherkin_document.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#154
  def gherkin_document; end

  # Returns the value of attribute hook.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#156
  def hook; end

  # Returns the value of attribute meta.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#158
  def meta; end

  # Returns the value of attribute parameter_type.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#160
  def parameter_type; end

  # Returns the value of attribute parse_error.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#162
  def parse_error; end

  # Returns the value of attribute pickle.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#164
  def pickle; end

  # Returns the value of attribute source.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#166
  def source; end

  # Returns the value of attribute step_definition.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#168
  def step_definition; end

  # Returns the value of attribute test_case.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#170
  def test_case; end

  # Returns the value of attribute test_case_finished.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#172
  def test_case_finished; end

  # Returns the value of attribute test_case_started.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#174
  def test_case_started; end

  # Returns the value of attribute test_run_finished.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#176
  def test_run_finished; end

  # Returns the value of attribute test_run_started.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#178
  def test_run_started; end

  # Returns the value of attribute test_step_finished.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#180
  def test_step_finished; end

  # Returns the value of attribute test_step_started.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#182
  def test_step_started; end

  # Returns the value of attribute undefined_parameter_type.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#184
  def undefined_parameter_type; end

  class << self
    # Returns a new Envelope from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Envelope.from_h(some_hash) # => #<Cucumber::Messages::Envelope:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#66
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#422
class Cucumber::Messages::Examples < ::Cucumber::Messages::Message
  # @return [Examples] a new instance of Examples
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#443
  def initialize(location: T.unsafe(nil), tags: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), table_header: T.unsafe(nil), table_body: T.unsafe(nil), id: T.unsafe(nil)); end

  # Returns the value of attribute description.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#435
  def description; end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#441
  def id; end

  # Returns the value of attribute keyword.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#431
  def keyword; end

  # The location of the `Examples` keyword
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#427
  def location; end

  # Returns the value of attribute name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#433
  def name; end

  # Returns the value of attribute table_body.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#439
  def table_body; end

  # Returns the value of attribute table_header.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#437
  def table_header; end

  # Returns the value of attribute tags.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#429
  def tags; end

  class << self
    # Returns a new Examples from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Examples.from_h(some_hash) # => #<Cucumber::Messages::Examples:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#228
    def from_h(hash); end
  end
end

# Represents the Exception message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# A simplified representation of an exception
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#232
class Cucumber::Messages::Exception < ::Cucumber::Messages::Message
  # @return [Exception] a new instance of Exception
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#244
  def initialize(type: T.unsafe(nil), message: T.unsafe(nil)); end

  # The message of exception that caused this result. E.g. expected: "a" but was: "b"
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#242
  def message; end

  # The type of the exception that caused this result. E.g. "Error" or "org.opentest4j.AssertionFailedError"
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#237
  def type; end

  class << self
    # Returns a new Exception from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Exception.from_h(some_hash) # => #<Cucumber::Messages::Exception:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#101
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#471
class Cucumber::Messages::Feature < ::Cucumber::Messages::Message
  # @return [Feature] a new instance of Feature
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#508
  def initialize(location: T.unsafe(nil), tags: T.unsafe(nil), language: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), children: T.unsafe(nil)); end

  # Zero or more children
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#506
  def children; end

  # The line(s) underneath the line with the `keyword` that are used as description
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#501
  def description; end

  # The text of the `Feature` keyword (in the language specified by `language`)
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#491
  def keyword; end

  # The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code of the Gherkin document
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#486
  def language; end

  # The location of the `Feature` keyword
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#476
  def location; end

  # The name of the feature (the text following the `keyword`)
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#496
  def name; end

  # All the tags placed above the `Feature` keyword
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#481
  def tags; end

  class << self
    # Returns a new Feature from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Feature.from_h(some_hash) # => #<Cucumber::Messages::Feature:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#254
    def from_h(hash); end
  end
end

# Represents the FeatureChild message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  A child node of a `Feature` node
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#535
class Cucumber::Messages::FeatureChild < ::Cucumber::Messages::Message
  # @return [FeatureChild] a new instance of FeatureChild
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#543
  def initialize(rule: T.unsafe(nil), background: T.unsafe(nil), scenario: T.unsafe(nil)); end

  # Returns the value of attribute background.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#539
  def background; end

  # Returns the value of attribute rule.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#537
  def rule; end

  # Returns the value of attribute scenario.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#541
  def scenario; end

  class << self
    # Returns a new FeatureChild from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::FeatureChild.from_h(some_hash) # => #<Cucumber::Messages::FeatureChild:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#279
    def from_h(hash); end
  end
end

# Represents the GherkinDocument message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  The [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) of a Gherkin document.
#  Cucumber implementations should *not* depend on `GherkinDocument` or any of its
#  children for execution - use [Pickle](#io.cucumber.messages.Pickle) instead.
#
#  The only consumers of `GherkinDocument` should only be formatters that produce
#  "rich" output, resembling the original Gherkin document.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#266
class Cucumber::Messages::GherkinDocument < ::Cucumber::Messages::Message
  # @return [GherkinDocument] a new instance of GherkinDocument
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#282
  def initialize(uri: T.unsafe(nil), feature: T.unsafe(nil), comments: T.unsafe(nil)); end

  # All the comments in the Gherkin document
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#280
  def comments; end

  # Returns the value of attribute feature.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#275
  def feature; end

  # *
  #  The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)
  #  of the source, typically a file path relative to the root directory
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#273
  def uri; end

  class << self
    # Returns a new GherkinDocument from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::GherkinDocument.from_h(some_hash) # => #<Cucumber::Messages::GherkinDocument:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#121
    def from_h(hash); end
  end
end

# Represents the Git message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# Information about Git, provided by the Build/CI server as environment
#  variables.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#980
class Cucumber::Messages::Git < ::Cucumber::Messages::Message
  # @return [Git] a new instance of Git
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#990
  def initialize(remote: T.unsafe(nil), revision: T.unsafe(nil), branch: T.unsafe(nil), tag: T.unsafe(nil)); end

  # Returns the value of attribute branch.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#986
  def branch; end

  # Returns the value of attribute remote.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#982
  def remote; end

  # Returns the value of attribute revision.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#984
  def revision; end

  # Returns the value of attribute tag.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#988
  def tag; end

  class << self
    # Returns a new Git from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Git.from_h(some_hash) # => #<Cucumber::Messages::Git:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#546
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1558
class Cucumber::Messages::Group < ::Cucumber::Messages::Message
  # @return [Group] a new instance of Group
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1566
  def initialize(children: T.unsafe(nil), start: T.unsafe(nil), value: T.unsafe(nil)); end

  # Returns the value of attribute children.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1560
  def children; end

  # Returns the value of attribute start.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1562
  def start; end

  # Returns the value of attribute value.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1564
  def value; end

  class << self
    # Returns a new Group from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Group.from_h(some_hash) # => #<Cucumber::Messages::Group:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#944
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#831
class Cucumber::Messages::Hook < ::Cucumber::Messages::Message
  # @return [Hook] a new instance of Hook
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#841
  def initialize(id: T.unsafe(nil), name: T.unsafe(nil), source_reference: T.unsafe(nil), tag_expression: T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#833
  def id; end

  # Returns the value of attribute name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#835
  def name; end

  # Returns the value of attribute source_reference.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#837
  def source_reference; end

  # Returns the value of attribute tag_expression.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#839
  def tag_expression; end

  class << self
    # Returns a new Hook from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Hook.from_h(some_hash) # => #<Cucumber::Messages::Hook:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#458
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages/id_generator.rb#5
module Cucumber::Messages::IdGenerator; end

# source://cucumber-messages//lib/cucumber/messages/id_generator.rb#6
class Cucumber::Messages::IdGenerator::Incrementing
  # @return [Incrementing] a new instance of Incrementing
  #
  # source://cucumber-messages//lib/cucumber/messages/id_generator.rb#7
  def initialize; end

  # source://cucumber-messages//lib/cucumber/messages/id_generator.rb#11
  def new_id; end
end

# source://cucumber-messages//lib/cucumber/messages/id_generator.rb#17
class Cucumber::Messages::IdGenerator::UUID
  # source://cucumber-messages//lib/cucumber/messages/id_generator.rb#18
  def new_id; end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1426
class Cucumber::Messages::JavaMethod < ::Cucumber::Messages::Message
  # @return [JavaMethod] a new instance of JavaMethod
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1434
  def initialize(class_name: T.unsafe(nil), method_name: T.unsafe(nil), method_parameter_types: T.unsafe(nil)); end

  # Returns the value of attribute class_name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1428
  def class_name; end

  # Returns the value of attribute method_name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1430
  def method_name; end

  # Returns the value of attribute method_parameter_types.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1432
  def method_parameter_types; end

  class << self
    # Returns a new JavaMethod from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::JavaMethod.from_h(some_hash) # => #<Cucumber::Messages::JavaMethod:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#840
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1452
class Cucumber::Messages::JavaStackTraceElement < ::Cucumber::Messages::Message
  # @return [JavaStackTraceElement] a new instance of JavaStackTraceElement
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1460
  def initialize(class_name: T.unsafe(nil), file_name: T.unsafe(nil), method_name: T.unsafe(nil)); end

  # Returns the value of attribute class_name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1454
  def class_name; end

  # Returns the value of attribute file_name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1456
  def file_name; end

  # Returns the value of attribute method_name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1458
  def method_name; end

  class << self
    # Returns a new JavaStackTraceElement from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::JavaStackTraceElement.from_h(some_hash) # => #<Cucumber::Messages::JavaStackTraceElement:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#861
    def from_h(hash); end
  end
end

# Represents the Location message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  Points to a line and a column in a text file
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#862
class Cucumber::Messages::Location < ::Cucumber::Messages::Message
  # @return [Location] a new instance of Location
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#868
  def initialize(line: T.unsafe(nil), column: T.unsafe(nil)); end

  # Returns the value of attribute column.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#866
  def column; end

  # Returns the value of attribute line.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#864
  def line; end

  class << self
    # Returns a new Location from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Location.from_h(some_hash) # => #<Cucumber::Messages::Location:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#480
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages/message/utils.rb#3
class Cucumber::Messages::Message
  include ::Cucumber::Messages::Message::Utils
  include ::Cucumber::Messages::Message::Deserialization
  include ::Cucumber::Messages::Message::Serialization
  extend ::Cucumber::Messages::Message::Utils::ClassMethods
  extend ::Cucumber::Messages::Message::Deserialization::ClassMethods
end

# source://cucumber-messages//lib/cucumber/messages/message/deserialization.rb#9
module Cucumber::Messages::Message::Deserialization
  mixes_in_class_methods ::Cucumber::Messages::Message::Deserialization::ClassMethods

  class << self
    # @private
    #
    # source://cucumber-messages//lib/cucumber/messages/message/deserialization.rb#10
    def included(other); end
  end
end

# source://cucumber-messages//lib/cucumber/messages/message/deserialization.rb#14
module Cucumber::Messages::Message::Deserialization::ClassMethods
  # Returns a new Message - or messages into an array - deserialized from the given json document.
  # CamelCased keys are properly converted to snake_cased attributes in the process
  #
  #   Cucumber::Messages::Duration.from_json('{"seconds":1,"nanos":42}')               # => #<Cucumber::Messages::Duration:0x00007efda134c290 @seconds=1, @nanos=42>
  #   Cucumber::Messages::PickleTag.from_json('{"name":"foo","astNodeId":"abc-def"}')  # => #<Cucumber::Messages::PickleTag:0x00007efda138cdb8 @name="foo", @ast_node_id="abc-def">
  #
  # It is recursive so embedded messages are also processed.
  #
  #   json_string = { location: { line: 2 }, text: "comment" }.to_json
  #   Cucumber::Messages::Comment.from_json(json_string)  # => #<Cucumber::Messages::Comment:0x00007efda6abf888 @location=#<Cucumber::Messages::Location:0x00007efda6abf978 @line=2, @column=nil>, @text="comment">
  #
  #   json_string = { uri: 'file:///...', comments: [{text: 'text comment'}, {text: 'another comment'}]}.to_json
  #   Cucumber::Messages::GherkinDocument.from_json(json_string)  # => #<Cucumber::Messages::GherkinDocument:0x00007efda11e6a90 ... @comments=[#<Cucumber::Messages::Comment:0x00007efda11e6e50 ..., #<Cucumber::Messages::Comment:0x00007efda11e6b58 ...>]>
  #
  # source://cucumber-messages//lib/cucumber/messages/message/deserialization.rb#32
  def from_json(json_string); end
end

# source://cucumber-messages//lib/cucumber/messages/message/serialization.rb#9
module Cucumber::Messages::Message::Serialization
  # Returns a new Hash formed from the message attributes
  # If +camelize:+ keyword parameter is set to true, then keys will be camelized
  # If +reject_nil_values:+ keyword parameter is set to true, resulting hash won't include nil values
  #
  #   Cucumber::Messages::Duration.new(seconds: 1, nanos: 42).to_h                                 # => { seconds: 1, nanos: 42 }
  #   Cucumber::Messages::PickleTag.new(name: 'foo', ast_node_id: 'abc-def').to_h(camelize: true)  # => { name: 'foo', astNodeId: 'abc-def' }
  #   Cucumber::Messages::PickleTag.new(name: 'foo', ast_node_id: nil).to_h(reject_nil_values: true)  # => { name: 'foo' }
  #
  # It is recursive so embedded messages are also processed
  #
  #   location = Cucumber::Messages::Location.new(line: 2)
  #   Cucumber::Messages::Comment.new(location: location, text: 'comment').to_h  # => { location: { line: 2, :column: nil }, text: "comment" }
  #
  # source://cucumber-messages//lib/cucumber/messages/message/serialization.rb#26
  def to_h(camelize: T.unsafe(nil), reject_nil_values: T.unsafe(nil)); end

  # Generates a JSON document from the message.
  # Keys are camelized during the process. Null values are not part of the json document.
  #
  #   Cucumber::Messages::Duration.new(seconds: 1, nanos: 42).to_json                 # => '{"seconds":1,"nanos":42}'
  #   Cucumber::Messages::PickleTag.new(name: 'foo', ast_node_id: 'abc-def').to_json  # => '{"name":"foo","astNodeId":"abc-def"}'
  #   Cucumber::Messages::PickleTag.new(name: 'foo', ast_node_id: nil).to_json        # => '{"name":"foo"}'
  #
  # As #to_h, the method is recursive
  #
  #   location = Cucumber::Messages::Location.new(line: 2)
  #   Cucumber::Messages::Comment.new(location: location, text: 'comment').to_json     # => '{"location":{"line":2,"column":null},"text":"comment"}'
  #
  # source://cucumber-messages//lib/cucumber/messages/message/serialization.rb#58
  def to_json; end

  private

  # source://cucumber-messages//lib/cucumber/messages/message/serialization.rb#64
  def prepare_value(value, camelize:, reject_nil_values:); end
end

# source://cucumber-messages//lib/cucumber/messages/message/utils.rb#4
module Cucumber::Messages::Message::Utils
  mixes_in_class_methods ::Cucumber::Messages::Message::Utils::ClassMethods

  class << self
    # @private
    #
    # source://cucumber-messages//lib/cucumber/messages/message/utils.rb#5
    def included(other); end
  end
end

# source://cucumber-messages//lib/cucumber/messages/message/utils.rb#9
module Cucumber::Messages::Message::Utils::ClassMethods
  # Converts strings to UpperCamelCase.
  #
  #   camelize('gherkin_document')                # => "GherkinDocument"
  #
  # This is a simplified version of the Ruby on Rails implementation
  # https://github.com/rails/rails/blob/v6.1.3.2/activesupport/lib/active_support/inflector/methods.rb#L69
  #
  # source://cucumber-messages//lib/cucumber/messages/message/utils.rb#37
  def camelize(term); end

  # Makes an underscored, lowercase form from the expression in the string.
  #
  #   underscore('GherkinDocument')         # => "gherkin_document"
  #
  # This is a simplified version of the Ruby on Rails implementation
  # https://github.com/rails/rails/blob/v6.1.3.2/activesupport/lib/active_support/inflector/methods.rb#L92
  #
  # source://cucumber-messages//lib/cucumber/messages/message/utils.rb#19
  def underscore(term); end
end

# Represents the Meta message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  This message contains meta information about the environment. Consumers can use
#  this for various purposes.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#886
class Cucumber::Messages::Meta < ::Cucumber::Messages::Message
  # @return [Meta] a new instance of Meta
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#916
  def initialize(protocol_version: T.unsafe(nil), implementation: T.unsafe(nil), runtime: T.unsafe(nil), os: T.unsafe(nil), cpu: T.unsafe(nil), ci: T.unsafe(nil)); end

  # Returns the value of attribute ci.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#914
  def ci; end

  # 386, arm, amd64 etc
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#912
  def cpu; end

  # SpecFlow, Cucumber-JVM, Cucumber.js, Cucumber-Ruby, Behat etc.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#897
  def implementation; end

  # Windows, Linux, MacOS etc
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#907
  def os; end

  # *
  #  The [SEMVER](https://semver.org/) version number of the protocol
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#892
  def protocol_version; end

  # Java, Ruby, Node.js etc
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#902
  def runtime; end

  class << self
    # Returns a new Meta from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Meta.from_h(some_hash) # => #<Cucumber::Messages::Meta:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#500
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages/ndjson_to_message_enumerator.rb#5
class Cucumber::Messages::NdjsonToMessageEnumerator < ::Enumerator
  # @return [NdjsonToMessageEnumerator] a new instance of NdjsonToMessageEnumerator
  #
  # source://cucumber-messages//lib/cucumber/messages/ndjson_to_message_enumerator.rb#6
  def initialize(io); end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1038
class Cucumber::Messages::ParameterType < ::Cucumber::Messages::Message
  # @return [ParameterType] a new instance of ParameterType
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1055
  def initialize(name: T.unsafe(nil), regular_expressions: T.unsafe(nil), prefer_for_regular_expression_match: T.unsafe(nil), use_for_snippets: T.unsafe(nil), id: T.unsafe(nil), source_reference: T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1051
  def id; end

  # The name is unique, so we don't need an id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1043
  def name; end

  # Returns the value of attribute prefer_for_regular_expression_match.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1047
  def prefer_for_regular_expression_match; end

  # Returns the value of attribute regular_expressions.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1045
  def regular_expressions; end

  # Returns the value of attribute source_reference.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1053
  def source_reference; end

  # Returns the value of attribute use_for_snippets.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1049
  def use_for_snippets; end

  class << self
    # Returns a new ParameterType from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::ParameterType.from_h(some_hash) # => #<Cucumber::Messages::ParameterType:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#588
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1079
class Cucumber::Messages::ParseError < ::Cucumber::Messages::Message
  # @return [ParseError] a new instance of ParseError
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1085
  def initialize(source: T.unsafe(nil), message: T.unsafe(nil)); end

  # Returns the value of attribute message.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1083
  def message; end

  # Returns the value of attribute source.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1081
  def source; end

  class << self
    # Returns a new ParseError from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::ParseError.from_h(some_hash) # => #<Cucumber::Messages::ParseError:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#612
    def from_h(hash); end
  end
end

# Represents the Pickle message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# //// Pickles
#
# *
#  A `Pickle` represents a template for a `TestCase`. It is typically derived
#  from another format, such as [GherkinDocument](#io.cucumber.messages.GherkinDocument).
#  In the future a `Pickle` may be derived from other formats such as Markdown or
#  Excel files.
#
#  By making `Pickle` the main data structure Cucumber uses for execution, the
#  implementation of Cucumber itself becomes simpler, as it doesn't have to deal
#  with the complex structure of a [GherkinDocument](#io.cucumber.messages.GherkinDocument).
#
#  Each `PickleStep` of a `Pickle` is matched with a `StepDefinition` to create a `TestCase`
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1113
class Cucumber::Messages::Pickle < ::Cucumber::Messages::Message
  # @return [Pickle] a new instance of Pickle
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1156
  def initialize(id: T.unsafe(nil), uri: T.unsafe(nil), name: T.unsafe(nil), language: T.unsafe(nil), steps: T.unsafe(nil), tags: T.unsafe(nil), ast_node_ids: T.unsafe(nil)); end

  # *
  #  Points to the AST node locations of the pickle. The last one represents the unique
  #  id of the pickle. A pickle constructed from `Examples` will have the first
  #  id originating from the `Scenario` AST node, and the second from the `TableRow` AST node.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1154
  def ast_node_ids; end

  # *
  #  A unique id for the pickle
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1119
  def id; end

  # The language of the pickle
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1134
  def language; end

  # The name of the pickle
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1129
  def name; end

  # One or more steps
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1139
  def steps; end

  # *
  #  One or more tags. If this pickle is constructed from a Gherkin document,
  #  It includes inherited tags from the `Feature` as well.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1146
  def tags; end

  # The uri of the source file
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1124
  def uri; end

  class << self
    # Returns a new Pickle from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Pickle.from_h(some_hash) # => #<Cucumber::Messages::Pickle:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#632
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1182
class Cucumber::Messages::PickleDocString < ::Cucumber::Messages::Message
  # @return [PickleDocString] a new instance of PickleDocString
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1188
  def initialize(media_type: T.unsafe(nil), content: T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1186
  def content; end

  # Returns the value of attribute media_type.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1184
  def media_type; end

  class << self
    # Returns a new PickleDocString from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::PickleDocString.from_h(some_hash) # => #<Cucumber::Messages::PickleDocString:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#657
    def from_h(hash); end
  end
end

# Represents the PickleStep message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  An executable step
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1205
class Cucumber::Messages::PickleStep < ::Cucumber::Messages::Message
  # @return [PickleStep] a new instance of PickleStep
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1229
  def initialize(argument: T.unsafe(nil), ast_node_ids: T.unsafe(nil), id: T.unsafe(nil), type: T.unsafe(nil), text: T.unsafe(nil)); end

  # Returns the value of attribute argument.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1207
  def argument; end

  # References the IDs of the source of the step. For Gherkin, this can be
  #  the ID of a Step, and possibly also the ID of a TableRow
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1213
  def ast_node_ids; end

  # A unique ID for the PickleStep
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1218
  def id; end

  # Returns the value of attribute text.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1227
  def text; end

  # The context in which the step was specified: context (Given), action (When) or outcome (Then).
  #
  # Note that the keywords `But` and `And` inherit their meaning from prior steps and the `*` 'keyword' doesn't have specific meaning (hence Unknown)
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1225
  def type; end

  class << self
    # Returns a new PickleStep from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::PickleStep.from_h(some_hash) # => #<Cucumber::Messages::PickleStep:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#677
    def from_h(hash); end
  end
end

# Represents the PickleStepArgument message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# An optional argument
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1251
class Cucumber::Messages::PickleStepArgument < ::Cucumber::Messages::Message
  # @return [PickleStepArgument] a new instance of PickleStepArgument
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1257
  def initialize(doc_string: T.unsafe(nil), data_table: T.unsafe(nil)); end

  # Returns the value of attribute data_table.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1255
  def data_table; end

  # Returns the value of attribute doc_string.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1253
  def doc_string; end

  class << self
    # Returns a new PickleStepArgument from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::PickleStepArgument.from_h(some_hash) # => #<Cucumber::Messages::PickleStepArgument:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#700
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1966
class Cucumber::Messages::PickleStepType; end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1969
Cucumber::Messages::PickleStepType::ACTION = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1968
Cucumber::Messages::PickleStepType::CONTEXT = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1970
Cucumber::Messages::PickleStepType::OUTCOME = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1967
Cucumber::Messages::PickleStepType::UNKNOWN = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1273
class Cucumber::Messages::PickleTable < ::Cucumber::Messages::Message
  # @return [PickleTable] a new instance of PickleTable
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1277
  def initialize(rows: T.unsafe(nil)); end

  # Returns the value of attribute rows.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1275
  def rows; end

  class << self
    # Returns a new PickleTable from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::PickleTable.from_h(some_hash) # => #<Cucumber::Messages::PickleTable:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#720
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1291
class Cucumber::Messages::PickleTableCell < ::Cucumber::Messages::Message
  # @return [PickleTableCell] a new instance of PickleTableCell
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1295
  def initialize(value: T.unsafe(nil)); end

  # Returns the value of attribute value.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1293
  def value; end

  class << self
    # Returns a new PickleTableCell from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::PickleTableCell.from_h(some_hash) # => #<Cucumber::Messages::PickleTableCell:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#739
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1309
class Cucumber::Messages::PickleTableRow < ::Cucumber::Messages::Message
  # @return [PickleTableRow] a new instance of PickleTableRow
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1313
  def initialize(cells: T.unsafe(nil)); end

  # Returns the value of attribute cells.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1311
  def cells; end

  class << self
    # Returns a new PickleTableRow from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::PickleTableRow.from_h(some_hash) # => #<Cucumber::Messages::PickleTableRow:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#758
    def from_h(hash); end
  end
end

# Represents the PickleTag message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  A tag
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1328
class Cucumber::Messages::PickleTag < ::Cucumber::Messages::Message
  # @return [PickleTag] a new instance of PickleTag
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1337
  def initialize(name: T.unsafe(nil), ast_node_id: T.unsafe(nil)); end

  # Points to the AST node this was created from
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1335
  def ast_node_id; end

  # Returns the value of attribute name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1330
  def name; end

  class << self
    # Returns a new PickleTag from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::PickleTag.from_h(some_hash) # => #<Cucumber::Messages::PickleTag:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#777
    def from_h(hash); end
  end
end

# Represents the Product message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# Used to describe various properties of Meta
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1010
class Cucumber::Messages::Product < ::Cucumber::Messages::Message
  # @return [Product] a new instance of Product
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1022
  def initialize(name: T.unsafe(nil), version: T.unsafe(nil)); end

  # The product name
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1015
  def name; end

  # The product version
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1020
  def version; end

  class << self
    # Returns a new Product from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Product.from_h(some_hash) # => #<Cucumber::Messages::Product:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#568
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#561
class Cucumber::Messages::Rule < ::Cucumber::Messages::Message
  # @return [Rule] a new instance of Rule
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#583
  def initialize(location: T.unsafe(nil), tags: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), children: T.unsafe(nil), id: T.unsafe(nil)); end

  # Returns the value of attribute children.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#579
  def children; end

  # Returns the value of attribute description.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#577
  def description; end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#581
  def id; end

  # Returns the value of attribute keyword.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#573
  def keyword; end

  # The location of the `Rule` keyword
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#566
  def location; end

  # Returns the value of attribute name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#575
  def name; end

  # All the tags placed above the `Rule` keyword
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#571
  def tags; end

  class << self
    # Returns a new Rule from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Rule.from_h(some_hash) # => #<Cucumber::Messages::Rule:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#300
    def from_h(hash); end
  end
end

# Represents the RuleChild message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  A child node of a `Rule` node
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#610
class Cucumber::Messages::RuleChild < ::Cucumber::Messages::Message
  # @return [RuleChild] a new instance of RuleChild
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#616
  def initialize(background: T.unsafe(nil), scenario: T.unsafe(nil)); end

  # Returns the value of attribute background.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#612
  def background; end

  # Returns the value of attribute scenario.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#614
  def scenario; end

  class << self
    # Returns a new RuleChild from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::RuleChild.from_h(some_hash) # => #<Cucumber::Messages::RuleChild:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#325
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#632
class Cucumber::Messages::Scenario < ::Cucumber::Messages::Message
  # @return [Scenario] a new instance of Scenario
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#653
  def initialize(location: T.unsafe(nil), tags: T.unsafe(nil), keyword: T.unsafe(nil), name: T.unsafe(nil), description: T.unsafe(nil), steps: T.unsafe(nil), examples: T.unsafe(nil), id: T.unsafe(nil)); end

  # Returns the value of attribute description.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#645
  def description; end

  # Returns the value of attribute examples.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#649
  def examples; end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#651
  def id; end

  # Returns the value of attribute keyword.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#641
  def keyword; end

  # The location of the `Scenario` keyword
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#637
  def location; end

  # Returns the value of attribute name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#643
  def name; end

  # Returns the value of attribute steps.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#647
  def steps; end

  # Returns the value of attribute tags.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#639
  def tags; end

  class << self
    # Returns a new Scenario from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Scenario.from_h(some_hash) # => #<Cucumber::Messages::Scenario:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#345
    def from_h(hash); end
  end
end

# Represents the Source message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# //// Source
#
# *
#  A source file, typically a Gherkin document or Java/Ruby/JavaScript source code
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1356
class Cucumber::Messages::Source < ::Cucumber::Messages::Message
  # @return [Source] a new instance of Source
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1376
  def initialize(uri: T.unsafe(nil), data: T.unsafe(nil), media_type: T.unsafe(nil)); end

  # The contents of the file
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1368
  def data; end

  # The media type of the file. Can be used to specify custom types, such as
  #  text/x.cucumber.gherkin+plain
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1374
  def media_type; end

  # *
  #  The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)
  #  of the source, typically a file path relative to the root directory
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1363
  def uri; end

  class << self
    # Returns a new Source from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Source.from_h(some_hash) # => #<Cucumber::Messages::Source:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#797
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1973
class Cucumber::Messages::SourceMediaType; end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1975
Cucumber::Messages::SourceMediaType::TEXT_X_CUCUMBER_GHERKIN_MARKDOWN = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1974
Cucumber::Messages::SourceMediaType::TEXT_X_CUCUMBER_GHERKIN_PLAIN = T.let(T.unsafe(nil), String)

# Represents the SourceReference message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  Points to a [Source](#io.cucumber.messages.Source) identified by `uri` and a
#  [Location](#io.cucumber.messages.Location) within that file.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1396
class Cucumber::Messages::SourceReference < ::Cucumber::Messages::Message
  # @return [SourceReference] a new instance of SourceReference
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1406
  def initialize(uri: T.unsafe(nil), java_method: T.unsafe(nil), java_stack_trace_element: T.unsafe(nil), location: T.unsafe(nil)); end

  # Returns the value of attribute java_method.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1400
  def java_method; end

  # Returns the value of attribute java_stack_trace_element.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1402
  def java_stack_trace_element; end

  # Returns the value of attribute location.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1404
  def location; end

  # Returns the value of attribute uri.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1398
  def uri; end

  class << self
    # Returns a new SourceReference from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::SourceReference.from_h(some_hash) # => #<Cucumber::Messages::SourceReference:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#818
    def from_h(hash); end
  end
end

# Represents the Step message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# A step
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#681
class Cucumber::Messages::Step < ::Cucumber::Messages::Message
  # @return [Step] a new instance of Step
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#709
  def initialize(location: T.unsafe(nil), keyword: T.unsafe(nil), keyword_type: T.unsafe(nil), text: T.unsafe(nil), doc_string: T.unsafe(nil), data_table: T.unsafe(nil), id: T.unsafe(nil)); end

  # Returns the value of attribute data_table.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#702
  def data_table; end

  # Returns the value of attribute doc_string.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#700
  def doc_string; end

  # Unique ID to be able to reference the Step from PickleStep
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#707
  def id; end

  # The actual keyword as it appeared in the source.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#691
  def keyword; end

  # The test phase signalled by the keyword: Context definition (Given), Action performance (When), Outcome assertion (Then). Other keywords signal Continuation (And and But) from a prior keyword. Please note that all translations which a dialect maps to multiple keywords (`*` is in this category for all dialects), map to 'Unknown'.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#696
  def keyword_type; end

  # The location of the steps' `keyword`
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#686
  def location; end

  # Returns the value of attribute text.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#698
  def text; end

  class << self
    # Returns a new Step from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Step.from_h(some_hash) # => #<Cucumber::Messages::Step:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#371
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1478
class Cucumber::Messages::StepDefinition < ::Cucumber::Messages::Message
  # @return [StepDefinition] a new instance of StepDefinition
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1486
  def initialize(id: T.unsafe(nil), pattern: T.unsafe(nil), source_reference: T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1480
  def id; end

  # Returns the value of attribute pattern.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1482
  def pattern; end

  # Returns the value of attribute source_reference.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1484
  def source_reference; end

  class << self
    # Returns a new StepDefinition from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::StepDefinition.from_h(some_hash) # => #<Cucumber::Messages::StepDefinition:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#882
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1504
class Cucumber::Messages::StepDefinitionPattern < ::Cucumber::Messages::Message
  # @return [StepDefinitionPattern] a new instance of StepDefinitionPattern
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1510
  def initialize(source: T.unsafe(nil), type: T.unsafe(nil)); end

  # Returns the value of attribute source.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1506
  def source; end

  # Returns the value of attribute type.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1508
  def type; end

  class << self
    # Returns a new StepDefinitionPattern from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::StepDefinitionPattern.from_h(some_hash) # => #<Cucumber::Messages::StepDefinitionPattern:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#903
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1978
class Cucumber::Messages::StepDefinitionPatternType; end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1979
Cucumber::Messages::StepDefinitionPatternType::CUCUMBER_EXPRESSION = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1980
Cucumber::Messages::StepDefinitionPatternType::REGULAR_EXPRESSION = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1983
class Cucumber::Messages::StepKeywordType; end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1986
Cucumber::Messages::StepKeywordType::ACTION = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1988
Cucumber::Messages::StepKeywordType::CONJUNCTION = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1985
Cucumber::Messages::StepKeywordType::CONTEXT = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1987
Cucumber::Messages::StepKeywordType::OUTCOME = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1984
Cucumber::Messages::StepKeywordType::UNKNOWN = T.let(T.unsafe(nil), String)

# Represents the StepMatchArgument message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  Represents a single argument extracted from a step match and passed to a step definition.
#  This is used for the following purposes:
#  - Construct an argument to pass to a step definition (possibly through a parameter type transform)
#  - Highlight the matched parameter in rich formatters such as the HTML formatter
#
#  This message closely matches the `Argument` class in the `cucumber-expressions` library.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1590
class Cucumber::Messages::StepMatchArgument < ::Cucumber::Messages::Message
  # @return [StepMatchArgument] a new instance of StepMatchArgument
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1601
  def initialize(group: T.unsafe(nil), parameter_type_name: T.unsafe(nil)); end

  # *
  #  Represents the outermost capture group of an argument. This message closely matches the
  #  `Group` class in the `cucumber-expressions` library.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1597
  def group; end

  # Returns the value of attribute parameter_type_name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1599
  def parameter_type_name; end

  class << self
    # Returns a new StepMatchArgument from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::StepMatchArgument.from_h(some_hash) # => #<Cucumber::Messages::StepMatchArgument:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#965
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1617
class Cucumber::Messages::StepMatchArgumentsList < ::Cucumber::Messages::Message
  # @return [StepMatchArgumentsList] a new instance of StepMatchArgumentsList
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1621
  def initialize(step_match_arguments: T.unsafe(nil)); end

  # Returns the value of attribute step_match_arguments.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1619
  def step_match_arguments; end

  class << self
    # Returns a new StepMatchArgumentsList from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::StepMatchArgumentsList.from_h(some_hash) # => #<Cucumber::Messages::StepMatchArgumentsList:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#985
    def from_h(hash); end
  end
end

# Represents the TableCell message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# A cell in a `TableRow`
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#735
class Cucumber::Messages::TableCell < ::Cucumber::Messages::Message
  # @return [TableCell] a new instance of TableCell
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#747
  def initialize(location: T.unsafe(nil), value: T.unsafe(nil)); end

  # The location of the cell
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#740
  def location; end

  # The value of the cell
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#745
  def value; end

  class << self
    # Returns a new TableCell from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TableCell.from_h(some_hash) # => #<Cucumber::Messages::TableCell:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#396
    def from_h(hash); end
  end
end

# Represents the TableRow message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# A row in a table
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#763
class Cucumber::Messages::TableRow < ::Cucumber::Messages::Message
  # @return [TableRow] a new instance of TableRow
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#777
  def initialize(location: T.unsafe(nil), cells: T.unsafe(nil), id: T.unsafe(nil)); end

  # Cells in the row
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#773
  def cells; end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#775
  def id; end

  # The location of the first cell in the row
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#768
  def location; end

  class << self
    # Returns a new TableRow from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TableRow.from_h(some_hash) # => #<Cucumber::Messages::TableRow:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#416
    def from_h(hash); end
  end
end

# Represents the Tag message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  A tag
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#796
class Cucumber::Messages::Tag < ::Cucumber::Messages::Message
  # @return [Tag] a new instance of Tag
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#813
  def initialize(location: T.unsafe(nil), name: T.unsafe(nil), id: T.unsafe(nil)); end

  # Unique ID to be able to reference the Tag from PickleTag
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#811
  def id; end

  # Location of the tag
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#801
  def location; end

  # The name of the tag (including the leading `@`)
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#806
  def name; end

  class << self
    # Returns a new Tag from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Tag.from_h(some_hash) # => #<Cucumber::Messages::Tag:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#437
    def from_h(hash); end
  end
end

# Represents the TestCase message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# //// TestCases
#
# *
#  A `TestCase` contains a sequence of `TestStep`s.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1529
class Cucumber::Messages::TestCase < ::Cucumber::Messages::Message
  # @return [TestCase] a new instance of TestCase
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1540
  def initialize(id: T.unsafe(nil), pickle_id: T.unsafe(nil), test_steps: T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1531
  def id; end

  # The ID of the `Pickle` this `TestCase` is derived from.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1536
  def pickle_id; end

  # Returns the value of attribute test_steps.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1538
  def test_steps; end

  class << self
    # Returns a new TestCase from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestCase.from_h(some_hash) # => #<Cucumber::Messages::TestCase:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#923
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1685
class Cucumber::Messages::TestCaseFinished < ::Cucumber::Messages::Message
  # @return [TestCaseFinished] a new instance of TestCaseFinished
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1693
  def initialize(test_case_started_id: T.unsafe(nil), timestamp: T.unsafe(nil), will_be_retried: T.unsafe(nil)); end

  # Returns the value of attribute test_case_started_id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1687
  def test_case_started_id; end

  # Returns the value of attribute timestamp.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1689
  def timestamp; end

  # Returns the value of attribute will_be_retried.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1691
  def will_be_retried; end

  class << self
    # Returns a new TestCaseFinished from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestCaseFinished.from_h(some_hash) # => #<Cucumber::Messages::TestCaseFinished:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1027
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1711
class Cucumber::Messages::TestCaseStarted < ::Cucumber::Messages::Message
  # @return [TestCaseStarted] a new instance of TestCaseStarted
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1736
  def initialize(attempt: T.unsafe(nil), id: T.unsafe(nil), test_case_id: T.unsafe(nil), worker_id: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # *
  #  The first attempt should have value 0, and for each retry the value
  #  should increase by 1.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1718
  def attempt; end

  # *
  #  Because a `TestCase` can be run multiple times (in case of a retry),
  #  we use this field to group messages relating to the same attempt.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1725
  def id; end

  # Returns the value of attribute test_case_id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1727
  def test_case_id; end

  # Returns the value of attribute timestamp.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1734
  def timestamp; end

  # An identifier for the worker process running this test case, if test cases are being run in parallel. The identifier will be unique per worker, but no particular format is defined - it could be an index, uuid, machine name etc - and as such should be assumed that it's not human readable.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1732
  def worker_id; end

  class << self
    # Returns a new TestCaseStarted from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestCaseStarted.from_h(some_hash) # => #<Cucumber::Messages::TestCaseStarted:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1048
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1758
class Cucumber::Messages::TestRunFinished < ::Cucumber::Messages::Message
  # @return [TestRunFinished] a new instance of TestRunFinished
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1780
  def initialize(message: T.unsafe(nil), success: T.unsafe(nil), timestamp: T.unsafe(nil), exception: T.unsafe(nil)); end

  # Any exception thrown during the test run, if any. Does not include exceptions thrown while executing steps.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1778
  def exception; end

  # An informative message about the test run. Typically additional information about failure, but not necessarily.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1763
  def message; end

  # A test run is successful if all steps are either passed or skipped, all before/after hooks passed and no other exceptions where thrown.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1768
  def success; end

  # Timestamp when the TestRun is finished
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1773
  def timestamp; end

  class << self
    # Returns a new TestRunFinished from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestRunFinished.from_h(some_hash) # => #<Cucumber::Messages::TestRunFinished:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1071
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1800
class Cucumber::Messages::TestRunStarted < ::Cucumber::Messages::Message
  # @return [TestRunStarted] a new instance of TestRunStarted
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1804
  def initialize(timestamp: T.unsafe(nil)); end

  # Returns the value of attribute timestamp.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1802
  def timestamp; end

  class << self
    # Returns a new TestRunStarted from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestRunStarted.from_h(some_hash) # => #<Cucumber::Messages::TestRunStarted:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1093
    def from_h(hash); end
  end
end

# Represents the TestStep message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
#
# *
#  A `TestStep` is derived from either a `PickleStep`
#  combined with a `StepDefinition`, or from a `Hook`.
#
# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1637
class Cucumber::Messages::TestStep < ::Cucumber::Messages::Message
  # @return [TestStep] a new instance of TestStep
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1663
  def initialize(hook_id: T.unsafe(nil), id: T.unsafe(nil), pickle_step_id: T.unsafe(nil), step_definition_ids: T.unsafe(nil), step_match_arguments_lists: T.unsafe(nil)); end

  # Pointer to the `Hook` (if derived from a Hook)
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1642
  def hook_id; end

  # Returns the value of attribute id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1644
  def id; end

  # Pointer to the `PickleStep` (if derived from a `PickleStep`)
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1649
  def pickle_step_id; end

  # Pointer to all the matching `StepDefinition`s (if derived from a `PickleStep`)
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1654
  def step_definition_ids; end

  # A list of list of StepMatchArgument (if derived from a `PickleStep`).
  #  Each element represents a matching step definition. A size of 0 means `UNDEFINED`,
  #  and a size of 2+ means `AMBIGUOUS`
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1661
  def step_match_arguments_lists; end

  class << self
    # Returns a new TestStep from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestStep.from_h(some_hash) # => #<Cucumber::Messages::TestStep:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1004
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1818
class Cucumber::Messages::TestStepFinished < ::Cucumber::Messages::Message
  # @return [TestStepFinished] a new instance of TestStepFinished
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1828
  def initialize(test_case_started_id: T.unsafe(nil), test_step_id: T.unsafe(nil), test_step_result: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # Returns the value of attribute test_case_started_id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1820
  def test_case_started_id; end

  # Returns the value of attribute test_step_id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1822
  def test_step_id; end

  # Returns the value of attribute test_step_result.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1824
  def test_step_result; end

  # Returns the value of attribute timestamp.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1826
  def timestamp; end

  class << self
    # Returns a new TestStepFinished from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestStepFinished.from_h(some_hash) # => #<Cucumber::Messages::TestStepFinished:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1112
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1848
class Cucumber::Messages::TestStepResult < ::Cucumber::Messages::Message
  # @return [TestStepResult] a new instance of TestStepResult
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1864
  def initialize(duration: T.unsafe(nil), message: T.unsafe(nil), status: T.unsafe(nil), exception: T.unsafe(nil)); end

  # Returns the value of attribute duration.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1850
  def duration; end

  # Exception thrown while executing this step, if any.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1862
  def exception; end

  # An arbitrary bit of information that explains this result. This can be a stack trace of anything else.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1855
  def message; end

  # Returns the value of attribute status.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1857
  def status; end

  class << self
    # Returns a new TestStepResult from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestStepResult.from_h(some_hash) # => #<Cucumber::Messages::TestStepResult:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1134
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1991
class Cucumber::Messages::TestStepResultStatus; end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1997
Cucumber::Messages::TestStepResultStatus::AMBIGUOUS = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1998
Cucumber::Messages::TestStepResultStatus::FAILED = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1993
Cucumber::Messages::TestStepResultStatus::PASSED = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1995
Cucumber::Messages::TestStepResultStatus::PENDING = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1994
Cucumber::Messages::TestStepResultStatus::SKIPPED = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1996
Cucumber::Messages::TestStepResultStatus::UNDEFINED = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1992
Cucumber::Messages::TestStepResultStatus::UNKNOWN = T.let(T.unsafe(nil), String)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1884
class Cucumber::Messages::TestStepStarted < ::Cucumber::Messages::Message
  # @return [TestStepStarted] a new instance of TestStepStarted
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1892
  def initialize(test_case_started_id: T.unsafe(nil), test_step_id: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # Returns the value of attribute test_case_started_id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1886
  def test_case_started_id; end

  # Returns the value of attribute test_step_id.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1888
  def test_step_id; end

  # Returns the value of attribute timestamp.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1890
  def timestamp; end

  class << self
    # Returns a new TestStepStarted from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::TestStepStarted.from_h(some_hash) # => #<Cucumber::Messages::TestStepStarted:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1156
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages/time_conversion.rb#3
module Cucumber::Messages::TimeConversion
  # source://cucumber-messages//lib/cucumber/messages/time_conversion.rb#26
  def duration_to_seconds(duration); end

  # source://cucumber-messages//lib/cucumber/messages/time_conversion.rb#17
  def seconds_to_duration(seconds_float); end

  # source://cucumber-messages//lib/cucumber/messages/time_conversion.rb#6
  def time_to_timestamp(time); end

  # source://cucumber-messages//lib/cucumber/messages/time_conversion.rb#13
  def timestamp_to_time(timestamp); end
end

# source://cucumber-messages//lib/cucumber/messages/time_conversion.rb#4
Cucumber::Messages::TimeConversion::NANOSECONDS_PER_SECOND = T.let(T.unsafe(nil), Integer)

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1910
class Cucumber::Messages::Timestamp < ::Cucumber::Messages::Message
  # @return [Timestamp] a new instance of Timestamp
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1927
  def initialize(seconds: T.unsafe(nil), nanos: T.unsafe(nil)); end

  # Non-negative fractions of a second at nanosecond resolution. Negative
  #  second values with fractions must still have non-negative nanos values
  #  that count forward in time. Must be from 0 to 999,999,999
  #  inclusive.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1925
  def nanos; end

  # Represents seconds of UTC time since Unix epoch
  #  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  #  9999-12-31T23:59:59Z inclusive.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1917
  def seconds; end

  class << self
    # Returns a new Timestamp from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::Timestamp.from_h(some_hash) # => #<Cucumber::Messages::Timestamp:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1177
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.dtos.rb#1943
class Cucumber::Messages::UndefinedParameterType < ::Cucumber::Messages::Message
  # @return [UndefinedParameterType] a new instance of UndefinedParameterType
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1949
  def initialize(expression: T.unsafe(nil), name: T.unsafe(nil)); end

  # Returns the value of attribute expression.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1945
  def expression; end

  # Returns the value of attribute name.
  #
  # source://cucumber-messages//lib/cucumber/messages.dtos.rb#1947
  def name; end

  class << self
    # Returns a new UndefinedParameterType from the given hash.
    # If the hash keys are camelCased, they are properly assigned to the
    # corresponding snake_cased attributes.
    #
    #   Cucumber::Messages::UndefinedParameterType.from_h(some_hash) # => #<Cucumber::Messages::UndefinedParameterType:0x... ...>
    #
    # source://cucumber-messages//lib/cucumber/messages.deserializers.rb#1197
    def from_h(hash); end
  end
end

# source://cucumber-messages//lib/cucumber/messages.rb#8
Cucumber::Messages::VERSION = T.let(T.unsafe(nil), String)
