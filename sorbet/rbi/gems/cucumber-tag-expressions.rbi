# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cucumber-tag-expressions/all/cucumber-tag-expressions.rbi
#
# cucumber-tag-expressions-6.1.0

module Cucumber
end
module Cucumber::TagExpressions
end
class Cucumber::TagExpressions::Literal
  def evaluate(variables); end
  def initialize(value); end
  def to_s; end
end
class Cucumber::TagExpressions::Not
  def evaluate(variables); end
  def initialize(expression); end
  def to_s; end
end
class Cucumber::TagExpressions::Or
  def evaluate(variables); end
  def initialize(left, right); end
  def to_s; end
end
class Cucumber::TagExpressions::And
  def evaluate(variables); end
  def initialize(left, right); end
  def to_s; end
end
class Cucumber::TagExpressions::True
  def evaluate(_variables); end
  def to_s; end
end
class Cucumber::TagExpressions::Parser
  def assoc_of(token, value); end
  def check(infix_expression, expected_token_type, token_type); end
  def handle_binary_operator(infix_expression, token, expected_token_type); end
  def handle_close_paren(infix_expression, _token, expected_token_type); end
  def handle_literal(infix_expression, token, expected_token_type); end
  def handle_open_paren(infix_expression, token, expected_token_type); end
  def handle_unary_operator(infix_expression, token, expected_token_type); end
  def initialize; end
  def lower_precedence?(operation); end
  def operator?(token); end
  def parse(infix_expression); end
  def pop(array, amount = nil); end
  def precedence(token); end
  def push_expression(token); end
  def tokenize(infix_expression); end
  def whitespace?(char); end
end
