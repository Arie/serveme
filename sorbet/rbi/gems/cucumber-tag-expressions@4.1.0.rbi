# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cucumber-tag-expressions` gem.
# Please instead update this file by running `bin/tapioca gem cucumber-tag-expressions`.

# source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#1
module Cucumber
  class << self
    # source://cucumber/8.0.0/lib/cucumber/deprecate.rb#52
    def deprecate(*args); end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#21
    def file_mode(mode, encoding = T.unsafe(nil)); end

    # source://cucumber/8.0.0/lib/cucumber.rb#15
    def logger; end

    # source://cucumber/8.0.0/lib/cucumber.rb#23
    def logger=(logger); end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#18
    def use_full_backtrace; end

    # source://cucumber/8.0.0/lib/cucumber/platform.rb#18
    def use_full_backtrace=(_arg0); end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def use_legacy_autoloader; end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def use_legacy_autoloader=(_arg0); end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def wants_to_quit; end

    # source://cucumber/8.0.0/lib/cucumber.rb#13
    def wants_to_quit=(_arg0); end
  end
end

# source://cucumber/8.0.0/lib/cucumber/platform.rb#11
Cucumber::BINARY = T.let(T.unsafe(nil), String)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#9
Cucumber::IRONRUBY = T.let(T.unsafe(nil), FalseClass)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#8
Cucumber::JRUBY = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#12
Cucumber::LIBDIR = T.let(T.unsafe(nil), String)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#11
Cucumber::OS_X = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#13
Cucumber::RAILS = T.let(T.unsafe(nil), String)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#15
Cucumber::RUBY = T.let(T.unsafe(nil), String)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#14
Cucumber::RUBY_1_9 = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#13
Cucumber::RUBY_2_0 = T.let(T.unsafe(nil), T.untyped)

# source://cucumber/8.0.0/lib/cucumber/platform.rb#14
Cucumber::RUBY_BINARY = T.let(T.unsafe(nil), String)

# source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#2
module Cucumber::TagExpressions; end

# And expression node
#
# source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#50
class Cucumber::TagExpressions::And
  # @return [And] a new instance of And
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#51
  def initialize(left, right); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#56
  def evaluate(variables); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#60
  def to_s; end
end

# Literal expression node
#
# source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#4
class Cucumber::TagExpressions::Literal
  # @return [Literal] a new instance of Literal
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#5
  def initialize(value); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#9
  def evaluate(variables); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#13
  def to_s; end
end

# Not expression node
#
# source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#19
class Cucumber::TagExpressions::Not
  # @return [Not] a new instance of Not
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#20
  def initialize(expression); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#24
  def evaluate(variables); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#28
  def to_s; end
end

# Or expression node
#
# source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#34
class Cucumber::TagExpressions::Or
  # @return [Or] a new instance of Or
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#35
  def initialize(left, right); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#40
  def evaluate(variables); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/expressions.rb#44
  def to_s; end
end

# Ruby tag expression parser
#
# source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#6
class Cucumber::TagExpressions::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#7
  def initialize; end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#20
  def parse(infix_expression); end

  private

  # Helpers
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#35
  def assoc_of(token, value); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#153
  def check(expected_token_type, token_type); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#121
  def handle_binary_operator(token, expected_token_type); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#137
  def handle_close_paren(_token, expected_token_type); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#147
  def handle_literal(token, expected_token_type); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#131
  def handle_open_paren(token, expected_token_type); end

  # Handlers
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#115
  def handle_unary_operator(token, expected_token_type); end

  # @return [Boolean]
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#39
  def lower_precedence?(operation); end

  # @return [Boolean]
  #
  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#46
  def operator?(token); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#159
  def pop(array, n = T.unsafe(nil)); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#51
  def precedence(token); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#88
  def process_tokens!(infix_expression); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#99
  def push_expression(token); end

  # source://cucumber-tag-expressions//lib/cucumber/tag_expressions/parser.rb#55
  def tokens(infix_expression); end
end

# source://cucumber/8.0.0/lib/cucumber/platform.rb#10
Cucumber::VERSION = T.let(T.unsafe(nil), String)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#10
Cucumber::WINDOWS = T.let(T.unsafe(nil), T.untyped)

# source://cucumber-core/11.0.0/lib/cucumber/core/platform.rb#12
Cucumber::WINDOWS_MRI = T.let(T.unsafe(nil), T.untyped)
