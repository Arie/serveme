# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fast-mcp` gem.
# Please instead update this file by running `bin/tapioca gem fast-mcp`.


# source://fast-mcp//lib/mcp/railtie.rb#15
module ActionResource; end

# source://fast-mcp//lib/mcp/railtie.rb#16
ActionResource::Base = FastMcp::Resource

# source://fast-mcp//lib/mcp/railtie.rb#9
module ActionTool; end

# source://fast-mcp//lib/mcp/railtie.rb#10
ActionTool::Base = FastMcp::Tool

# Extend Dry::Schema DSL to store metadata
#
# source://fast-mcp//lib/mcp/tool.rb#6
module Dry
  class << self
    # source://dry-configurable/1.3.0/lib/dry/configurable.rb#11
    def Configurable(**options); end

    # source://dry-core/1.1.0/lib/dry/core.rb#52
    def Equalizer(*keys, **options); end

    # source://dry-types/1.8.2/lib/dry/types.rb#253
    def Types(*namespaces, default: T.unsafe(nil), **aliases); end
  end
end

# source://fast-mcp//lib/mcp/tool.rb#7
module Dry::Schema
  class << self
    # source://dry-schema/1.14.1/lib/dry/schema.rb#86
    def Form(**options, &_arg1); end

    # source://dry-schema/1.14.1/lib/dry/schema.rb#106
    def JSON(**options, &_arg1); end

    # source://dry-schema/1.14.1/lib/dry/schema.rb#86
    def Params(**options, &_arg1); end

    # source://dry-schema/1.14.1/lib/dry/schema.rb#48
    def config; end

    # source://dry-schema/1.14.1/lib/dry/schema.rb#67
    def define(*_arg0, **_arg1, &_arg2); end

    # source://dry-schema/1.14.1/lib/dry/schema.rb#18
    def loader; end
  end
end

# source://fast-mcp//lib/mcp/tool.rb#51
class Dry::Schema::DSL
  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#124
  def [](name); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#267
  def after(key, &_arg1); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#238
  def array; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#252
  def before(key, &_arg1); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#195
  def call; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#108
  def compiler; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#102
  def configure(&_arg0); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#328
  def custom_type?(name); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#365
  def filter_rules?; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#349
  def filter_schema; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#358
  def filter_schema_dsl; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#173
  def key(name, macro:, &_arg2); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#214
  def merge(other); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#381
  def merge_types(op_class, lhs, rhs); end

  # source://fast-mcp//lib/mcp/tool.rb#52
  def meta(key_name, meta_key, value); end

  # source://fast-mcp//lib/mcp/tool.rb#58
  def meta_data; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#304
  def new(klass: T.unsafe(nil), **options, &_arg2); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#160
  def optional(name, &_arg1); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#277
  def parent; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#113
  def predicates; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#144
  def required(name, &_arg1); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#339
  def resolve_type(spec); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#316
  def set_type(name, spec); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#295
  def strict_type_schema; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#226
  def to_rule; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#286
  def type_schema; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#376
  def types; end

  protected

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#408
  def key_map(types = T.unsafe(nil)); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#392
  def rule_applier; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#401
  def rules; end

  private

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#501
  def default_config; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#440
  def key_coercer; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#466
  def key_map_type; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#475
  def key_spec(name, type); end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#431
  def key_validator; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#422
  def parent_filter_schemas; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#496
  def parent_key_map; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#491
  def parent_rules; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#456
  def type_registry; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#512
  def types_merger; end

  # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#449
  def value_coercer; end

  class << self
    # source://dry-schema/1.14.1/lib/dry/schema/dsl.rb#81
    def new(**options, &_arg1); end
  end
end

# source://fast-mcp//lib/mcp/tool.rb#0
module Dry::Schema::Macros; end

# Add description method to Hash macro
#
# source://fast-mcp//lib/mcp/tool.rb#37
class Dry::Schema::Macros::Hash < ::Dry::Schema::Macros::Schema
  # source://dry-schema/1.14.1/lib/dry/schema/macros/hash.rb#11
  def call(*args, &block); end

  # source://fast-mcp//lib/mcp/tool.rb#38
  def description(text); end
end

# Add description method to Optional macro
#
# source://fast-mcp//lib/mcp/tool.rb#28
class Dry::Schema::Macros::Optional < ::Dry::Schema::Macros::Key
  # source://fast-mcp//lib/mcp/tool.rb#29
  def description(text); end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/optional.rb#11
  def operation; end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/optional.rb#16
  def to_rule; end
end

# Add description method to Required macro
#
# source://fast-mcp//lib/mcp/tool.rb#19
class Dry::Schema::Macros::Required < ::Dry::Schema::Macros::Key
  # source://fast-mcp//lib/mcp/tool.rb#20
  def description(text); end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/required.rb#11
  def operation; end
end

# Add description method to Value macro
#
# source://fast-mcp//lib/mcp/tool.rb#10
class Dry::Schema::Macros::Value < ::Dry::Schema::Macros::DSL
  # source://dry-schema/1.14.1/lib/dry/schema/macros/value.rb#74
  def array_type?(type); end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/value.rb#89
  def build_array_type(array_type, member); end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/value.rb#15
  def call(*args, **opts, &_arg2); end

  # source://fast-mcp//lib/mcp/tool.rb#11
  def description(text); end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/value.rb#79
  def hash_type?(type); end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/value.rb#103
  def import_steps(schema); end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/value.rb#84
  def maybe_type?(type); end

  private

  # source://dry-schema/1.14.1/lib/dry/schema/macros/value.rb#115
  def method_missing(meth, *_arg1, **_arg2, &_arg3); end

  # source://dry-schema/1.14.1/lib/dry/schema/macros/value.rb#108
  def respond_to_missing?(meth, include_private = T.unsafe(nil)); end
end

# This class is not used yet.
#
# source://fast-mcp//lib/fast_mcp.rb#7
module FastMcp
  class << self
    # Create a Rack middleware for the MCP server with authentication
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @param app [#call] The Rack application
    # @param options [Hash] Options for the middleware
    # @return [#call] The Rack middleware
    # @yield [server] A block to configure the server
    # @yieldparam server [FastMcp::Server] The server to configure
    #
    # source://fast-mcp//lib/fast_mcp.rb#73
    def authenticated_rack_middleware(app, options = T.unsafe(nil)); end

    # source://fast-mcp//lib/fast_mcp.rb#170
    def default_rails_allowed_origins(rail_app); end

    # Mount the MCP middleware in a Rails application
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param app [Rails::Application] The Rails application
    # @param options [Hash] Options for the middleware
    # @return [#call] The Rack middleware
    # @yield [server] A block to configure the server
    # @yieldparam server [FastMcp::Server] The server to configure
    #
    # source://fast-mcp//lib/fast_mcp.rb#134
    def mount_in_rails(app, options = T.unsafe(nil)); end

    # Notify the server that a resource has been updated
    #
    # @param uri [String] The URI of the resource
    #
    # source://fast-mcp//lib/fast_mcp.rb#186
    def notify_resource_updated(uri); end

    # Create a Rack middleware for the MCP server
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param app [#call] The Rack application
    # @param options [Hash] Options for the middleware
    # @return [#call] The Rack middleware
    # @yield [server] A block to configure the server
    # @yieldparam server [FastMcp::Server] The server to configure
    #
    # source://fast-mcp//lib/fast_mcp.rb#46
    def rack_middleware(app, options = T.unsafe(nil)); end

    # Register a resource with the MCP server
    #
    # @param resource [FastMcp::Resource] The resource to register
    # @return [FastMcp::Resource] The registered resource
    #
    # source://fast-mcp//lib/fast_mcp.rb#106
    def register_resource(resource); end

    # Register multiple resources at once
    #
    # @param resources [Array<FastMcp::Resource>] The resources to register
    # @return [Array<FastMcp::Resource>] The registered resources
    #
    # source://fast-mcp//lib/fast_mcp.rb#114
    def register_resources(*resources); end

    # Register a tool with the MCP server
    #
    # @param tool [FastMcp::Tool] The tool to register
    # @return [FastMcp::Tool] The registered tool
    #
    # source://fast-mcp//lib/fast_mcp.rb#90
    def register_tool(tool); end

    # Register multiple tools at once
    #
    # @param tools [Array<FastMcp::Tool>] The tools to register
    # @return [Array<FastMcp::Tool>] The registered tools
    #
    # source://fast-mcp//lib/fast_mcp.rb#98
    def register_tools(*tools); end

    # Returns the value of attribute server.
    #
    # source://fast-mcp//lib/fast_mcp.rb#9
    def server; end

    # Sets the attribute server
    #
    # @param value the value to set the attribute server to.
    #
    # source://fast-mcp//lib/fast_mcp.rb#9
    def server=(_arg0); end
  end
end

# Module for handling basic type predicates
#
# source://fast-mcp//lib/mcp/tool.rb#379
module FastMcp::BasicTypePredicateHandler
  # Add basic type to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#381
  def add_basic_type(predicate_name, property); end

  # Add numeric constraint to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#412
  def add_numeric_constraint(predicate_name, args, property); end

  # Add string constraint to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#400
  def add_string_constraint(predicate_name, args, property); end
end

# Module for handling format predicates
#
# source://fast-mcp//lib/mcp/tool.rb#427
module FastMcp::FormatPredicateHandler
  # Add date/time format to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#429
  def add_date_time_format(predicate_name, property); end

  # Add format constraint to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#463
  def add_format_constraint(args, property); end

  # Add number constraint to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#452
  def add_number_constraint(predicate_name, property); end

  # Add UUID pattern to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#442
  def add_uuid_pattern(predicate_name, property); end
end

# source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#6
module FastMcp::Generators; end

# source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#7
class FastMcp::Generators::InstallGenerator < ::Rails::Generators::Base
  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#25
  def copy_application_resource; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#21
  def copy_application_tool; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#12
  def copy_initializer; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#33
  def copy_sample_resource; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#29
  def copy_sample_tool; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#16
  def create_directories; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#37
  def display_post_install_message; end
end

# source://fast-mcp//lib/mcp/logger.rb#5
class FastMcp::Logger < ::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://fast-mcp//lib/mcp/logger.rb#6
  def initialize(transport: T.unsafe(nil)); end

  # source://fast-mcp//lib/mcp/logger.rb#21
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # Returns the value of attribute client_initialized.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def client_initialized; end

  # Sets the attribute client_initialized
  #
  # @param value the value to set the attribute client_initialized to.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def client_initialized=(_arg0); end

  # Returns the value of attribute client_initialized.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def client_initialized?; end

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/logger.rb#28
  def rack_transport?; end

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/logger.rb#17
  def stdio_transport?; end

  # Returns the value of attribute transport.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def transport; end

  # Sets the attribute transport
  #
  # @param value the value to set the attribute transport to.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def transport=(_arg0); end
end

# Module for handling nested rules
#
# source://fast-mcp//lib/mcp/tool.rb#482
module FastMcp::NestedRuleHandler
  # Add to nested rules
  #
  # source://fast-mcp//lib/mcp/tool.rb#607
  def add_to_nested_rules(nested_key, nested_key_op, nested_rules, is_optional); end

  # Create implication
  #
  # source://fast-mcp//lib/mcp/tool.rb#617
  def create_implication(rule); end

  # Extract from implication and
  #
  # source://fast-mcp//lib/mcp/tool.rb#549
  def extract_from_implication_and(and_rule, nested_rules); end

  # Extract from implication key
  #
  # source://fast-mcp//lib/mcp/tool.rb#540
  def extract_from_implication_key(key_rule, nested_rules); end

  # Extract nested rules from a rule
  #
  # source://fast-mcp//lib/mcp/tool.rb#484
  def extract_nested_rules(rule); end

  # Extract nested rules from an And operation
  #
  # source://fast-mcp//lib/mcp/tool.rb#500
  def extract_nested_rules_from_and(rule, nested_rules); end

  # Extract nested rules from an Implication operation
  #
  # source://fast-mcp//lib/mcp/tool.rb#530
  def extract_nested_rules_from_implication(rule, nested_rules); end

  # Find nested key operation
  #
  # source://fast-mcp//lib/mcp/tool.rb#598
  def find_nested_key_op(rule); end

  # Process a nested rule
  #
  # source://fast-mcp//lib/mcp/tool.rb#584
  def process_nested_rule(rule, nested_rules, is_optional); end

  # Process a set operation
  #
  # source://fast-mcp//lib/mcp/tool.rb#568
  def process_set_operation(set_op, nested_rules); end
end

# Module for handling predicates
#
# source://fast-mcp//lib/mcp/tool.rb#312
module FastMcp::PredicateHandler
  # Add predicate description to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#350
  def add_predicate_description(predicate_name, args, key_name, properties); end

  # Extract arguments from a predicate
  #
  # source://fast-mcp//lib/mcp/tool.rb#339
  def extract_predicate_args(rule); end

  # Extract predicates from a rule
  #
  # source://fast-mcp//lib/mcp/tool.rb#314
  def extract_predicates(rule, key, properties = T.unsafe(nil)); end

  # Process a predicate
  #
  # source://fast-mcp//lib/mcp/tool.rb#332
  def process_predicate(rule, key, properties); end
end

# Railtie for integrating Fast MCP with Rails applications
#
# source://fast-mcp//lib/mcp/railtie.rb#22
class FastMcp::Railtie < ::Rails::Railtie; end

# Resource class for MCP Resources feature
# Represents a resource that can be exposed to clients
#
# source://fast-mcp//lib/mcp/resource.rb#11
class FastMcp::Resource
  include ::Singleton::SingletonInstanceMethods
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # Check if the resource is binary
  #
  # @return [Boolean] true if the resource is binary, false otherwise
  #
  # source://fast-mcp//lib/mcp/resource.rb#124
  def binary?; end

  # Method to be overridden by subclasses to dynamically generate content
  #
  # @raise [NotImplementedError]
  # @return [String, nil] Generated content for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#118
  def content; end

  # Get the resource contents
  #
  # @return [Hash] Resource contents
  #
  # source://fast-mcp//lib/mcp/resource.rb#135
  def contents; end

  # Description of the resource - delegates to class method
  #
  # @return [String, nil] The description for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#106
  def description; end

  # MIME type of the resource - delegates to class method
  #
  # @return [String, nil] The MIME type for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#112
  def mime_type; end

  # Name of the resource - delegates to class method
  #
  # @return [String, nil] The name for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#100
  def name; end

  # URI of the resource - delegates to class method
  #
  # @return [String, nil] The URI for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#94
  def uri; end

  class << self
    # Define description for this resource
    #
    # @param value [String, nil] The description for this resource
    # @return [String] The description for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#34
    def description(value = T.unsafe(nil)); end

    # Load content from a file (class method)
    #
    # @param file_path [String] Path to the file
    # @return [Resource] New resource instance with content loaded from file
    #
    # source://fast-mcp//lib/mcp/resource.rb#61
    def from_file(file_path, name: T.unsafe(nil), description: T.unsafe(nil)); end

    # Get the resource metadata (without content)
    #
    # @return [Hash] Resource metadata
    #
    # source://fast-mcp//lib/mcp/resource.rb#49
    def metadata; end

    # Define MIME type for this resource
    #
    # @param value [String, nil] The MIME type for this resource
    # @return [String] The MIME type for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#42
    def mime_type(value = T.unsafe(nil)); end

    # Define name for this resource
    #
    # @param value [String, nil] The name for this resource
    # @return [String] The name for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#26
    def resource_name(value = T.unsafe(nil)); end

    # Returns the value of attribute server.
    #
    # source://fast-mcp//lib/mcp/resource.rb#13
    def server; end

    # Sets the attribute server
    #
    # @param value the value to set the attribute server to.
    #
    # source://fast-mcp//lib/mcp/resource.rb#13
    def server=(_arg0); end

    # Define URI for this resource
    #
    # @param value [String, nil] The URI for this resource
    # @return [String] The URI for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#18
    def uri(value = T.unsafe(nil)); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# Module for handling rule type detection
#
# source://fast-mcp//lib/mcp/tool.rb#251
module FastMcp::RuleTypeDetector
  # Check if a rule is for an array type
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#305
  def array_type?(rule); end

  # Check for direct hash predicate
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#262
  def direct_hash_predicate?(rule); end

  # Check if a rule is for a hash type
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#253
  def hash_type?(rule); end

  # Check for nested hash predicate
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#269
  def nested_hash_predicate?(rule); end

  # Check for special case hash
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#283
  def special_case_hash?(rule); end
end

# SchemaCompiler class for converting Dry::Schema to JSON Schema
#
# source://fast-mcp//lib/mcp/tool.rb#627
class FastMcp::SchemaCompiler
  include ::FastMcp::SchemaDescriptionExtractor
  include ::FastMcp::RuleTypeDetector
  include ::FastMcp::PredicateHandler
  include ::FastMcp::BasicTypePredicateHandler
  include ::FastMcp::FormatPredicateHandler
  include ::FastMcp::NestedRuleHandler

  # @return [SchemaCompiler] a new instance of SchemaCompiler
  #
  # source://fast-mcp//lib/mcp/tool.rb#635
  def initialize; end

  # Returns the value of attribute json_schema.
  #
  # source://fast-mcp//lib/mcp/tool.rb#643
  def json_schema; end

  # source://fast-mcp//lib/mcp/tool.rb#645
  def process(schema); end

  # source://fast-mcp//lib/mcp/tool.rb#766
  def process_deeper_nested_property(key, nested_key, deeper_key, deeper_rule); end

  # source://fast-mcp//lib/mcp/tool.rb#746
  def process_deeper_nested_schema(key, nested_key, nested_rule); end

  # source://fast-mcp//lib/mcp/tool.rb#714
  def process_nested_property(key, nested_key, nested_rule); end

  # source://fast-mcp//lib/mcp/tool.rb#694
  def process_nested_schema(key, rule); end

  # source://fast-mcp//lib/mcp/tool.rb#670
  def process_rule(key, rule); end
end

# Module for handling schema descriptions
#
# source://fast-mcp//lib/mcp/tool.rb#118
module FastMcp::SchemaDescriptionExtractor
  # Extract descriptions from AST
  #
  # source://fast-mcp//lib/mcp/tool.rb#158
  def extract_descriptions_from_ast(ast, descriptions, parent_key = T.unsafe(nil)); end

  # Extract descriptions from a schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#120
  def extract_descriptions_from_schema(schema); end

  # Extract meta description from a node
  #
  # source://fast-mcp//lib/mcp/tool.rb#239
  def extract_meta_description(and_node, descriptions, nested_path); end

  # Handle special case for person schema in tests
  #
  # source://fast-mcp//lib/mcp/tool.rb#144
  def handle_special_case_for_person(schema, descriptions); end

  # Process an and node in the AST
  #
  # source://fast-mcp//lib/mcp/tool.rb#187
  def process_and_node(ast, descriptions, parent_key); end

  # Process a key node in the AST
  #
  # source://fast-mcp//lib/mcp/tool.rb#167
  def process_key_node(ast, descriptions, parent_key); end

  # Process nested keys in a schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#227
  def process_nested_keys(set_node, descriptions, nested_key); end

  # Process nested properties in an and node
  #
  # source://fast-mcp//lib/mcp/tool.rb#200
  def process_nested_properties(ast, descriptions, parent_key); end

  # Process a nested schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#212
  def process_nested_schema_ast(ast, descriptions, nested_key); end

  # Process a set node in the AST
  #
  # source://fast-mcp//lib/mcp/tool.rb#178
  def process_set_node(ast, descriptions, parent_key); end
end

# source://fast-mcp//lib/mcp/server.rb#13
class FastMcp::Server
  # @return [Server] a new instance of Server
  #
  # source://fast-mcp//lib/mcp/server.rb#26
  def initialize(name:, version:, logger: T.unsafe(nil), capabilities: T.unsafe(nil)); end

  # Returns the value of attribute capabilities.
  #
  # source://fast-mcp//lib/mcp/server.rb#14
  def capabilities; end

  # Handle a JSON-RPC request and return the response as a JSON string
  #
  # source://fast-mcp//lib/mcp/server.rb#182
  def handle_json_request(request); end

  # Handle incoming JSON-RPC request
  #
  # source://fast-mcp//lib/mcp/server.rb#136
  def handle_request(json_str); end

  # Returns the value of attribute logger.
  #
  # source://fast-mcp//lib/mcp/server.rb#42
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://fast-mcp//lib/mcp/server.rb#42
  def logger=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://fast-mcp//lib/mcp/server.rb#14
  def name; end

  # Notify subscribers about a resource update
  #
  # source://fast-mcp//lib/mcp/server.rb#200
  def notify_resource_updated(uri); end

  # Read a resource directly
  #
  # source://fast-mcp//lib/mcp/server.rb#192
  def read_resource(uri); end

  # Register a resource with the server
  #
  # source://fast-mcp//lib/mcp/server.rb#68
  def register_resource(resource); end

  # Register multiple resources at once
  #
  # @param resources [Array<Resource>] Resources to register
  #
  # source://fast-mcp//lib/mcp/server.rb#61
  def register_resources(*resources); end

  # Register a tool with the server
  #
  # source://fast-mcp//lib/mcp/server.rb#53
  def register_tool(tool); end

  # Register multiple tools at once
  #
  # @param tools [Array<Tool>] Tools to register
  #
  # source://fast-mcp//lib/mcp/server.rb#46
  def register_tools(*tools); end

  # Remove a resource from the server
  #
  # source://fast-mcp//lib/mcp/server.rb#79
  def remove_resource(uri); end

  # Returns the value of attribute resources.
  #
  # source://fast-mcp//lib/mcp/server.rb#14
  def resources; end

  # Start the server using stdio transport
  #
  # source://fast-mcp//lib/mcp/server.rb#94
  def start; end

  # source://fast-mcp//lib/mcp/server.rb#121
  def start_authenticated_rack(app, options = T.unsafe(nil)); end

  # Start the server as a Rack middleware
  #
  # source://fast-mcp//lib/mcp/server.rb#107
  def start_rack(app, options = T.unsafe(nil)); end

  # Returns the value of attribute tools.
  #
  # source://fast-mcp//lib/mcp/server.rb#14
  def tools; end

  # Returns the value of attribute transport.
  #
  # source://fast-mcp//lib/mcp/server.rb#42
  def transport; end

  # Sets the attribute transport
  #
  # @param value the value to set the attribute transport to.
  #
  # source://fast-mcp//lib/mcp/server.rb#42
  def transport=(_arg0); end

  # Returns the value of attribute transport_klass.
  #
  # source://fast-mcp//lib/mcp/server.rb#42
  def transport_klass; end

  # Sets the attribute transport_klass
  #
  # @param value the value to set the attribute transport_klass to.
  #
  # source://fast-mcp//lib/mcp/server.rb#42
  def transport_klass=(_arg0); end

  # Returns the value of attribute version.
  #
  # source://fast-mcp//lib/mcp/server.rb#14
  def version; end

  private

  # source://fast-mcp//lib/mcp/server.rb#222
  def handle_initialize(params, id); end

  # source://fast-mcp//lib/mcp/server.rb#272
  def handle_initialized_notification; end

  # Handle resources/list request
  #
  # source://fast-mcp//lib/mcp/server.rb#347
  def handle_resources_list(id); end

  # Handle a resource read
  #
  # source://fast-mcp//lib/mcp/server.rb#247
  def handle_resources_read(params, id); end

  # Handle resources/subscribe request
  #
  # source://fast-mcp//lib/mcp/server.rb#354
  def handle_resources_subscribe(params, id); end

  # Handle resources/unsubscribe request
  #
  # source://fast-mcp//lib/mcp/server.rb#378
  def handle_resources_unsubscribe(params, id); end

  # Handle tools/call request
  #
  # source://fast-mcp//lib/mcp/server.rb#295
  def handle_tools_call(params, id); end

  # Handle tools/list request
  #
  # source://fast-mcp//lib/mcp/server.rb#282
  def handle_tools_list(id); end

  # Notify clients about resource list changes
  #
  # source://fast-mcp//lib/mcp/server.rb#398
  def notify_resource_list_changed; end

  # Send a JSON-RPC error response
  #
  # source://fast-mcp//lib/mcp/server.rb#423
  def send_error(code, message, id = T.unsafe(nil)); end

  # Format and send error result
  #
  # source://fast-mcp//lib/mcp/server.rb#337
  def send_error_result(message, id); end

  # Format and send successful result
  #
  # source://fast-mcp//lib/mcp/server.rb#321
  def send_formatted_result(result, id); end

  # Send a JSON-RPC response
  #
  # source://fast-mcp//lib/mcp/server.rb#436
  def send_response(response); end

  # Send a JSON-RPC result response
  #
  # source://fast-mcp//lib/mcp/server.rb#411
  def send_result(result, id); end

  # Helper method to convert string keys to symbols
  #
  # source://fast-mcp//lib/mcp/server.rb#447
  def symbolize_keys(hash); end
end

# source://fast-mcp//lib/mcp/server.rb#16
FastMcp::Server::DEFAULT_CAPABILITIES = T.let(T.unsafe(nil), Hash)

# source://fast-mcp//lib/mcp/server.rb#220
FastMcp::Server::PROTOCOL_VERSION = T.let(T.unsafe(nil), String)

# Main Tool class that represents an MCP Tool
#
# source://fast-mcp//lib/mcp/tool.rb#67
class FastMcp::Tool
  # @raise [InvalidArgumentsError]
  #
  # source://fast-mcp//lib/mcp/tool.rb#109
  def call_with_schema_validation!(**args); end

  # source://fast-mcp//lib/mcp/tool.rb#105
  def notify_resource_updated(uri); end

  class << self
    # source://fast-mcp//lib/mcp/tool.rb#73
    def arguments(&block); end

    # @raise [NotImplementedError]
    #
    # source://fast-mcp//lib/mcp/tool.rb#93
    def call(**args); end

    # source://fast-mcp//lib/mcp/tool.rb#87
    def description(description = T.unsafe(nil)); end

    # source://fast-mcp//lib/mcp/tool.rb#77
    def input_schema; end

    # source://fast-mcp//lib/mcp/tool.rb#97
    def input_schema_to_json; end

    # Returns the value of attribute server.
    #
    # source://fast-mcp//lib/mcp/tool.rb#71
    def server; end

    # Sets the attribute server
    #
    # @param value the value to set the attribute server to.
    #
    # source://fast-mcp//lib/mcp/tool.rb#71
    def server=(_arg0); end

    # source://fast-mcp//lib/mcp/tool.rb#81
    def tool_name(name = T.unsafe(nil)); end
  end
end

# source://fast-mcp//lib/mcp/tool.rb#68
class FastMcp::Tool::InvalidArgumentsError < ::StandardError; end

# source://fast-mcp//lib/mcp/transports/base_transport.rb#4
module FastMcp::Transports; end

# source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#7
class FastMcp::Transports::AuthenticatedRackTransport < ::FastMcp::Transports::RackTransport
  # @return [AuthenticatedRackTransport] a new instance of AuthenticatedRackTransport
  #
  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#8
  def initialize(app, server, options = T.unsafe(nil)); end

  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#17
  def handle_mcp_request(request, env); end

  private

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#30
  def auth_enabled?; end

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#34
  def exempt_from_auth?(path); end

  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#58
  def extract_request_id(request); end

  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#42
  def unauthorized_response(request); end

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#38
  def valid_token?(token); end
end

# Base class for all MCP transports
# This defines the interface that all transports must implement
#
# source://fast-mcp//lib/mcp/transports/base_transport.rb#7
class FastMcp::Transports::BaseTransport
  # @return [BaseTransport] a new instance of BaseTransport
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#10
  def initialize(server, logger: T.unsafe(nil)); end

  # Returns the value of attribute logger.
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#8
  def logger; end

  # Process an incoming message
  # This is a helper method that can be used by subclasses
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#35
  def process_message(message); end

  # Send a message to the client
  # This method should be implemented by subclasses
  #
  # @raise [NotImplementedError]
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#29
  def send_message(message); end

  # Returns the value of attribute server.
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#8
  def server; end

  # Start the transport
  # This method should be implemented by subclasses
  #
  # @raise [NotImplementedError]
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#17
  def start; end

  # Stop the transport
  # This method should be implemented by subclasses
  #
  # @raise [NotImplementedError]
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#23
  def stop; end
end

# Rack middleware transport for MCP
# This transport can be mounted in any Rack-compatible web framework
#
# source://fast-mcp//lib/mcp/transports/rack_transport.rb#12
class FastMcp::Transports::RackTransport < ::FastMcp::Transports::BaseTransport
  # @return [RackTransport] a new instance of RackTransport
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#34
  def initialize(app, server, options = T.unsafe(nil), &_block); end

  # Returns the value of attribute allowed_ips.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#31
  def allowed_ips; end

  # Returns the value of attribute allowed_origins.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#31
  def allowed_origins; end

  # Returns the value of attribute app.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#31
  def app; end

  # Rack call method
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#108
  def call(env); end

  # Returns the value of attribute localhost_only.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#31
  def localhost_only; end

  # Returns the value of attribute messages_route.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#31
  def messages_route; end

  # Returns the value of attribute path_prefix.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#31
  def path_prefix; end

  # Register a new SSE client
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#96
  def register_sse_client(client_id, stream); end

  # Send a message to all connected SSE clients
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#69
  def send_message(message); end

  # Returns the value of attribute sse_clients.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#31
  def sse_clients; end

  # Returns the value of attribute sse_route.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#31
  def sse_route; end

  # Start the transport
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#48
  def start; end

  # Stop the transport
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#55
  def stop; end

  # Unregister an SSE client
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#102
  def unregister_sse_client(client_id); end

  private

  # Clean up SSE connection
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#463
  def cleanup_sse_connection(client_id, io); end

  # Detect browser type from user agent
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#317
  def detect_browser_type(user_agent); end

  # Return a 404 endpoint not found response
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#229
  def endpoint_not_found_response; end

  # Extract client ID from request or generate a new one
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#291
  def extract_client_id(env); end

  # Extract hostname from a URL
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#171
  def extract_hostname(url); end

  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#214
  def forbidden_response(message); end

  # Handle client reconnection
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#337
  def handle_client_reconnection(client_id, browser_type); end

  # Handle internal server errors
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#524
  def handle_internal_error(error); end

  # Handle MCP-specific requests
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#192
  def handle_mcp_request(request, env); end

  # Handle message POST request
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#488
  def handle_message_request(request); end

  # Handle JSON parse errors
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#518
  def handle_parse_error(error); end

  # Handle SSE with Rack hijacking (e.g., Puma)
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#352
  def handle_rack_hijack_sse(env); end

  # Handle SSE with Rails ActionController::Live
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#475
  def handle_rails_sse(env); end

  # Handle SSE connection request
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#244
  def handle_sse_request(request, env); end

  # Handle streaming based on the framework
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#255
  def handle_streaming(env); end

  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#529
  def json_rpc_error_response(http_status, code, message, id = T.unsafe(nil)); end

  # Run the keep-alive loop
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#415
  def keep_alive_loop(io, client_id); end

  # Return a method not allowed error response
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#513
  def method_not_allowed_response; end

  # Process a JSON-RPC request
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#502
  def process_json_request(request); end

  # Check if Rails live streaming is available
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#273
  def rails_live_streaming?(env); end

  # Send a keep-alive ping and return the updated ping count
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#435
  def send_keep_alive_ping(io, client_id, ping_count); end

  # Send a ping event
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#452
  def send_ping_event(io); end

  # Set up CORS headers for preflight requests
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#280
  def setup_cors_headers; end

  # Set up the SSE connection
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#368
  def setup_sse_connection(client_id, io, env); end

  # Start a keep-alive thread for SSE connection
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#402
  def start_keep_alive_thread(client_id, io); end

  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#126
  def validate_client_ip(request); end

  # Validate the Origin header to prevent DNS rebinding attacks
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#139
  def validate_origin(request, env); end
end

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#15
FastMcp::Transports::RackTransport::DEFAULT_ALLOWED_IPS = T.let(T.unsafe(nil), Array)

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#14
FastMcp::Transports::RackTransport::DEFAULT_ALLOWED_ORIGINS = T.let(T.unsafe(nil), Array)

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#13
FastMcp::Transports::RackTransport::DEFAULT_PATH_PREFIX = T.let(T.unsafe(nil), String)

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#17
FastMcp::Transports::RackTransport::SSE_HEADERS = T.let(T.unsafe(nil), Hash)

# STDIO transport for MCP
# This transport uses standard input/output for communication
#
# source://fast-mcp//lib/mcp/transports/stdio_transport.rb#9
class FastMcp::Transports::StdioTransport < ::FastMcp::Transports::BaseTransport
  # @return [StdioTransport] a new instance of StdioTransport
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#10
  def initialize(server, logger: T.unsafe(nil)); end

  # Send a message to the client
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#39
  def send_message(message); end

  # Start the transport
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#16
  def start; end

  # Stop the transport
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#33
  def stop; end

  private

  # Send a JSON-RPC error response
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#49
  def send_error(code, message, id = T.unsafe(nil)); end
end

# source://fast-mcp//lib/mcp/version.rb#4
FastMcp::VERSION = T.let(T.unsafe(nil), String)
