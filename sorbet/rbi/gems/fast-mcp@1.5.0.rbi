# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fast-mcp` gem.
# Please instead update this file by running `bin/tapioca gem fast-mcp`.


# source://fast-mcp//lib/mcp/railtie.rb#15
module ActionResource; end

# source://fast-mcp//lib/mcp/railtie.rb#16
ActionResource::Base = FastMcp::Resource

# source://fast-mcp//lib/mcp/railtie.rb#9
module ActionTool; end

# source://fast-mcp//lib/mcp/railtie.rb#10
ActionTool::Base = FastMcp::Tool

# Extend Dry::Schema DSL to store metadata
#
# source://fast-mcp//lib/mcp/tool.rb#6
module Dry; end

# source://fast-mcp//lib/mcp/tool.rb#7
module Dry::Schema; end

# source://fast-mcp//lib/mcp/tool.rb#75
class Dry::Schema::DSL
  # source://fast-mcp//lib/mcp/tool.rb#76
  def meta(key_name, meta_key, value); end

  # source://fast-mcp//lib/mcp/tool.rb#82
  def meta_data; end
end

# source://fast-mcp//lib/mcp/tool.rb#8
module Dry::Schema::Macros; end

# Add description method to Hash macro
#
# source://fast-mcp//lib/mcp/tool.rb#61
class Dry::Schema::Macros::Hash < ::Dry::Schema::Macros::Schema
  # source://fast-mcp//lib/mcp/tool.rb#62
  def description(text); end
end

# Add description method to Optional macro
#
# source://fast-mcp//lib/mcp/tool.rb#44
class Dry::Schema::Macros::Optional < ::Dry::Schema::Macros::Key
  # source://fast-mcp//lib/mcp/tool.rb#45
  def description(text); end

  # source://fast-mcp//lib/mcp/tool.rb#52
  def hidden(hidden = T.unsafe(nil)); end
end

# Add description method to Required macro
#
# source://fast-mcp//lib/mcp/tool.rb#27
class Dry::Schema::Macros::Required < ::Dry::Schema::Macros::Key
  # source://fast-mcp//lib/mcp/tool.rb#28
  def description(text); end

  # source://fast-mcp//lib/mcp/tool.rb#35
  def hidden(hidden = T.unsafe(nil)); end
end

# Add description method to Value macro
#
# source://fast-mcp//lib/mcp/tool.rb#10
class Dry::Schema::Macros::Value < ::Dry::Schema::Macros::DSL
  # source://fast-mcp//lib/mcp/tool.rb#11
  def description(text); end

  # source://fast-mcp//lib/mcp/tool.rb#18
  def hidden(hidden = T.unsafe(nil)); end
end

# This class is not used yet.
#
# source://fast-mcp//lib/fast_mcp.rb#7
module FastMcp
  class << self
    # Create a Rack middleware for the MCP server with authentication
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @param app [#call] The Rack application
    # @param options [Hash] Options for the middleware
    # @return [#call] The Rack middleware
    # @yield [server] A block to configure the server
    # @yieldparam server [FastMcp::Server] The server to configure
    #
    # source://fast-mcp//lib/fast_mcp.rb#73
    def authenticated_rack_middleware(app, options = T.unsafe(nil)); end

    # source://fast-mcp//lib/fast_mcp.rb#170
    def default_rails_allowed_origins(rail_app); end

    # Mount the MCP middleware in a Rails application
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param app [Rails::Application] The Rails application
    # @param options [Hash] Options for the middleware
    # @return [#call] The Rack middleware
    # @yield [server] A block to configure the server
    # @yieldparam server [FastMcp::Server] The server to configure
    #
    # source://fast-mcp//lib/fast_mcp.rb#134
    def mount_in_rails(app, options = T.unsafe(nil)); end

    # Notify the server that a resource has been updated
    #
    # @param uri [String] The URI of the resource
    #
    # source://fast-mcp//lib/fast_mcp.rb#186
    def notify_resource_updated(uri); end

    # Create a Rack middleware for the MCP server
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param app [#call] The Rack application
    # @param options [Hash] Options for the middleware
    # @return [#call] The Rack middleware
    # @yield [server] A block to configure the server
    # @yieldparam server [FastMcp::Server] The server to configure
    #
    # source://fast-mcp//lib/fast_mcp.rb#46
    def rack_middleware(app, options = T.unsafe(nil)); end

    # Register a resource with the MCP server
    #
    # @param resource [FastMcp::Resource] The resource to register
    # @return [FastMcp::Resource] The registered resource
    #
    # source://fast-mcp//lib/fast_mcp.rb#106
    def register_resource(resource); end

    # Register multiple resources at once
    #
    # @param resources [Array<FastMcp::Resource>] The resources to register
    # @return [Array<FastMcp::Resource>] The registered resources
    #
    # source://fast-mcp//lib/fast_mcp.rb#114
    def register_resources(*resources); end

    # Register a tool with the MCP server
    #
    # @param tool [FastMcp::Tool] The tool to register
    # @return [FastMcp::Tool] The registered tool
    #
    # source://fast-mcp//lib/fast_mcp.rb#90
    def register_tool(tool); end

    # Register multiple tools at once
    #
    # @param tools [Array<FastMcp::Tool>] The tools to register
    # @return [Array<FastMcp::Tool>] The registered tools
    #
    # source://fast-mcp//lib/fast_mcp.rb#98
    def register_tools(*tools); end

    # Returns the value of attribute server.
    #
    # source://fast-mcp//lib/fast_mcp.rb#9
    def server; end

    # Sets the attribute server
    #
    # @param value the value to set the attribute server to.
    #
    # source://fast-mcp//lib/fast_mcp.rb#9
    def server=(_arg0); end
  end
end

# Module for handling basic type predicates
#
# source://fast-mcp//lib/mcp/tool.rb#420
module FastMcp::BasicTypePredicateHandler
  # Add basic type to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#422
  def add_basic_type(predicate_name, property); end

  # Add numeric constraint to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#453
  def add_numeric_constraint(predicate_name, args, property); end

  # Add string constraint to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#441
  def add_string_constraint(predicate_name, args, property); end
end

# Module for handling format predicates
#
# source://fast-mcp//lib/mcp/tool.rb#468
module FastMcp::FormatPredicateHandler
  # Add date/time format to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#470
  def add_date_time_format(predicate_name, property); end

  # Add format constraint to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#504
  def add_format_constraint(args, property); end

  # Add number constraint to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#493
  def add_number_constraint(predicate_name, property); end

  # Add UUID pattern to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#483
  def add_uuid_pattern(predicate_name, property); end
end

# source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#6
module FastMcp::Generators; end

# source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#7
class FastMcp::Generators::InstallGenerator < ::Rails::Generators::Base
  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#25
  def copy_application_resource; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#21
  def copy_application_tool; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#12
  def copy_initializer; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#33
  def copy_sample_resource; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#29
  def copy_sample_tool; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#16
  def create_directories; end

  # source://fast-mcp//lib/generators/fast_mcp/install/install_generator.rb#37
  def display_post_install_message; end
end

# source://fast-mcp//lib/mcp/logger.rb#5
class FastMcp::Logger < ::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://fast-mcp//lib/mcp/logger.rb#6
  def initialize(transport: T.unsafe(nil)); end

  # source://fast-mcp//lib/mcp/logger.rb#21
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # Returns the value of attribute client_initialized.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def client_initialized; end

  # Sets the attribute client_initialized
  #
  # @param value the value to set the attribute client_initialized to.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def client_initialized=(_arg0); end

  # Returns the value of attribute client_initialized.
  #
  # source://fast-mcp//lib/mcp/logger.rb#15
  def client_initialized?; end

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/logger.rb#28
  def rack_transport?; end

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/logger.rb#17
  def stdio_transport?; end

  # Returns the value of attribute transport.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def transport; end

  # Sets the attribute transport
  #
  # @param value the value to set the attribute transport to.
  #
  # source://fast-mcp//lib/mcp/logger.rb#14
  def transport=(_arg0); end
end

# Module for handling nested rules
#
# source://fast-mcp//lib/mcp/tool.rb#523
module FastMcp::NestedRuleHandler
  # Add to nested rules
  #
  # source://fast-mcp//lib/mcp/tool.rb#648
  def add_to_nested_rules(nested_key, nested_key_op, nested_rules, is_optional); end

  # Create implication
  #
  # source://fast-mcp//lib/mcp/tool.rb#658
  def create_implication(rule); end

  # Extract from implication and
  #
  # source://fast-mcp//lib/mcp/tool.rb#590
  def extract_from_implication_and(and_rule, nested_rules); end

  # Extract from implication key
  #
  # source://fast-mcp//lib/mcp/tool.rb#581
  def extract_from_implication_key(key_rule, nested_rules); end

  # Extract nested rules from a rule
  #
  # source://fast-mcp//lib/mcp/tool.rb#525
  def extract_nested_rules(rule); end

  # Extract nested rules from an And operation
  #
  # source://fast-mcp//lib/mcp/tool.rb#541
  def extract_nested_rules_from_and(rule, nested_rules); end

  # Extract nested rules from an Implication operation
  #
  # source://fast-mcp//lib/mcp/tool.rb#571
  def extract_nested_rules_from_implication(rule, nested_rules); end

  # Find nested key operation
  #
  # source://fast-mcp//lib/mcp/tool.rb#639
  def find_nested_key_op(rule); end

  # Process a nested rule
  #
  # source://fast-mcp//lib/mcp/tool.rb#625
  def process_nested_rule(rule, nested_rules, is_optional); end

  # Process a set operation
  #
  # source://fast-mcp//lib/mcp/tool.rb#609
  def process_set_operation(set_op, nested_rules); end
end

# Module for handling predicates
#
# source://fast-mcp//lib/mcp/tool.rb#353
module FastMcp::PredicateHandler
  # Add predicate description to schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#391
  def add_predicate_description(predicate_name, args, key_name, properties); end

  # Extract arguments from a predicate
  #
  # source://fast-mcp//lib/mcp/tool.rb#380
  def extract_predicate_args(rule); end

  # Extract predicates from a rule
  #
  # source://fast-mcp//lib/mcp/tool.rb#355
  def extract_predicates(rule, key, properties = T.unsafe(nil)); end

  # Process a predicate
  #
  # source://fast-mcp//lib/mcp/tool.rb#373
  def process_predicate(rule, key, properties); end
end

# Railtie for integrating Fast MCP with Rails applications
#
# source://fast-mcp//lib/mcp/railtie.rb#22
class FastMcp::Railtie < ::Rails::Railtie; end

# Resource class for MCP Resources feature
# Represents a resource that can be exposed to clients
#
# source://fast-mcp//lib/mcp/resource.rb#11
class FastMcp::Resource
  # Initialize with instance variables
  #
  # @param params [Hash] The parameters for this resource instance
  # @return [Resource] a new instance of Resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#161
  def initialize(params = T.unsafe(nil)); end

  # Check if the resource is binary
  #
  # @return [Boolean] true if the resource is binary, false otherwise
  #
  # source://fast-mcp//lib/mcp/resource.rb#201
  def binary?; end

  # Method to be overridden by subclasses to dynamically generate content
  #
  # @raise [NotImplementedError]
  # @return [String, nil] Generated content for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#195
  def content; end

  # Description of the resource - delegates to class method
  #
  # @return [String, nil] The description for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#179
  def description; end

  # MIME type of the resource - delegates to class method
  #
  # @return [String, nil] The MIME type for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#185
  def mime_type; end

  # Name of the resource - delegates to class method
  #
  # @return [String, nil] The name for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#173
  def name; end

  # Get parameters from the URI template
  #
  # @return [Hash] The parameters extracted from the URI
  #
  # source://fast-mcp//lib/mcp/resource.rb#191
  def params; end

  # URI of the resource - delegates to class method
  #
  # @return [String, nil] The URI for this resource
  #
  # source://fast-mcp//lib/mcp/resource.rb#167
  def uri; end

  class << self
    # Get the Addressable::Template for this resource
    #
    # @return [Addressable::Template] The Addressable::Template for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#33
    def addressable_template; end

    # Define description for this resource
    #
    # @param value [String, nil] The description for this resource
    # @return [String] The description for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#94
    def description(value = T.unsafe(nil)); end

    # Load content from a file (class method)
    #
    # @param file_path [String] Path to the file
    # @return [Resource] New resource instance with content loaded from file
    #
    # source://fast-mcp//lib/mcp/resource.rb#130
    def from_file(file_path, name: T.unsafe(nil), description: T.unsafe(nil)); end

    # Initialize a new instance from the given URI
    #
    # @param uri [String] The URI to initialize from
    # @return [Resource] A new resource instance
    #
    # source://fast-mcp//lib/mcp/resource.rb#65
    def initialize_from_uri(uri); end

    # Match the given URI against the resource's addressable template
    #
    # @param uri [String] The URI to match
    # @return [Addressable::Template::MatchData, nil] The match data if the URI matches, nil otherwise
    #
    # source://fast-mcp//lib/mcp/resource.rb#58
    def match(uri); end

    # Get the resource metadata (without content)
    #
    # @return [Hash] Resource metadata
    #
    # source://fast-mcp//lib/mcp/resource.rb#109
    def metadata; end

    # Define MIME type for this resource
    #
    # @param value [String, nil] The MIME type for this resource
    # @return [String] The MIME type for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#102
    def mime_type(value = T.unsafe(nil)); end

    # source://fast-mcp//lib/mcp/resource.rb#85
    def name; end

    # Check if this resource has a non-templated URI
    #
    # @return [Boolean] true if the URI does not contain template parameters
    #
    # source://fast-mcp//lib/mcp/resource.rb#51
    def non_templated?; end

    # source://fast-mcp//lib/mcp/resource.rb#84
    def original_name; end

    # Get the parameters from the given URI
    #
    # @param uri [String] The URI to get the parameters from
    # @return [Hash] The parameters from the URI
    #
    # source://fast-mcp//lib/mcp/resource.rb#72
    def params_from_uri(uri); end

    # Define name for this resource
    #
    # @param value [String, nil] The name for this resource
    # @return [String] The name for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#79
    def resource_name(value = T.unsafe(nil)); end

    # Returns the value of attribute server.
    #
    # source://fast-mcp//lib/mcp/resource.rb#13
    def server; end

    # Sets the attribute server
    #
    # @param value the value to set the attribute server to.
    #
    # source://fast-mcp//lib/mcp/resource.rb#13
    def server=(_arg0); end

    # Get the template variables for this resource
    #
    # @return [Array] The template variables for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#39
    def template_variables; end

    # Check if this resource has a templated URI
    #
    # @return [Boolean] true if the URI contains template parameters
    #
    # source://fast-mcp//lib/mcp/resource.rb#45
    def templated?; end

    # Define URI for this resource
    #
    # @param value [String, nil] The URI for this resource
    # @return [String] The URI for this resource
    #
    # source://fast-mcp//lib/mcp/resource.rb#18
    def uri(value = T.unsafe(nil)); end

    # Variabilize the URI with the given params
    #
    # @param params [Hash] The parameters to variabilize the URI with
    # @return [String] The variabilized URI
    #
    # source://fast-mcp//lib/mcp/resource.rb#27
    def variabilized_uri(params = T.unsafe(nil)); end
  end
end

# Module for handling rule type detection
#
# source://fast-mcp//lib/mcp/tool.rb#316
module FastMcp::RuleTypeDetector
  # Check if a rule is for an array type
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#346
  def array_type?(rule); end

  # Check for direct hash predicate
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#325
  def direct_hash_predicate?(rule); end

  # Check if a rule is for a hash type
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#318
  def hash_type?(rule); end

  # Check for nested hash predicate
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#332
  def nested_hash_predicate?(rule); end
end

# SchemaCompiler class for converting Dry::Schema to JSON Schema
#
# source://fast-mcp//lib/mcp/tool.rb#668
class FastMcp::SchemaCompiler
  include ::FastMcp::SchemaMetadataExtractor
  include ::FastMcp::RuleTypeDetector
  include ::FastMcp::PredicateHandler
  include ::FastMcp::BasicTypePredicateHandler
  include ::FastMcp::FormatPredicateHandler
  include ::FastMcp::NestedRuleHandler

  # @return [SchemaCompiler] a new instance of SchemaCompiler
  #
  # source://fast-mcp//lib/mcp/tool.rb#676
  def initialize; end

  # Returns the value of attribute json_schema.
  #
  # source://fast-mcp//lib/mcp/tool.rb#684
  def json_schema; end

  # source://fast-mcp//lib/mcp/tool.rb#686
  def process(schema); end

  # source://fast-mcp//lib/mcp/tool.rb#812
  def process_deeper_nested_property(key, nested_key, deeper_key, deeper_rule); end

  # source://fast-mcp//lib/mcp/tool.rb#792
  def process_deeper_nested_schema(key, nested_key, nested_rule); end

  # source://fast-mcp//lib/mcp/tool.rb#759
  def process_nested_property(key, nested_key, nested_rule); end

  # source://fast-mcp//lib/mcp/tool.rb#739
  def process_nested_schema(key, rule); end

  # source://fast-mcp//lib/mcp/tool.rb#711
  def process_rule(key, rule); end
end

# Module for handling schema metadata
#
# source://fast-mcp//lib/mcp/tool.rb#198
module FastMcp::SchemaMetadataExtractor
  # Extract metadata from a node
  #
  # source://fast-mcp//lib/mcp/tool.rb#304
  def extract_metadata(and_node, metadata, nested_path); end

  # Extract metadata from AST
  #
  # source://fast-mcp//lib/mcp/tool.rb#223
  def extract_metadata_from_ast(ast, metadata, parent_key = T.unsafe(nil)); end

  # Extract metadata from a schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#200
  def extract_metadata_from_schema(schema); end

  # Process an and node in the AST
  #
  # source://fast-mcp//lib/mcp/tool.rb#252
  def process_and_node(ast, metadata, parent_key); end

  # Process a key node in the AST
  #
  # source://fast-mcp//lib/mcp/tool.rb#232
  def process_key_node(ast, metadata, parent_key); end

  # Process nested keys in a schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#292
  def process_nested_keys(set_node, metadata, nested_key); end

  # Process nested properties in an and node
  #
  # source://fast-mcp//lib/mcp/tool.rb#265
  def process_nested_properties(ast, metadata, parent_key); end

  # Process a nested schema
  #
  # source://fast-mcp//lib/mcp/tool.rb#277
  def process_nested_schema_ast(ast, metadata, nested_key); end

  # Process a set node in the AST
  #
  # source://fast-mcp//lib/mcp/tool.rb#243
  def process_set_node(ast, metadata, parent_key); end
end

# source://fast-mcp//lib/mcp/server.rb#14
class FastMcp::Server
  include ::FastMcp::ServerFiltering

  # @return [Server] a new instance of Server
  #
  # source://fast-mcp//lib/mcp/server.rb#29
  def initialize(name:, version:, logger: T.unsafe(nil), capabilities: T.unsafe(nil)); end

  # Returns the value of attribute capabilities.
  #
  # source://fast-mcp//lib/mcp/server.rb#17
  def capabilities; end

  # Handle a JSON-RPC request and return the response as a JSON string
  #
  # source://fast-mcp//lib/mcp/server.rb#143
  def handle_json_request(request, headers: T.unsafe(nil)); end

  # Handle incoming JSON-RPC request
  #
  # source://fast-mcp//lib/mcp/server.rb#150
  def handle_request(json_str, headers: T.unsafe(nil)); end

  # Returns the value of attribute logger.
  #
  # source://fast-mcp//lib/mcp/server.rb#46
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://fast-mcp//lib/mcp/server.rb#46
  def logger=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://fast-mcp//lib/mcp/server.rb#17
  def name; end

  # Notify subscribers about a resource update
  #
  # source://fast-mcp//lib/mcp/server.rb#199
  def notify_resource_updated(uri); end

  # source://fast-mcp//lib/mcp/server.rb#217
  def read_resource(uri); end

  # Register a resource with the server
  #
  # source://fast-mcp//lib/mcp/server.rb#72
  def register_resource(resource); end

  # Register multiple resources at once
  #
  # @param resources [Array<Resource>] Resources to register
  #
  # source://fast-mcp//lib/mcp/server.rb#65
  def register_resources(*resources); end

  # Register a tool with the server
  #
  # source://fast-mcp//lib/mcp/server.rb#57
  def register_tool(tool); end

  # Register multiple tools at once
  #
  # @param tools [Array<Tool>] Tools to register
  #
  # source://fast-mcp//lib/mcp/server.rb#50
  def register_tools(*tools); end

  # Remove a resource from the server
  #
  # source://fast-mcp//lib/mcp/server.rb#84
  def remove_resource(uri); end

  # Returns the value of attribute resources.
  #
  # source://fast-mcp//lib/mcp/server.rb#17
  def resources; end

  # Start the server using stdio transport
  #
  # source://fast-mcp//lib/mcp/server.rb#101
  def start; end

  # source://fast-mcp//lib/mcp/server.rb#128
  def start_authenticated_rack(app, options = T.unsafe(nil)); end

  # Start the server as a Rack middleware
  #
  # source://fast-mcp//lib/mcp/server.rb#114
  def start_rack(app, options = T.unsafe(nil)); end

  # Returns the value of attribute tools.
  #
  # source://fast-mcp//lib/mcp/server.rb#17
  def tools; end

  # Returns the value of attribute transport.
  #
  # source://fast-mcp//lib/mcp/server.rb#46
  def transport; end

  # Sets the attribute transport
  #
  # @param value the value to set the attribute transport to.
  #
  # source://fast-mcp//lib/mcp/server.rb#46
  def transport=(_arg0); end

  # Returns the value of attribute transport_klass.
  #
  # source://fast-mcp//lib/mcp/server.rb#46
  def transport_klass; end

  # Sets the attribute transport_klass
  #
  # @param value the value to set the attribute transport_klass to.
  #
  # source://fast-mcp//lib/mcp/server.rb#46
  def transport_klass=(_arg0); end

  # Returns the value of attribute version.
  #
  # source://fast-mcp//lib/mcp/server.rb#17
  def version; end

  private

  # source://fast-mcp//lib/mcp/server.rb#225
  def handle_initialize(params, id); end

  # source://fast-mcp//lib/mcp/server.rb#285
  def handle_initialized_notification; end

  # Handle resources/list request
  #
  # source://fast-mcp//lib/mcp/server.rb#367
  def handle_resources_list(id); end

  # Handle a resource read
  #
  # source://fast-mcp//lib/mcp/server.rb#250
  def handle_resources_read(params, id); end

  # Handle resources/subscribe request
  #
  # source://fast-mcp//lib/mcp/server.rb#382
  def handle_resources_subscribe(params, id); end

  # Handle resources/templates/list request
  #
  # source://fast-mcp//lib/mcp/server.rb#374
  def handle_resources_templates_list(id); end

  # Handle resources/unsubscribe request
  #
  # source://fast-mcp//lib/mcp/server.rb#403
  def handle_resources_unsubscribe(params, id); end

  # Handle tools/call request
  #
  # source://fast-mcp//lib/mcp/server.rb#308
  def handle_tools_call(params, headers, id); end

  # Handle tools/list request
  #
  # source://fast-mcp//lib/mcp/server.rb#295
  def handle_tools_list(id); end

  # Notify clients about resource list changes
  #
  # source://fast-mcp//lib/mcp/server.rb#423
  def notify_resource_list_changed; end

  # Send a JSON-RPC error response
  #
  # source://fast-mcp//lib/mcp/server.rb#450
  def send_error(code, message, id = T.unsafe(nil)); end

  # Format and send error result
  #
  # source://fast-mcp//lib/mcp/server.rb#356
  def send_error_result(message, id); end

  # Format and send successful result
  #
  # source://fast-mcp//lib/mcp/server.rb#340
  def send_formatted_result(result, id, metadata); end

  # Send a JSON-RPC response
  #
  # source://fast-mcp//lib/mcp/server.rb#464
  def send_response(response); end

  # Send a JSON-RPC result response
  #
  # source://fast-mcp//lib/mcp/server.rb#436
  def send_result(result, id, metadata: T.unsafe(nil)); end

  # Helper method to convert string keys to symbols
  #
  # source://fast-mcp//lib/mcp/server.rb#475
  def symbolize_keys(hash); end
end

# source://fast-mcp//lib/mcp/server.rb#19
FastMcp::Server::DEFAULT_CAPABILITIES = T.let(T.unsafe(nil), Hash)

# source://fast-mcp//lib/mcp/server.rb#223
FastMcp::Server::PROTOCOL_VERSION = T.let(T.unsafe(nil), String)

# Module for handling server filtering functionality
#
# source://fast-mcp//lib/mcp/server_filtering.rb#5
module FastMcp::ServerFiltering
  # Check if filters are configured
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/server_filtering.rb#17
  def contains_filters?; end

  # Create a filtered copy for a specific request
  #
  # source://fast-mcp//lib/mcp/server_filtering.rb#22
  def create_filtered_copy(request); end

  # Add filter for resources
  #
  # source://fast-mcp//lib/mcp/server_filtering.rb#12
  def filter_resources(&block); end

  # Add filter for tools
  #
  # source://fast-mcp//lib/mcp/server_filtering.rb#7
  def filter_tools(&block); end

  private

  # Apply all resource filters to the resources collection
  #
  # source://fast-mcp//lib/mcp/server_filtering.rb#72
  def apply_resource_filters(request); end

  # Apply all tool filters to the tools collection
  #
  # source://fast-mcp//lib/mcp/server_filtering.rb#63
  def apply_tool_filters(request); end

  # Apply resource filters and register filtered resources
  #
  # source://fast-mcp//lib/mcp/server_filtering.rb#53
  def register_filtered_resources(filtered_server, request); end

  # Apply tool filters and register filtered tools
  #
  # source://fast-mcp//lib/mcp/server_filtering.rb#43
  def register_filtered_tools(filtered_server, request); end
end

# Main Tool class that represents an MCP Tool
#
# source://fast-mcp//lib/mcp/tool.rb#91
class FastMcp::Tool
  # @return [Tool] a new instance of Tool
  #
  # source://fast-mcp//lib/mcp/tool.rb#155
  def initialize(headers: T.unsafe(nil)); end

  # Returns the value of attribute _meta.
  #
  # source://fast-mcp//lib/mcp/tool.rb#180
  def _meta; end

  # Sets the attribute _meta
  #
  # @param value the value to set the attribute _meta to.
  #
  # source://fast-mcp//lib/mcp/tool.rb#180
  def _meta=(_arg0); end

  # @raise [InvalidArgumentsError]
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/tool.rb#160
  def authorized?(**args); end

  # @raise [InvalidArgumentsError]
  #
  # source://fast-mcp//lib/mcp/tool.rb#187
  def call_with_schema_validation!(**args); end

  # Returns the value of attribute headers.
  #
  # source://fast-mcp//lib/mcp/tool.rb#181
  def headers; end

  # source://fast-mcp//lib/mcp/tool.rb#183
  def notify_resource_updated(uri); end

  class << self
    # source://fast-mcp//lib/mcp/tool.rb#118
    def arguments(&block); end

    # source://fast-mcp//lib/mcp/tool.rb#138
    def authorize(&block); end

    # @raise [NotImplementedError]
    #
    # source://fast-mcp//lib/mcp/tool.rb#143
    def call(**args); end

    # source://fast-mcp//lib/mcp/tool.rb#132
    def description(description = T.unsafe(nil)); end

    # source://fast-mcp//lib/mcp/tool.rb#122
    def input_schema; end

    # source://fast-mcp//lib/mcp/tool.rb#147
    def input_schema_to_json; end

    # Add metadata support for tools
    #
    # source://fast-mcp//lib/mcp/tool.rb#107
    def metadata(key = T.unsafe(nil), value = T.unsafe(nil)); end

    # Returns the value of attribute server.
    #
    # source://fast-mcp//lib/mcp/tool.rb#95
    def server; end

    # Sets the attribute server
    #
    # @param value the value to set the attribute server to.
    #
    # source://fast-mcp//lib/mcp/tool.rb#95
    def server=(_arg0); end

    # Add tagging support for tools
    #
    # source://fast-mcp//lib/mcp/tool.rb#98
    def tags(*tag_list); end

    # source://fast-mcp//lib/mcp/tool.rb#126
    def tool_name(name = T.unsafe(nil)); end
  end
end

# source://fast-mcp//lib/mcp/tool.rb#92
class FastMcp::Tool::InvalidArgumentsError < ::StandardError; end

# source://fast-mcp//lib/mcp/transports/base_transport.rb#4
module FastMcp::Transports; end

# source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#7
class FastMcp::Transports::AuthenticatedRackTransport < ::FastMcp::Transports::RackTransport
  # @return [AuthenticatedRackTransport] a new instance of AuthenticatedRackTransport
  #
  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#8
  def initialize(app, server, options = T.unsafe(nil)); end

  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#17
  def handle_mcp_request(request, env); end

  private

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#30
  def auth_enabled?; end

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#34
  def exempt_from_auth?(path); end

  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#58
  def extract_request_id(request); end

  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#42
  def unauthorized_response(request); end

  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/transports/authenticated_rack_transport.rb#38
  def valid_token?(token); end
end

# Base class for all MCP transports
# This defines the interface that all transports must implement
#
# source://fast-mcp//lib/mcp/transports/base_transport.rb#7
class FastMcp::Transports::BaseTransport
  # @return [BaseTransport] a new instance of BaseTransport
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#10
  def initialize(server, logger: T.unsafe(nil)); end

  # Returns the value of attribute logger.
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#8
  def logger; end

  # Process an incoming message
  # This is a helper method that can be used by subclasses
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#35
  def process_message(message, headers: T.unsafe(nil)); end

  # Send a message to the client
  # This method should be implemented by subclasses
  #
  # @raise [NotImplementedError]
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#29
  def send_message(message); end

  # Returns the value of attribute server.
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#8
  def server; end

  # Start the transport
  # This method should be implemented by subclasses
  #
  # @raise [NotImplementedError]
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#17
  def start; end

  # Stop the transport
  # This method should be implemented by subclasses
  #
  # @raise [NotImplementedError]
  #
  # source://fast-mcp//lib/mcp/transports/base_transport.rb#23
  def stop; end
end

# Rack middleware transport for MCP
# This transport can be mounted in any Rack-compatible web framework
#
# source://fast-mcp//lib/mcp/transports/rack_transport.rb#12
class FastMcp::Transports::RackTransport < ::FastMcp::Transports::BaseTransport
  # @return [RackTransport] a new instance of RackTransport
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#35
  def initialize(app, server, options = T.unsafe(nil), &_block); end

  # Returns the value of attribute allowed_ips.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#32
  def allowed_ips; end

  # Returns the value of attribute allowed_origins.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#32
  def allowed_origins; end

  # Returns the value of attribute app.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#32
  def app; end

  # Rack call method
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#121
  def call(env); end

  # Returns the value of attribute localhost_only.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#32
  def localhost_only; end

  # Returns the value of attribute messages_route.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#32
  def messages_route; end

  # Returns the value of attribute path_prefix.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#32
  def path_prefix; end

  # Register a new SSE client
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#105
  def register_sse_client(client_id, stream, mutex = T.unsafe(nil)); end

  # Send a message to all connected SSE clients
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#74
  def send_message(message); end

  # Returns the value of attribute sse_clients.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#32
  def sse_clients; end

  # Returns the value of attribute sse_route.
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#32
  def sse_route; end

  # Start the transport
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#51
  def start; end

  # Stop the transport
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#58
  def stop; end

  # Unregister an SSE client
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#113
  def unregister_sse_client(client_id); end

  private

  # Clean up SSE connection
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#495
  def cleanup_sse_connection(client_id, io); end

  # Detect browser type from user agent
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#344
  def detect_browser_type(user_agent); end

  # Return a 404 endpoint not found response
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#256
  def endpoint_not_found_response; end

  # Extract client ID from request or generate a new one
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#318
  def extract_client_id(env); end

  # Extract hostname from a URL
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#184
  def extract_hostname(url); end

  # Extract headers that might be relevant for filtering
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#617
  def extract_relevant_headers(request); end

  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#241
  def forbidden_response(message); end

  # Generate a cache key based on filter-relevant request attributes
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#606
  def generate_cache_key(request); end

  # Get the appropriate server for this request
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#583
  def get_server_for_request(request, env); end

  # Handle client reconnection
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#364
  def handle_client_reconnection(client_id, browser_type); end

  # Handle internal server errors
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#566
  def handle_internal_error(error); end

  # Handle MCP-specific requests
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#205
  def handle_mcp_request(request, env); end

  # Handle message POST request with specific server
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#525
  def handle_message_request_with_server(request, server); end

  # Handle JSON parse errors
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#560
  def handle_parse_error(error); end

  # Handle SSE with Rack hijacking (e.g., Puma)
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#379
  def handle_rack_hijack_sse(env); end

  # Handle SSE with Rails ActionController::Live
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#512
  def handle_rails_sse(env); end

  # Handle SSE connection request
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#271
  def handle_sse_request(request, env); end

  # Handle streaming based on the framework
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#282
  def handle_streaming(env); end

  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#571
  def json_rpc_error_response(http_status, code, message, id = T.unsafe(nil)); end

  # Run the keep-alive loop
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#450
  def keep_alive_loop(io, client_id); end

  # Return a method not allowed error response
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#555
  def method_not_allowed_response; end

  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#538
  def process_json_request_with_server(request, server); end

  # Check if Rails live streaming is available
  #
  # @return [Boolean]
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#300
  def rails_live_streaming?(env); end

  # Send a keep-alive ping and return the updated ping count
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#469
  def send_keep_alive_ping(io, client_id, ping_count); end

  # Send a ping event
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#484
  def send_ping_event(io); end

  # Set up CORS headers for preflight requests
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#307
  def setup_cors_headers; end

  # Set up the SSE connection
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#395
  def setup_sse_connection(client_id, io, env); end

  # Start a keep-alive thread for SSE connection
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#437
  def start_keep_alive_thread(client_id, io); end

  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#139
  def validate_client_ip(request); end

  # Validate the Origin header to prevent DNS rebinding attacks
  #
  # source://fast-mcp//lib/mcp/transports/rack_transport.rb#152
  def validate_origin(request, env); end
end

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#15
FastMcp::Transports::RackTransport::DEFAULT_ALLOWED_IPS = T.let(T.unsafe(nil), Array)

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#14
FastMcp::Transports::RackTransport::DEFAULT_ALLOWED_ORIGINS = T.let(T.unsafe(nil), Array)

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#13
FastMcp::Transports::RackTransport::DEFAULT_PATH_PREFIX = T.let(T.unsafe(nil), String)

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#16
FastMcp::Transports::RackTransport::SERVER_ENV_KEY = T.let(T.unsafe(nil), String)

# source://fast-mcp//lib/mcp/transports/rack_transport.rb#18
FastMcp::Transports::RackTransport::SSE_HEADERS = T.let(T.unsafe(nil), Hash)

# STDIO transport for MCP
# This transport uses standard input/output for communication
#
# source://fast-mcp//lib/mcp/transports/stdio_transport.rb#9
class FastMcp::Transports::StdioTransport < ::FastMcp::Transports::BaseTransport
  # @return [StdioTransport] a new instance of StdioTransport
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#10
  def initialize(server, logger: T.unsafe(nil)); end

  # Send a message to the client
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#39
  def send_message(message); end

  # Start the transport
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#16
  def start; end

  # Stop the transport
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#33
  def stop; end

  private

  # Send a JSON-RPC error response
  #
  # source://fast-mcp//lib/mcp/transports/stdio_transport.rb#49
  def send_error(code, message, id = T.unsafe(nil)); end
end

# source://fast-mcp//lib/mcp/version.rb#4
FastMcp::VERSION = T.let(T.unsafe(nil), String)
