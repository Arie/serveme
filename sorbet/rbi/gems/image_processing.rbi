# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/image_processing/all/image_processing.rbi
#
# image_processing-1.13.0

module ImageProcessing
end
module ImageProcessing::Chainable
  def apply(operations); end
  def branch(**new_options); end
  def call(file = nil, destination: nil, **call_options); end
  def convert(format); end
  def instrumenter(&block); end
  def loader(**options); end
  def method_missing(name, *args, **, &block); end
  def operation(name, *args, &block); end
  def saver(**options); end
  def source(file); end
end
class ImageProcessing::Builder
  def call!(**call_options); end
  def initialize(options); end
  def instrument; end
  def options; end
  def pipeline_options; end
  include ImageProcessing::Chainable
end
class ImageProcessing::Pipeline
  def call(save: nil); end
  def call_processor(**options); end
  def create_tempfile; end
  def destination; end
  def destination_format; end
  def determine_format(file_path); end
  def format; end
  def handle_destination; end
  def initialize(options); end
  def loader; end
  def operations; end
  def processor; end
  def saver; end
  def source; end
  def source_path; end
end
class ImageProcessing::Processor
  def apply_operation(name, *args, &block); end
  def custom(&block); end
  def initialize(accumulator = nil); end
  def self.accumulator(name, klass); end
  def self.apply_operation(accumulator, arg1); end
  def self.call(source:, loader:, operations:, saver:, destination: nil); end
  def self.supports_resize_on_load?; end
end
class ImageProcessing::Error < StandardError
end
