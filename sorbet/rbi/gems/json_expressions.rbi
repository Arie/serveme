# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/json_expressions/all/json_expressions.rbi
#
# json_expressions-0.9.0

module JsonExpressions
end
module JsonExpressions::Strict
end
module JsonExpressions::Forgiving
end
module JsonExpressions::Ordered
end
module JsonExpressions::Unordered
end
module JsonExpressions::CoreExtensions
  def forgiving!; end
  def forgiving; end
  def forgiving?; end
  def ordered!; end
  def ordered; end
  def ordered?; end
  def strict!; end
  def strict; end
  def strict?; end
  def unordered!; end
  def unordered; end
  def unordered?; end
end
class Hash
  def ignore_extra_keys!; end
  def ignore_extra_keys; end
  def reject_extra_keys!; end
  def reject_extra_keys; end
  include JsonExpressions::CoreExtensions
end
class Array
  def ignore_extra_values!; end
  def ignore_extra_values; end
  def reject_extra_values!; end
  def reject_extra_values; end
  include JsonExpressions::CoreExtensions
end
class JsonExpressions::Matcher
  def =~(other); end
  def apply_array_defaults(array); end
  def apply_hash_defaults(hash); end
  def capture(path, name, value); end
  def captures; end
  def initialize(json, options = nil); end
  def last_error; end
  def make_path(path, segment); end
  def match(other); end
  def match_array(path, matcher, other); end
  def match_hash(path, matcher, other); end
  def match_json(path, matcher, other); end
  def match_obj(path, matcher, other, meth); end
  def reset!; end
  def self.assume_strict_arrays; end
  def self.assume_strict_arrays=(arg0); end
  def self.assume_strict_hashes; end
  def self.assume_strict_hashes=(arg0); end
  def self.assume_unordered_arrays; end
  def self.assume_unordered_arrays=(arg0); end
  def self.assume_unordered_hashes; end
  def self.assume_unordered_hashes=(arg0); end
  def self.skip_triple_equal_on; end
  def self.skip_triple_equal_on=(arg0); end
  def set_last_error(path, message); end
  def to_s; end
  def triple_equable?(obj); end
end
module JsonExpressions::RSpec
end
module JsonExpressions::RSpec::Matchers
  def match_json_expression(expected); end
end
class JsonExpressions::RSpec::Matchers::MatchJsonExpression
  def ===(target); end
  def description; end
  def failure_message; end
  def failure_message_for_should; end
  def failure_message_for_should_not; end
  def failure_message_when_negated; end
  def initialize(expected); end
  def matches?(target); end
end
module RSpec
end
module RSpec::Core
end
class RSpec::Core::ExampleGroup
  def wildcard_matcher; end
end
