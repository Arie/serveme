# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/language_server-protocol/all/language_server-protocol.rbi
#
# language_server-protocol-3.17.0.3

module LanguageServer
end
module LanguageServer::Protocol
end
module LanguageServer::Protocol::Constant
end
module LanguageServer::Protocol::Constant::CodeActionKind
end
module LanguageServer::Protocol::Constant::CodeActionTriggerKind
end
module LanguageServer::Protocol::Constant::CompletionItemKind
end
module LanguageServer::Protocol::Constant::CompletionItemTag
end
module LanguageServer::Protocol::Constant::CompletionTriggerKind
end
module LanguageServer::Protocol::Constant::DiagnosticSeverity
end
module LanguageServer::Protocol::Constant::DiagnosticTag
end
module LanguageServer::Protocol::Constant::DocumentDiagnosticReportKind
end
module LanguageServer::Protocol::Constant::DocumentHighlightKind
end
module LanguageServer::Protocol::Constant::ErrorCodes
end
module LanguageServer::Protocol::Constant::FailureHandlingKind
end
module LanguageServer::Protocol::Constant::FileChangeType
end
module LanguageServer::Protocol::Constant::FileOperationPatternKind
end
module LanguageServer::Protocol::Constant::FoldingRangeKind
end
module LanguageServer::Protocol::Constant::InitializeErrorCodes
end
module LanguageServer::Protocol::Constant::InlayHintKind
end
module LanguageServer::Protocol::Constant::InsertTextFormat
end
module LanguageServer::Protocol::Constant::InsertTextMode
end
module LanguageServer::Protocol::Constant::MarkupKind
end
module LanguageServer::Protocol::Constant::MessageType
end
module LanguageServer::Protocol::Constant::MonikerKind
end
module LanguageServer::Protocol::Constant::NotebookCellKind
end
module LanguageServer::Protocol::Constant::PositionEncodingKind
end
module LanguageServer::Protocol::Constant::PrepareSupportDefaultBehavior
end
module LanguageServer::Protocol::Constant::ResourceOperationKind
end
module LanguageServer::Protocol::Constant::SemanticTokenModifiers
end
module LanguageServer::Protocol::Constant::SemanticTokenTypes
end
module LanguageServer::Protocol::Constant::SignatureHelpTriggerKind
end
module LanguageServer::Protocol::Constant::SymbolKind
end
module LanguageServer::Protocol::Constant::SymbolTag
end
module LanguageServer::Protocol::Constant::TextDocumentSaveReason
end
module LanguageServer::Protocol::Constant::TextDocumentSyncKind
end
module LanguageServer::Protocol::Constant::TokenFormat
end
module LanguageServer::Protocol::Constant::UniquenessLevel
end
module LanguageServer::Protocol::Constant::WatchKind
end
module LanguageServer::Protocol::Interface
end
class LanguageServer::Protocol::Interface::AnnotatedTextEdit
  def annotation_id; end
  def attributes; end
  def initialize(range:, new_text:, annotation_id:); end
  def new_text; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ApplyWorkspaceEditParams
  def attributes; end
  def edit; end
  def initialize(edit:, label: nil); end
  def label; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ApplyWorkspaceEditResult
  def applied; end
  def attributes; end
  def failed_change; end
  def failure_reason; end
  def initialize(applied:, failure_reason: nil, failed_change: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CallHierarchyClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CallHierarchyIncomingCall
  def attributes; end
  def from; end
  def from_ranges; end
  def initialize(from:, from_ranges:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CallHierarchyIncomingCallsParams
  def attributes; end
  def initialize(item:, work_done_token: nil, partial_result_token: nil); end
  def item; end
  def partial_result_token; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::CallHierarchyItem
  def attributes; end
  def data; end
  def detail; end
  def initialize(name:, kind:, uri:, range:, selection_range:, tags: nil, detail: nil, data: nil); end
  def kind; end
  def name; end
  def range; end
  def selection_range; end
  def tags; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::CallHierarchyOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::CallHierarchyOutgoingCall
  def attributes; end
  def from_ranges; end
  def initialize(to:, from_ranges:); end
  def to; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CallHierarchyOutgoingCallsParams
  def attributes; end
  def initialize(item:, work_done_token: nil, partial_result_token: nil); end
  def item; end
  def partial_result_token; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::CallHierarchyPrepareParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil); end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::CallHierarchyRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::CancelParams
  def attributes; end
  def id; end
  def initialize(id:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ChangeAnnotation
  def attributes; end
  def description; end
  def initialize(label:, needs_confirmation: nil, description: nil); end
  def label; end
  def needs_confirmation; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ClientCapabilities
  def attributes; end
  def experimental; end
  def general; end
  def initialize(workspace: nil, text_document: nil, notebook_document: nil, window: nil, general: nil, experimental: nil); end
  def notebook_document; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def window; end
  def workspace; end
end
class LanguageServer::Protocol::Interface::CodeAction
  def attributes; end
  def command; end
  def data; end
  def diagnostics; end
  def disabled; end
  def edit; end
  def initialize(title:, kind: nil, diagnostics: nil, is_preferred: nil, disabled: nil, edit: nil, command: nil, data: nil); end
  def is_preferred; end
  def kind; end
  def title; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CodeActionClientCapabilities
  def attributes; end
  def code_action_literal_support; end
  def data_support; end
  def disabled_support; end
  def dynamic_registration; end
  def honors_change_annotations; end
  def initialize(dynamic_registration: nil, code_action_literal_support: nil, is_preferred_support: nil, disabled_support: nil, data_support: nil, resolve_support: nil, honors_change_annotations: nil); end
  def is_preferred_support; end
  def resolve_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CodeActionContext
  def attributes; end
  def diagnostics; end
  def initialize(diagnostics:, only: nil, trigger_kind: nil); end
  def only; end
  def to_hash; end
  def to_json(*args); end
  def trigger_kind; end
end
class LanguageServer::Protocol::Interface::CodeActionOptions
  def attributes; end
  def code_action_kinds; end
  def initialize(work_done_progress: nil, code_action_kinds: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::CodeActionParams
  def attributes; end
  def context; end
  def initialize(text_document:, range:, context:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::CodeActionRegistrationOptions
  def attributes; end
  def code_action_kinds; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil, code_action_kinds: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::CodeDescription
  def attributes; end
  def href; end
  def initialize(href:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CodeLens
  def attributes; end
  def command; end
  def data; end
  def initialize(range:, command: nil, data: nil); end
  def range; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CodeLensClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CodeLensOptions
  def attributes; end
  def initialize(work_done_progress: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::CodeLensParams
  def attributes; end
  def initialize(text_document:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::CodeLensRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::CodeLensWorkspaceClientCapabilities
  def attributes; end
  def initialize(refresh_support: nil); end
  def refresh_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::Color
  def alpha; end
  def attributes; end
  def blue; end
  def green; end
  def initialize(red:, green:, blue:, alpha:); end
  def red; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ColorInformation
  def attributes; end
  def color; end
  def initialize(range:, color:); end
  def range; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ColorPresentation
  def additional_text_edits; end
  def attributes; end
  def initialize(label:, text_edit: nil, additional_text_edits: nil); end
  def label; end
  def text_edit; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ColorPresentationParams
  def attributes; end
  def color; end
  def initialize(text_document:, color:, range:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::Command
  def arguments; end
  def attributes; end
  def command; end
  def initialize(title:, command:, arguments: nil); end
  def title; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CompletionClientCapabilities
  def attributes; end
  def completion_item; end
  def completion_item_kind; end
  def completion_list; end
  def context_support; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, completion_item: nil, completion_item_kind: nil, context_support: nil, insert_text_mode: nil, completion_list: nil); end
  def insert_text_mode; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CompletionContext
  def attributes; end
  def initialize(trigger_kind:, trigger_character: nil); end
  def to_hash; end
  def to_json(*args); end
  def trigger_character; end
  def trigger_kind; end
end
class LanguageServer::Protocol::Interface::CompletionItem
  def additional_text_edits; end
  def attributes; end
  def command; end
  def commit_characters; end
  def data; end
  def deprecated; end
  def detail; end
  def documentation; end
  def filter_text; end
  def initialize(label:, label_details: nil, kind: nil, tags: nil, detail: nil, documentation: nil, deprecated: nil, preselect: nil, sort_text: nil, filter_text: nil, insert_text: nil, insert_text_format: nil, insert_text_mode: nil, text_edit: nil, text_edit_text: nil, additional_text_edits: nil, commit_characters: nil, command: nil, data: nil); end
  def insert_text; end
  def insert_text_format; end
  def insert_text_mode; end
  def kind; end
  def label; end
  def label_details; end
  def preselect; end
  def sort_text; end
  def tags; end
  def text_edit; end
  def text_edit_text; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CompletionItemLabelDetails
  def attributes; end
  def description; end
  def detail; end
  def initialize(detail: nil, description: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CompletionList
  def attributes; end
  def initialize(is_incomplete:, items:, item_defaults: nil); end
  def is_incomplete; end
  def item_defaults; end
  def items; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CompletionOptions
  def all_commit_characters; end
  def attributes; end
  def completion_item; end
  def initialize(work_done_progress: nil, trigger_characters: nil, all_commit_characters: nil, resolve_provider: nil, completion_item: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def trigger_characters; end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::CompletionParams
  def attributes; end
  def context; end
  def initialize(text_document:, position:, work_done_token: nil, partial_result_token: nil, context: nil); end
  def partial_result_token; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::CompletionRegistrationOptions
  def all_commit_characters; end
  def attributes; end
  def completion_item; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil, trigger_characters: nil, all_commit_characters: nil, resolve_provider: nil, completion_item: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def trigger_characters; end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::ConfigurationItem
  def attributes; end
  def initialize(scope_uri: nil, section: nil); end
  def scope_uri; end
  def section; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ConfigurationParams
  def attributes; end
  def initialize(items:); end
  def items; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CreateFile
  def annotation_id; end
  def attributes; end
  def initialize(kind:, uri:, options: nil, annotation_id: nil); end
  def kind; end
  def options; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::CreateFileOptions
  def attributes; end
  def ignore_if_exists; end
  def initialize(overwrite: nil, ignore_if_exists: nil); end
  def overwrite; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::CreateFilesParams
  def attributes; end
  def files; end
  def initialize(files:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DeclarationClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, link_support: nil); end
  def link_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DeclarationOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DeclarationParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DeclarationRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DefinitionClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, link_support: nil); end
  def link_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DefinitionOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DefinitionParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DefinitionRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DeleteFile
  def annotation_id; end
  def attributes; end
  def initialize(kind:, uri:, options: nil, annotation_id: nil); end
  def kind; end
  def options; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::DeleteFileOptions
  def attributes; end
  def ignore_if_not_exists; end
  def initialize(recursive: nil, ignore_if_not_exists: nil); end
  def recursive; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DeleteFilesParams
  def attributes; end
  def files; end
  def initialize(files:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::Diagnostic
  def attributes; end
  def code; end
  def code_description; end
  def data; end
  def initialize(range:, message:, severity: nil, code: nil, code_description: nil, source: nil, tags: nil, related_information: nil, data: nil); end
  def message; end
  def range; end
  def related_information; end
  def severity; end
  def source; end
  def tags; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DiagnosticClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, related_document_support: nil); end
  def related_document_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DiagnosticOptions
  def attributes; end
  def identifier; end
  def initialize(inter_file_dependencies:, workspace_diagnostics:, work_done_progress: nil, identifier: nil); end
  def inter_file_dependencies; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
  def workspace_diagnostics; end
end
class LanguageServer::Protocol::Interface::DiagnosticRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def identifier; end
  def initialize(document_selector:, inter_file_dependencies:, workspace_diagnostics:, work_done_progress: nil, identifier: nil, id: nil); end
  def inter_file_dependencies; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
  def workspace_diagnostics; end
end
class LanguageServer::Protocol::Interface::DiagnosticRelatedInformation
  def attributes; end
  def initialize(location:, message:); end
  def location; end
  def message; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DiagnosticServerCancellationData
  def attributes; end
  def initialize(retrigger_request:); end
  def retrigger_request; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DiagnosticWorkspaceClientCapabilities
  def attributes; end
  def initialize(refresh_support: nil); end
  def refresh_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidChangeConfigurationClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidChangeConfigurationParams
  def attributes; end
  def initialize(settings:); end
  def settings; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidChangeNotebookDocumentParams
  def attributes; end
  def change; end
  def initialize(notebook_document:, change:); end
  def notebook_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidChangeTextDocumentParams
  def attributes; end
  def content_changes; end
  def initialize(text_document:, content_changes:); end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidChangeWatchedFilesClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, relative_pattern_support: nil); end
  def relative_pattern_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidChangeWatchedFilesParams
  def attributes; end
  def changes; end
  def initialize(changes:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidChangeWatchedFilesRegistrationOptions
  def attributes; end
  def initialize(watchers:); end
  def to_hash; end
  def to_json(*args); end
  def watchers; end
end
class LanguageServer::Protocol::Interface::DidChangeWorkspaceFoldersParams
  def attributes; end
  def event; end
  def initialize(event:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidCloseNotebookDocumentParams
  def attributes; end
  def cell_text_documents; end
  def initialize(notebook_document:, cell_text_documents:); end
  def notebook_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidCloseTextDocumentParams
  def attributes; end
  def initialize(text_document:); end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidOpenNotebookDocumentParams
  def attributes; end
  def cell_text_documents; end
  def initialize(notebook_document:, cell_text_documents:); end
  def notebook_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidOpenTextDocumentParams
  def attributes; end
  def initialize(text_document:); end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidSaveNotebookDocumentParams
  def attributes; end
  def initialize(notebook_document:); end
  def notebook_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DidSaveTextDocumentParams
  def attributes; end
  def initialize(text_document:, text: nil); end
  def text; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentColorClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentColorOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentColorParams
  def attributes; end
  def initialize(text_document:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DocumentColorRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, id: nil, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentDiagnosticParams
  def attributes; end
  def identifier; end
  def initialize(text_document:, work_done_token: nil, partial_result_token: nil, identifier: nil, previous_result_id: nil); end
  def partial_result_token; end
  def previous_result_id; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DocumentDiagnosticReportPartialResult
  def attributes; end
  def initialize(related_documents:); end
  def related_documents; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentFilter
  def attributes; end
  def initialize(language: nil, scheme: nil, pattern: nil); end
  def language; end
  def pattern; end
  def scheme; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentFormattingClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentFormattingOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentFormattingParams
  def attributes; end
  def initialize(text_document:, options:, work_done_token: nil); end
  def options; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DocumentFormattingRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentHighlight
  def attributes; end
  def initialize(range:, kind: nil); end
  def kind; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentHighlightClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentHighlightOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentHighlightParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DocumentHighlightRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentLink
  def attributes; end
  def data; end
  def initialize(range:, target: nil, tooltip: nil, data: nil); end
  def range; end
  def target; end
  def to_hash; end
  def to_json(*args); end
  def tooltip; end
end
class LanguageServer::Protocol::Interface::DocumentLinkClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, tooltip_support: nil); end
  def to_hash; end
  def to_json(*args); end
  def tooltip_support; end
end
class LanguageServer::Protocol::Interface::DocumentLinkOptions
  def attributes; end
  def initialize(work_done_progress: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentLinkParams
  def attributes; end
  def initialize(text_document:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DocumentLinkRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingOptions
  def attributes; end
  def first_trigger_character; end
  def initialize(first_trigger_character:, more_trigger_character: nil); end
  def more_trigger_character; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingParams
  def attributes; end
  def ch; end
  def initialize(text_document:, position:, ch:, options:); end
  def options; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingRegistrationOptions
  def attributes; end
  def document_selector; end
  def first_trigger_character; end
  def initialize(document_selector:, first_trigger_character:, more_trigger_character: nil); end
  def more_trigger_character; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentRangeFormattingClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentRangeFormattingOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentRangeFormattingParams
  def attributes; end
  def initialize(text_document:, range:, options:, work_done_token: nil); end
  def options; end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DocumentRangeFormattingRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentSymbol
  def attributes; end
  def children; end
  def deprecated; end
  def detail; end
  def initialize(name:, kind:, range:, selection_range:, detail: nil, tags: nil, deprecated: nil, children: nil); end
  def kind; end
  def name; end
  def range; end
  def selection_range; end
  def tags; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentSymbolClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def hierarchical_document_symbol_support; end
  def initialize(dynamic_registration: nil, symbol_kind: nil, hierarchical_document_symbol_support: nil, tag_support: nil, label_support: nil); end
  def label_support; end
  def symbol_kind; end
  def tag_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::DocumentSymbolOptions
  def attributes; end
  def initialize(work_done_progress: nil, label: nil); end
  def label; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::DocumentSymbolParams
  def attributes; end
  def initialize(text_document:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::DocumentSymbolRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil, label: nil); end
  def label; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::ExecuteCommandClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ExecuteCommandOptions
  def attributes; end
  def commands; end
  def initialize(commands:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::ExecuteCommandParams
  def arguments; end
  def attributes; end
  def command; end
  def initialize(command:, work_done_token: nil, arguments: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::ExecuteCommandRegistrationOptions
  def attributes; end
  def commands; end
  def initialize(commands:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::ExecutionSummary
  def attributes; end
  def execution_order; end
  def initialize(execution_order:, success: nil); end
  def success; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FileCreate
  def attributes; end
  def initialize(uri:); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::FileDelete
  def attributes; end
  def initialize(uri:); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::FileEvent
  def attributes; end
  def initialize(uri:, type:); end
  def to_hash; end
  def to_json(*args); end
  def type; end
  def uri; end
end
class LanguageServer::Protocol::Interface::FileOperationFilter
  def attributes; end
  def initialize(pattern:, scheme: nil); end
  def pattern; end
  def scheme; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FileOperationPattern
  def attributes; end
  def glob; end
  def initialize(glob:, matches: nil, options: nil); end
  def matches; end
  def options; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FileOperationPatternOptions
  def attributes; end
  def ignore_case; end
  def initialize(ignore_case: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FileOperationRegistrationOptions
  def attributes; end
  def filters; end
  def initialize(filters:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FileRename
  def attributes; end
  def initialize(old_uri:, new_uri:); end
  def new_uri; end
  def old_uri; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FileSystemWatcher
  def attributes; end
  def glob_pattern; end
  def initialize(glob_pattern:, kind: nil); end
  def kind; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FoldingRange
  def attributes; end
  def collapsed_text; end
  def end_character; end
  def end_line; end
  def initialize(start_line:, end_line:, start_character: nil, end_character: nil, kind: nil, collapsed_text: nil); end
  def kind; end
  def start_character; end
  def start_line; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FoldingRangeClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def folding_range; end
  def folding_range_kind; end
  def initialize(dynamic_registration: nil, range_limit: nil, line_folding_only: nil, folding_range_kind: nil, folding_range: nil); end
  def line_folding_only; end
  def range_limit; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::FoldingRangeOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::FoldingRangeParams
  def attributes; end
  def initialize(text_document:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::FoldingRangeRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::FormattingOptions
  def attributes; end
  def initialize(tab_size:, insert_spaces:, trim_trailing_whitespace: nil, insert_final_newline: nil, trim_final_newlines: nil); end
  def insert_final_newline; end
  def insert_spaces; end
  def tab_size; end
  def to_hash; end
  def to_json(*args); end
  def trim_final_newlines; end
  def trim_trailing_whitespace; end
end
class LanguageServer::Protocol::Interface::FullDocumentDiagnosticReport
  def attributes; end
  def initialize(kind:, items:, result_id: nil); end
  def items; end
  def kind; end
  def result_id; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::Hover
  def attributes; end
  def contents; end
  def initialize(contents:, range: nil); end
  def range; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::HoverClientCapabilities
  def attributes; end
  def content_format; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, content_format: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::HoverOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::HoverParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil); end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::HoverRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::HoverResult
  def attributes; end
  def initialize(value:); end
  def to_hash; end
  def to_json(*args); end
  def value; end
end
class LanguageServer::Protocol::Interface::ImplementationClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, link_support: nil); end
  def link_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ImplementationOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::ImplementationParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::ImplementationRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::InitializeError
  def attributes; end
  def initialize(retry:); end
  def retry; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InitializeParams
  def attributes; end
  def capabilities; end
  def client_info; end
  def initialization_options; end
  def initialize(process_id:, root_uri:, capabilities:, work_done_token: nil, client_info: nil, locale: nil, root_path: nil, initialization_options: nil, trace: nil, workspace_folders: nil); end
  def locale; end
  def process_id; end
  def root_path; end
  def root_uri; end
  def to_hash; end
  def to_json(*args); end
  def trace; end
  def work_done_token; end
  def workspace_folders; end
end
class LanguageServer::Protocol::Interface::InitializeResult
  def attributes; end
  def capabilities; end
  def initialize(capabilities:, server_info: nil); end
  def server_info; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InitializedParams
  def attributes; end
  def initialize; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InlayHint
  def attributes; end
  def data; end
  def initialize(position:, label:, kind: nil, text_edits: nil, tooltip: nil, padding_left: nil, padding_right: nil, data: nil); end
  def kind; end
  def label; end
  def padding_left; end
  def padding_right; end
  def position; end
  def text_edits; end
  def to_hash; end
  def to_json(*args); end
  def tooltip; end
end
class LanguageServer::Protocol::Interface::InlayHintClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, resolve_support: nil); end
  def resolve_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InlayHintLabelPart
  def attributes; end
  def command; end
  def initialize(value:, tooltip: nil, location: nil, command: nil); end
  def location; end
  def to_hash; end
  def to_json(*args); end
  def tooltip; end
  def value; end
end
class LanguageServer::Protocol::Interface::InlayHintOptions
  def attributes; end
  def initialize(work_done_progress: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::InlayHintParams
  def attributes; end
  def initialize(text_document:, range:, work_done_token: nil); end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::InlayHintRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, resolve_provider: nil, id: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::InlayHintWorkspaceClientCapabilities
  def attributes; end
  def initialize(refresh_support: nil); end
  def refresh_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InlineValueClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InlineValueContext
  def attributes; end
  def frame_id; end
  def initialize(frame_id:, stopped_location:); end
  def stopped_location; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InlineValueEvaluatableExpression
  def attributes; end
  def expression; end
  def initialize(range:, expression: nil); end
  def range; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InlineValueOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::InlineValueParams
  def attributes; end
  def context; end
  def initialize(text_document:, range:, context:, work_done_token: nil); end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::InlineValueRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::InlineValueText
  def attributes; end
  def initialize(range:, text:); end
  def range; end
  def text; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InlineValueVariableLookup
  def attributes; end
  def case_sensitive_lookup; end
  def initialize(range:, case_sensitive_lookup:, variable_name: nil); end
  def range; end
  def to_hash; end
  def to_json(*args); end
  def variable_name; end
end
class LanguageServer::Protocol::Interface::InlineValueWorkspaceClientCapabilities
  def attributes; end
  def initialize(refresh_support: nil); end
  def refresh_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::InsertReplaceEdit
  def attributes; end
  def initialize(new_text:, insert:, replace:); end
  def insert; end
  def new_text; end
  def replace; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::LinkedEditingRangeClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::LinkedEditingRangeOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::LinkedEditingRangeParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil); end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::LinkedEditingRangeRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::LinkedEditingRanges
  def attributes; end
  def initialize(ranges:, word_pattern: nil); end
  def ranges; end
  def to_hash; end
  def to_json(*args); end
  def word_pattern; end
end
class LanguageServer::Protocol::Interface::Location
  def attributes; end
  def initialize(uri:, range:); end
  def range; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::LocationLink
  def attributes; end
  def initialize(target_uri:, target_range:, target_selection_range:, origin_selection_range: nil); end
  def origin_selection_range; end
  def target_range; end
  def target_selection_range; end
  def target_uri; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::LogMessageParams
  def attributes; end
  def initialize(type:, message:); end
  def message; end
  def to_hash; end
  def to_json(*args); end
  def type; end
end
class LanguageServer::Protocol::Interface::LogTraceParams
  def attributes; end
  def initialize(message:, verbose: nil); end
  def message; end
  def to_hash; end
  def to_json(*args); end
  def verbose; end
end
class LanguageServer::Protocol::Interface::MarkupContent
  def attributes; end
  def initialize(kind:, value:); end
  def kind; end
  def to_hash; end
  def to_json(*args); end
  def value; end
end
class LanguageServer::Protocol::Interface::Message
  def attributes; end
  def initialize(jsonrpc:); end
  def jsonrpc; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::MessageActionItem
  def attributes; end
  def initialize(title:); end
  def title; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::Moniker
  def attributes; end
  def identifier; end
  def initialize(scheme:, identifier:, unique:, kind: nil); end
  def kind; end
  def scheme; end
  def to_hash; end
  def to_json(*args); end
  def unique; end
end
class LanguageServer::Protocol::Interface::MonikerClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::MonikerOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::MonikerParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::MonikerRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::NotebookCell
  def attributes; end
  def document; end
  def execution_summary; end
  def initialize(kind:, document:, metadata: nil, execution_summary: nil); end
  def kind; end
  def metadata; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotebookCellArrayChange
  def attributes; end
  def cells; end
  def delete_count; end
  def initialize(start:, delete_count:, cells: nil); end
  def start; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotebookCellTextDocumentFilter
  def attributes; end
  def initialize(notebook:, language: nil); end
  def language; end
  def notebook; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotebookDocument
  def attributes; end
  def cells; end
  def initialize(uri:, notebook_type:, version:, cells:, metadata: nil); end
  def metadata; end
  def notebook_type; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end
class LanguageServer::Protocol::Interface::NotebookDocumentChangeEvent
  def attributes; end
  def cells; end
  def initialize(metadata: nil, cells: nil); end
  def metadata; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotebookDocumentClientCapabilities
  def attributes; end
  def initialize(synchronization:); end
  def synchronization; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotebookDocumentFilter
  def attributes; end
  def initialize(notebook_type: nil, scheme: nil, pattern: nil); end
  def notebook_type; end
  def pattern; end
  def scheme; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotebookDocumentIdentifier
  def attributes; end
  def initialize(uri:); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::NotebookDocumentSyncClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def execution_summary_support; end
  def initialize(dynamic_registration: nil, execution_summary_support: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotebookDocumentSyncOptions
  def attributes; end
  def initialize(notebook_selector:, save: nil); end
  def notebook_selector; end
  def save; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotebookDocumentSyncRegistrationOptions
  def attributes; end
  def id; end
  def initialize(notebook_selector:, save: nil, id: nil); end
  def notebook_selector; end
  def save; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::NotificationMessage
  def attributes; end
  def initialize(jsonrpc:, method:, params: nil); end
  def jsonrpc; end
  def method; end
  def params; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::OptionalVersionedTextDocumentIdentifier
  def attributes; end
  def initialize(uri:, version:); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end
class LanguageServer::Protocol::Interface::ParameterInformation
  def attributes; end
  def documentation; end
  def initialize(label:, documentation: nil); end
  def label; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::PartialResultParams
  def attributes; end
  def initialize(partial_result_token: nil); end
  def partial_result_token; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::Position
  def attributes; end
  def character; end
  def initialize(line:, character:); end
  def line; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::PrepareRenameParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil); end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::PreviousResultId
  def attributes; end
  def initialize(uri:, value:); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def value; end
end
class LanguageServer::Protocol::Interface::ProgressParams
  def attributes; end
  def initialize(token:, value:); end
  def to_hash; end
  def to_json(*args); end
  def token; end
  def value; end
end
class LanguageServer::Protocol::Interface::PublishDiagnosticsClientCapabilities
  def attributes; end
  def code_description_support; end
  def data_support; end
  def initialize(related_information: nil, tag_support: nil, version_support: nil, code_description_support: nil, data_support: nil); end
  def related_information; end
  def tag_support; end
  def to_hash; end
  def to_json(*args); end
  def version_support; end
end
class LanguageServer::Protocol::Interface::PublishDiagnosticsParams
  def attributes; end
  def diagnostics; end
  def initialize(uri:, diagnostics:, version: nil); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end
class LanguageServer::Protocol::Interface::Range
  def attributes; end
  def end; end
  def initialize(start:, end:); end
  def start; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ReferenceClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ReferenceContext
  def attributes; end
  def include_declaration; end
  def initialize(include_declaration:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ReferenceOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::ReferenceParams
  def attributes; end
  def context; end
  def initialize(text_document:, position:, context:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::ReferenceRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::Registration
  def attributes; end
  def id; end
  def initialize(id:, method:, register_options: nil); end
  def method; end
  def register_options; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RegistrationParams
  def attributes; end
  def initialize(registrations:); end
  def registrations; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RegularExpressionsClientCapabilities
  def attributes; end
  def engine; end
  def initialize(engine:, version: nil); end
  def to_hash; end
  def to_json(*args); end
  def version; end
end
class LanguageServer::Protocol::Interface::RelatedFullDocumentDiagnosticReport
  def attributes; end
  def initialize(kind:, items:, result_id: nil, related_documents: nil); end
  def items; end
  def kind; end
  def related_documents; end
  def result_id; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RelatedUnchangedDocumentDiagnosticReport
  def attributes; end
  def initialize(kind:, result_id:, related_documents: nil); end
  def kind; end
  def related_documents; end
  def result_id; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RelativePattern
  def attributes; end
  def base_uri; end
  def initialize(base_uri:, pattern:); end
  def pattern; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RenameClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def honors_change_annotations; end
  def initialize(dynamic_registration: nil, prepare_support: nil, prepare_support_default_behavior: nil, honors_change_annotations: nil); end
  def prepare_support; end
  def prepare_support_default_behavior; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RenameFile
  def annotation_id; end
  def attributes; end
  def initialize(kind:, old_uri:, new_uri:, options: nil, annotation_id: nil); end
  def kind; end
  def new_uri; end
  def old_uri; end
  def options; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RenameFileOptions
  def attributes; end
  def ignore_if_exists; end
  def initialize(overwrite: nil, ignore_if_exists: nil); end
  def overwrite; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RenameFilesParams
  def attributes; end
  def files; end
  def initialize(files:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::RenameOptions
  def attributes; end
  def initialize(work_done_progress: nil, prepare_provider: nil); end
  def prepare_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::RenameParams
  def attributes; end
  def initialize(text_document:, position:, new_name:, work_done_token: nil); end
  def new_name; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::RenameRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil, prepare_provider: nil); end
  def prepare_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::RequestMessage
  def attributes; end
  def id; end
  def initialize(jsonrpc:, id:, method:, params: nil); end
  def jsonrpc; end
  def method; end
  def params; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ResponseError
  def attributes; end
  def code; end
  def data; end
  def initialize(code:, message:, data: nil); end
  def message; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ResponseMessage
  def attributes; end
  def error; end
  def id; end
  def initialize(jsonrpc:, id:, result: nil, error: nil); end
  def jsonrpc; end
  def result; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SaveOptions
  def attributes; end
  def include_text; end
  def initialize(include_text: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SelectionRange
  def attributes; end
  def initialize(range:, parent: nil); end
  def parent; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SelectionRangeClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SelectionRangeOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::SelectionRangeParams
  def attributes; end
  def initialize(text_document:, positions:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def positions; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::SelectionRangeRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::SemanticTokens
  def attributes; end
  def data; end
  def initialize(data:, result_id: nil); end
  def result_id; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SemanticTokensClientCapabilities
  def attributes; end
  def augments_syntax_tokens; end
  def dynamic_registration; end
  def formats; end
  def initialize(requests:, token_types:, token_modifiers:, formats:, dynamic_registration: nil, overlapping_token_support: nil, multiline_token_support: nil, server_cancel_support: nil, augments_syntax_tokens: nil); end
  def multiline_token_support; end
  def overlapping_token_support; end
  def requests; end
  def server_cancel_support; end
  def to_hash; end
  def to_json(*args); end
  def token_modifiers; end
  def token_types; end
end
class LanguageServer::Protocol::Interface::SemanticTokensDelta
  def attributes; end
  def edits; end
  def initialize(edits:, result_id: nil); end
  def result_id; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SemanticTokensDeltaParams
  def attributes; end
  def initialize(text_document:, previous_result_id:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def previous_result_id; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::SemanticTokensDeltaPartialResult
  def attributes; end
  def edits; end
  def initialize(edits:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SemanticTokensEdit
  def attributes; end
  def data; end
  def delete_count; end
  def initialize(start:, delete_count:, data: nil); end
  def start; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SemanticTokensLegend
  def attributes; end
  def initialize(token_types:, token_modifiers:); end
  def to_hash; end
  def to_json(*args); end
  def token_modifiers; end
  def token_types; end
end
class LanguageServer::Protocol::Interface::SemanticTokensOptions
  def attributes; end
  def full; end
  def initialize(legend:, work_done_progress: nil, range: nil, full: nil); end
  def legend; end
  def range; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::SemanticTokensParams
  def attributes; end
  def initialize(text_document:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::SemanticTokensPartialResult
  def attributes; end
  def data; end
  def initialize(data:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SemanticTokensRangeParams
  def attributes; end
  def initialize(text_document:, range:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::SemanticTokensRegistrationOptions
  def attributes; end
  def document_selector; end
  def full; end
  def id; end
  def initialize(document_selector:, legend:, work_done_progress: nil, range: nil, full: nil, id: nil); end
  def legend; end
  def range; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::SemanticTokensWorkspaceClientCapabilities
  def attributes; end
  def initialize(refresh_support: nil); end
  def refresh_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ServerCapabilities
  def attributes; end
  def call_hierarchy_provider; end
  def code_action_provider; end
  def code_lens_provider; end
  def color_provider; end
  def completion_provider; end
  def declaration_provider; end
  def definition_provider; end
  def diagnostic_provider; end
  def document_formatting_provider; end
  def document_highlight_provider; end
  def document_link_provider; end
  def document_on_type_formatting_provider; end
  def document_range_formatting_provider; end
  def document_symbol_provider; end
  def execute_command_provider; end
  def experimental; end
  def folding_range_provider; end
  def hover_provider; end
  def implementation_provider; end
  def initialize(position_encoding: nil, text_document_sync: nil, notebook_document_sync: nil, completion_provider: nil, hover_provider: nil, signature_help_provider: nil, declaration_provider: nil, definition_provider: nil, type_definition_provider: nil, implementation_provider: nil, references_provider: nil, document_highlight_provider: nil, document_symbol_provider: nil, code_action_provider: nil, code_lens_provider: nil, document_link_provider: nil, color_provider: nil, document_formatting_provider: nil, document_range_formatting_provider: nil, document_on_type_formatting_provider: nil, rename_provider: nil, folding_range_provider: nil, execute_command_provider: nil, selection_range_provider: nil, linked_editing_range_provider: nil, call_hierarchy_provider: nil, semantic_tokens_provider: nil, moniker_provider: nil, type_hierarchy_provider: nil, inline_value_provider: nil, inlay_hint_provider: nil, diagnostic_provider: nil, workspace_symbol_provider: nil, workspace: nil, experimental: nil); end
  def inlay_hint_provider; end
  def inline_value_provider; end
  def linked_editing_range_provider; end
  def moniker_provider; end
  def notebook_document_sync; end
  def position_encoding; end
  def references_provider; end
  def rename_provider; end
  def selection_range_provider; end
  def semantic_tokens_provider; end
  def signature_help_provider; end
  def text_document_sync; end
  def to_hash; end
  def to_json(*args); end
  def type_definition_provider; end
  def type_hierarchy_provider; end
  def workspace; end
  def workspace_symbol_provider; end
end
class LanguageServer::Protocol::Interface::SetTraceParams
  def attributes; end
  def initialize(value:); end
  def to_hash; end
  def to_json(*args); end
  def value; end
end
class LanguageServer::Protocol::Interface::ShowDocumentClientCapabilities
  def attributes; end
  def initialize(support:); end
  def support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ShowDocumentParams
  def attributes; end
  def external; end
  def initialize(uri:, external: nil, take_focus: nil, selection: nil); end
  def selection; end
  def take_focus; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::ShowDocumentResult
  def attributes; end
  def initialize(success:); end
  def success; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ShowMessageParams
  def attributes; end
  def initialize(type:, message:); end
  def message; end
  def to_hash; end
  def to_json(*args); end
  def type; end
end
class LanguageServer::Protocol::Interface::ShowMessageRequestClientCapabilities
  def attributes; end
  def initialize(message_action_item: nil); end
  def message_action_item; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::ShowMessageRequestParams
  def actions; end
  def attributes; end
  def initialize(type:, message:, actions: nil); end
  def message; end
  def to_hash; end
  def to_json(*args); end
  def type; end
end
class LanguageServer::Protocol::Interface::SignatureHelp
  def active_parameter; end
  def active_signature; end
  def attributes; end
  def initialize(signatures:, active_signature: nil, active_parameter: nil); end
  def signatures; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SignatureHelpClientCapabilities
  def attributes; end
  def context_support; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, signature_information: nil, context_support: nil); end
  def signature_information; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SignatureHelpContext
  def active_signature_help; end
  def attributes; end
  def initialize(trigger_kind:, is_retrigger:, trigger_character: nil, active_signature_help: nil); end
  def is_retrigger; end
  def to_hash; end
  def to_json(*args); end
  def trigger_character; end
  def trigger_kind; end
end
class LanguageServer::Protocol::Interface::SignatureHelpOptions
  def attributes; end
  def initialize(work_done_progress: nil, trigger_characters: nil, retrigger_characters: nil); end
  def retrigger_characters; end
  def to_hash; end
  def to_json(*args); end
  def trigger_characters; end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::SignatureHelpParams
  def attributes; end
  def context; end
  def initialize(text_document:, position:, work_done_token: nil, context: nil); end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::SignatureHelpRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, work_done_progress: nil, trigger_characters: nil, retrigger_characters: nil); end
  def retrigger_characters; end
  def to_hash; end
  def to_json(*args); end
  def trigger_characters; end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::SignatureInformation
  def active_parameter; end
  def attributes; end
  def documentation; end
  def initialize(label:, documentation: nil, parameters: nil, active_parameter: nil); end
  def label; end
  def parameters; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::StaticRegistrationOptions
  def attributes; end
  def id; end
  def initialize(id: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::SymbolInformation
  def attributes; end
  def container_name; end
  def deprecated; end
  def initialize(name:, kind:, location:, tags: nil, deprecated: nil, container_name: nil); end
  def kind; end
  def location; end
  def name; end
  def tags; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TextDocumentChangeRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:, sync_kind:); end
  def sync_kind; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TextDocumentClientCapabilities
  def attributes; end
  def call_hierarchy; end
  def code_action; end
  def code_lens; end
  def color_provider; end
  def completion; end
  def declaration; end
  def definition; end
  def diagnostic; end
  def document_highlight; end
  def document_link; end
  def document_symbol; end
  def folding_range; end
  def formatting; end
  def hover; end
  def implementation; end
  def initialize(synchronization: nil, completion: nil, hover: nil, signature_help: nil, declaration: nil, definition: nil, type_definition: nil, implementation: nil, references: nil, document_highlight: nil, document_symbol: nil, code_action: nil, code_lens: nil, document_link: nil, color_provider: nil, formatting: nil, range_formatting: nil, on_type_formatting: nil, rename: nil, publish_diagnostics: nil, folding_range: nil, selection_range: nil, linked_editing_range: nil, call_hierarchy: nil, semantic_tokens: nil, moniker: nil, type_hierarchy: nil, inline_value: nil, inlay_hint: nil, diagnostic: nil); end
  def inlay_hint; end
  def inline_value; end
  def linked_editing_range; end
  def moniker; end
  def on_type_formatting; end
  def publish_diagnostics; end
  def range_formatting; end
  def references; end
  def rename; end
  def selection_range; end
  def semantic_tokens; end
  def signature_help; end
  def synchronization; end
  def to_hash; end
  def to_json(*args); end
  def type_definition; end
  def type_hierarchy; end
end
class LanguageServer::Protocol::Interface::TextDocumentContentChangeEvent
  def attributes; end
  def initialize(text:, range: nil, range_length: nil); end
  def range; end
  def range_length; end
  def text; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TextDocumentEdit
  def attributes; end
  def edits; end
  def initialize(text_document:, edits:); end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TextDocumentIdentifier
  def attributes; end
  def initialize(uri:); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::TextDocumentItem
  def attributes; end
  def initialize(uri:, language_id:, version:, text:); end
  def language_id; end
  def text; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end
class LanguageServer::Protocol::Interface::TextDocumentPositionParams
  def attributes; end
  def initialize(text_document:, position:); end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TextDocumentRegistrationOptions
  def attributes; end
  def document_selector; end
  def initialize(document_selector:); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TextDocumentSaveRegistrationOptions
  def attributes; end
  def document_selector; end
  def include_text; end
  def initialize(document_selector:, include_text: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TextDocumentSyncClientCapabilities
  def attributes; end
  def did_save; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, will_save: nil, will_save_wait_until: nil, did_save: nil); end
  def to_hash; end
  def to_json(*args); end
  def will_save; end
  def will_save_wait_until; end
end
class LanguageServer::Protocol::Interface::TextDocumentSyncOptions
  def attributes; end
  def change; end
  def initialize(open_close: nil, change: nil, will_save: nil, will_save_wait_until: nil, save: nil); end
  def open_close; end
  def save; end
  def to_hash; end
  def to_json(*args); end
  def will_save; end
  def will_save_wait_until; end
end
class LanguageServer::Protocol::Interface::TextEdit
  def attributes; end
  def initialize(range:, new_text:); end
  def new_text; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TypeDefinitionClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, link_support: nil); end
  def link_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::TypeDefinitionOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::TypeDefinitionParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::TypeDefinitionRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::TypeHierarchyItem
  def attributes; end
  def data; end
  def detail; end
  def initialize(name:, kind:, uri:, range:, selection_range:, tags: nil, detail: nil, data: nil); end
  def kind; end
  def name; end
  def range; end
  def selection_range; end
  def tags; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::TypeHierarchyOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::TypeHierarchyPrepareParams
  def attributes; end
  def initialize(text_document:, position:, work_done_token: nil); end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::TypeHierarchyRegistrationOptions
  def attributes; end
  def document_selector; end
  def id; end
  def initialize(document_selector:, work_done_progress: nil, id: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::TypeHierarchySubtypesParams
  def attributes; end
  def initialize(item:, work_done_token: nil, partial_result_token: nil); end
  def item; end
  def partial_result_token; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::TypeHierarchySupertypesParams
  def attributes; end
  def initialize(item:, work_done_token: nil, partial_result_token: nil); end
  def item; end
  def partial_result_token; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::UnchangedDocumentDiagnosticReport
  def attributes; end
  def initialize(kind:, result_id:); end
  def kind; end
  def result_id; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::Unregistration
  def attributes; end
  def id; end
  def initialize(id:, method:); end
  def method; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::UnregistrationParams
  def attributes; end
  def initialize(unregisterations:); end
  def to_hash; end
  def to_json(*args); end
  def unregisterations; end
end
class LanguageServer::Protocol::Interface::VersionedNotebookDocumentIdentifier
  def attributes; end
  def initialize(version:, uri:); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end
class LanguageServer::Protocol::Interface::VersionedTextDocumentIdentifier
  def attributes; end
  def initialize(uri:, version:); end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end
class LanguageServer::Protocol::Interface::WillSaveTextDocumentParams
  def attributes; end
  def initialize(text_document:, reason:); end
  def reason; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkDoneProgressBegin
  def attributes; end
  def cancellable; end
  def initialize(kind:, title:, cancellable: nil, message: nil, percentage: nil); end
  def kind; end
  def message; end
  def percentage; end
  def title; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkDoneProgressCancelParams
  def attributes; end
  def initialize(token:); end
  def to_hash; end
  def to_json(*args); end
  def token; end
end
class LanguageServer::Protocol::Interface::WorkDoneProgressCreateParams
  def attributes; end
  def initialize(token:); end
  def to_hash; end
  def to_json(*args); end
  def token; end
end
class LanguageServer::Protocol::Interface::WorkDoneProgressEnd
  def attributes; end
  def initialize(kind:, message: nil); end
  def kind; end
  def message; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def attributes; end
  def initialize(work_done_progress: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def attributes; end
  def initialize(work_done_token: nil); end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::WorkDoneProgressReport
  def attributes; end
  def cancellable; end
  def initialize(kind:, cancellable: nil, message: nil, percentage: nil); end
  def kind; end
  def message; end
  def percentage; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceDiagnosticParams
  def attributes; end
  def identifier; end
  def initialize(previous_result_ids:, work_done_token: nil, partial_result_token: nil, identifier: nil); end
  def partial_result_token; end
  def previous_result_ids; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::WorkspaceDiagnosticReport
  def attributes; end
  def initialize(items:); end
  def items; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceDiagnosticReportPartialResult
  def attributes; end
  def initialize(items:); end
  def items; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceEdit
  def attributes; end
  def change_annotations; end
  def changes; end
  def document_changes; end
  def initialize(changes: nil, document_changes: nil, change_annotations: nil); end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceEditClientCapabilities
  def attributes; end
  def change_annotation_support; end
  def document_changes; end
  def failure_handling; end
  def initialize(document_changes: nil, resource_operations: nil, failure_handling: nil, normalizes_line_endings: nil, change_annotation_support: nil); end
  def normalizes_line_endings; end
  def resource_operations; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceFolder
  def attributes; end
  def initialize(uri:, name:); end
  def name; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end
class LanguageServer::Protocol::Interface::WorkspaceFoldersChangeEvent
  def added; end
  def attributes; end
  def initialize(added:, removed:); end
  def removed; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceFoldersServerCapabilities
  def attributes; end
  def change_notifications; end
  def initialize(supported: nil, change_notifications: nil); end
  def supported; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceFullDocumentDiagnosticReport
  def attributes; end
  def initialize(kind:, items:, uri:, version:, result_id: nil); end
  def items; end
  def kind; end
  def result_id; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end
class LanguageServer::Protocol::Interface::WorkspaceSymbol
  def attributes; end
  def container_name; end
  def data; end
  def initialize(name:, kind:, location:, tags: nil, container_name: nil, data: nil); end
  def kind; end
  def location; end
  def name; end
  def tags; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceSymbolClientCapabilities
  def attributes; end
  def dynamic_registration; end
  def initialize(dynamic_registration: nil, symbol_kind: nil, tag_support: nil, resolve_support: nil); end
  def resolve_support; end
  def symbol_kind; end
  def tag_support; end
  def to_hash; end
  def to_json(*args); end
end
class LanguageServer::Protocol::Interface::WorkspaceSymbolOptions
  def attributes; end
  def initialize(work_done_progress: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::WorkspaceSymbolParams
  def attributes; end
  def initialize(query:, work_done_token: nil, partial_result_token: nil); end
  def partial_result_token; end
  def query; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end
class LanguageServer::Protocol::Interface::WorkspaceSymbolRegistrationOptions
  def attributes; end
  def initialize(work_done_progress: nil, resolve_provider: nil); end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end
class LanguageServer::Protocol::Interface::WorkspaceUnchangedDocumentDiagnosticReport
  def attributes; end
  def initialize(kind:, result_id:, uri:, version:); end
  def kind; end
  def result_id; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end
module LanguageServer::Protocol::Transport
end
module LanguageServer::Protocol::Transport::Io
end
class LanguageServer::Protocol::Transport::Io::Reader
  def initialize(io); end
  def io; end
  def read(&block); end
end
class LanguageServer::Protocol::Transport::Io::Writer
  def initialize(io); end
  def io; end
  def write(response); end
end
module LanguageServer::Protocol::Transport::Stdio
end
class LanguageServer::Protocol::Transport::Stdio::Reader < LanguageServer::Protocol::Transport::Io::Reader
  def initialize; end
end
class LanguageServer::Protocol::Transport::Stdio::Writer < LanguageServer::Protocol::Transport::Io::Writer
  def initialize; end
end
