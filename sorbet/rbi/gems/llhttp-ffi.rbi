# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/llhttp-ffi/all/llhttp-ffi.rbi
#
# llhttp-ffi-0.5.0

module LLHttp
  def llhttp_errno_name(*arg0); end
  def llhttp_execute(*arg0); end
  def llhttp_finish(*arg0); end
  def llhttp_get_error_reason(*arg0); end
  def llhttp_reset(*arg0); end
  def llhttp_should_keep_alive(*arg0); end
  def rb_llhttp_content_length(*arg0); end
  def rb_llhttp_free(*arg0); end
  def rb_llhttp_http_major(*arg0); end
  def rb_llhttp_http_minor(*arg0); end
  def rb_llhttp_init(*arg0); end
  def rb_llhttp_method_name(*arg0); end
  def rb_llhttp_status_code(*arg0); end
  def self.llhttp_errno_name(*arg0); end
  def self.llhttp_execute(*arg0); end
  def self.llhttp_finish(*arg0); end
  def self.llhttp_get_error_reason(*arg0); end
  def self.llhttp_reset(*arg0); end
  def self.llhttp_should_keep_alive(*arg0); end
  def self.rb_llhttp_content_length(*arg0); end
  def self.rb_llhttp_free(*arg0); end
  def self.rb_llhttp_http_major(*arg0); end
  def self.rb_llhttp_http_minor(*arg0); end
  def self.rb_llhttp_init(*arg0); end
  def self.rb_llhttp_method_name(*arg0); end
  def self.rb_llhttp_status_code(*arg0); end
  def self.version; end
  extend FFI::Library
end
class LLHttp::Delegate
end
class LLHttp::Error < StandardError
end
class LLHttp::Parser
  def <<(data); end
  def build_error(errno); end
  def content_length; end
  def finish; end
  def http_major; end
  def http_minor; end
  def initialize(delegate, type: nil); end
  def keep_alive?; end
  def method_name; end
  def on_body(buffer, length); end
  def on_chunk_complete; end
  def on_chunk_header; end
  def on_header_field(buffer, length); end
  def on_header_field_complete; end
  def on_header_value(buffer, length); end
  def on_header_value_complete; end
  def on_headers_complete; end
  def on_message_begin; end
  def on_message_complete; end
  def on_status(buffer, length); end
  def on_status_complete; end
  def on_url(buffer, length); end
  def on_url_complete; end
  def parse(data); end
  def reset; end
  def self.free(pointer); end
  def status_code; end
  def type; end
end
class LLHttp::Callbacks < FFI::Struct
end
