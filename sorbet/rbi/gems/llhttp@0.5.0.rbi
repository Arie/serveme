# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `llhttp` gem.
# Please instead update this file by running `bin/tapioca gem llhttp`.


# source://llhttp//lib/llhttp.rb#3
module LLHttp
  class << self
    # [public] LLHttp's current version.
    #
    # source://llhttp//lib/llhttp/version.rb#8
    def version; end
  end
end

# [public] Delegate for handling callbacks. Subclass this object and implement necessary methods.
#
#   class Delegate < LLHttp::Delegate
#     def on_message_begin
#       ...
#     end
#
#     def on_url(url)
#       ...
#     end
#
#     def on_status(status)
#       ...
#     end
#
#     def on_header_field(field)
#       ...
#     end
#
#     def on_header_value(value)
#       ...
#     end
#
#     def on_headers_complete
#       ...
#     end
#
#     def on_body(body)
#       ...
#     end
#
#     def on_message_complete
#       ...
#     end
#
#     def on_chunk_header
#       ...
#     end
#
#     def on_chunk_complete
#       ...
#     end
#
#     def on_url_complete
#       ...
#     end
#
#     def on_status_complete
#       ...
#     end
#
#     def on_header_field_complete
#       ...
#     end
#
#     def on_header_value_complete
#       ...
#     end
#   end
#
# source://llhttp//lib/llhttp/delegate.rb#64
class LLHttp::Delegate
  private

  # source://llhttp//lib/llhttp/delegate.rb#89
  def internal_on_chunk_header; end

  # source://llhttp//lib/llhttp/delegate.rb#73
  def internal_on_headers_complete; end

  # source://llhttp//lib/llhttp/delegate.rb#65
  def internal_on_message_begin; end

  # source://llhttp//lib/llhttp/delegate.rb#81
  def internal_on_message_complete; end
end

# [public] LLHttp's standard error object.
#
# source://llhttp//lib/llhttp/error.rb#6
class LLHttp::Error < ::StandardError; end

# [public] Wraps an llhttp context for parsing http requests and responses.
#
#   class Delegate < LLHttp::Delegate
#     def on_message_begin
#       ...
#     end
#
#     ...
#   end
#
#   parser = LLHttp::Parser.new(Delegate.new, type: :request)
#   parser << "GET / HTTP/1.1\r\n\r\n"
#   parser.finish
#
#   ...
#
# Introspection
#
#   * `LLHttp::Parser#content_length` returns the content length of the current request.
#   * `LLHttp::Parser#method_name` returns the method name of the current response.
#   * `LLHttp::Parser#status_code` returns the status code of the current response.
#   * `LLHttp::Parser#http_major` returns the major http version of the current request/response.
#   * `LLHttp::Parser#http_minor` returns the minor http version of the current request/response.
#   * `LLHttp::Parser#keep_alive?` returns `true` if there might be more messages.
#
# Finishing
#
#   Call `LLHttp::Parser#finish` when processing is complete for the current request or response.
#
# Resetting
#
#   Call `LLHttp::Parser#reset` to reset the parser for the next request or response.
#
# source://llhttp//lib/llhttp/parser.rb#37
class LLHttp::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://llhttp//lib/llhttp/parser.rb#44
  def initialize(delegate, type: T.unsafe(nil)); end

  def <<(_arg0); end
  def content_length; end
  def finish; end
  def http_major; end
  def http_minor; end
  def keep_alive?; end
  def method_name; end
  def parse(_arg0); end
  def reset; end
  def status_code; end

  # [public] The parser type; one of: `both`, `request`, or `response`.
  #
  # source://llhttp//lib/llhttp/parser.rb#42
  def type; end

  private

  def llhttp_init(_arg0); end
end

# source://llhttp//lib/llhttp/parser.rb#38
LLHttp::Parser::LLHTTP_TYPES = T.let(T.unsafe(nil), Hash)

# source://llhttp//lib/llhttp/version.rb#4
LLHttp::VERSION = T.let(T.unsafe(nil), String)
