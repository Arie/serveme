# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/lograge/all/lograge.rbi
#
# lograge-0.14.0

module Lograge
  def application; end
  def application=(val); end
  def attach_to_action_cable; end
  def attach_to_action_controller; end
  def before_format(data, payload); end
  def before_format=(val); end
  def controller_field(params); end
  def custom_options(event); end
  def custom_options=(val); end
  def deprecator; end
  def disable_rack_cache_verbose_output; end
  def extend_base_class(klass); end
  def formatter; end
  def formatter=(val); end
  def ignore(test); end
  def ignore?(event); end
  def ignore_actions(actions); end
  def ignore_nothing; end
  def ignore_tests; end
  def ignore_tests=(val); end
  def keep_original_rails_log; end
  def log_level; end
  def log_level=(val); end
  def logger; end
  def logger=(val); end
  def lograge_config; end
  def notification_listeners_for(name); end
  def rack_cache_hashlike?(app); end
  def remove_existing_log_subscriptions; end
  def self.application; end
  def self.application=(val); end
  def self.attach_to_action_cable; end
  def self.attach_to_action_controller; end
  def self.before_format(data, payload); end
  def self.before_format=(val); end
  def self.controller_field(params); end
  def self.custom_options(event); end
  def self.custom_options=(val); end
  def self.deprecator; end
  def self.disable_rack_cache_verbose_output; end
  def self.extend_base_class(klass); end
  def self.formatter; end
  def self.formatter=(val); end
  def self.ignore(test); end
  def self.ignore?(event); end
  def self.ignore_actions(actions); end
  def self.ignore_nothing; end
  def self.ignore_tests; end
  def self.ignore_tests=(val); end
  def self.keep_original_rails_log; end
  def self.log_level; end
  def self.log_level=(val); end
  def self.logger; end
  def self.logger=(val); end
  def self.lograge_config; end
  def self.notification_listeners_for(name); end
  def self.rack_cache_hashlike?(app); end
  def self.remove_existing_log_subscriptions; end
  def self.set_formatter; end
  def self.set_ignores; end
  def self.set_lograge_log_options; end
  def self.setup(app); end
  def self.setup_custom_payload; end
  def self.support_deprecated_config; end
  def self.unsubscribe(component, subscriber); end
  def set_formatter; end
  def set_ignores; end
  def set_lograge_log_options; end
  def setup(app); end
  def setup_custom_payload; end
  def support_deprecated_config; end
  def unsubscribe(component, subscriber); end
end
module Lograge::Formatters
end
module Lograge::Formatters::Helpers
end
module Lograge::Formatters::Helpers::MethodAndPath
  def method_and_path_string(data); end
end
class Lograge::Formatters::Cee
  def call(data); end
end
class Lograge::Formatters::Json
  def call(data); end
end
class Lograge::Formatters::Graylog2
  def call(data); end
  def short_message(data); end
  def underscore_prefix(key); end
  include Lograge::Formatters::Helpers::MethodAndPath
end
class Lograge::Formatters::KeyValue
  def call(data); end
  def fields_to_display(data); end
  def format(key, value); end
  def parse_value(key, value); end
end
class Lograge::Formatters::KeyValueDeep < Lograge::Formatters::KeyValue
  def call(data); end
  def flatten_keys(data, prefix = nil); end
  def flatten_object(data, prefix); end
  def loop_on_object(data, &block); end
end
class Lograge::Formatters::L2met < Lograge::Formatters::KeyValue
  def additional_fields(data); end
  def call(data); end
  def fields_to_display(data); end
  def format(key, value); end
  def modify_payload(data); end
  def source_field(data); end
end
class Lograge::Formatters::Lines
  def call(data); end
  def load_dependencies; end
end
class Lograge::Formatters::Logstash
  def call(data); end
  def load_dependencies; end
  include Lograge::Formatters::Helpers::MethodAndPath
end
class Lograge::Formatters::LTSV
  def call(data); end
  def escape(string); end
  def fields_to_display(data); end
  def format(key, value); end
end
class Lograge::Formatters::Raw
  def call(data); end
end
module Lograge::LogSubscribers
end
class Lograge::LogSubscribers::Base < ActiveSupport::LogSubscriber
end
class Lograge::LogSubscribers::ActionCable < Lograge::LogSubscribers::Base
end
class Lograge::LogSubscribers::ActionController < Lograge::LogSubscribers::Base
end
class Lograge::SilentLogger < SimpleDelegator
  def debug(*_args); end
  def error(*_args); end
  def fatal(*_args); end
  def info(*_args); end
  def unknown(*_args); end
  def warn(*_args); end
end
class Lograge::OrderedOptions < ActiveSupport::OrderedOptions
  def custom_payload(&block); end
end
class Lograge::Railtie < Rails::Railtie
end
