# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/maxmind-geoip2/all/maxmind-geoip2.rbi
#
# maxmind-geoip2-1.2.0

module MaxMind
end
module MaxMind::GeoIP2
end
class MaxMind::GeoIP2::Error < StandardError
end
class MaxMind::GeoIP2::AddressError < MaxMind::GeoIP2::Error
end
class MaxMind::GeoIP2::AddressNotFoundError < MaxMind::GeoIP2::AddressError
end
class MaxMind::GeoIP2::HTTPError < MaxMind::GeoIP2::Error
end
class MaxMind::GeoIP2::AddressInvalidError < MaxMind::GeoIP2::AddressError
end
class MaxMind::GeoIP2::AddressReservedError < MaxMind::GeoIP2::AddressError
end
class MaxMind::GeoIP2::AuthenticationError < MaxMind::GeoIP2::Error
end
class MaxMind::GeoIP2::InsufficientFundsError < MaxMind::GeoIP2::Error
end
class MaxMind::GeoIP2::PermissionRequiredError < MaxMind::GeoIP2::Error
end
class MaxMind::GeoIP2::InvalidRequestError < MaxMind::GeoIP2::Error
end
module MaxMind::GeoIP2::Record
end
class MaxMind::GeoIP2::Record::Abstract
  def get(key); end
  def initialize(record); end
end
class MaxMind::GeoIP2::Record::Place < MaxMind::GeoIP2::Record::Abstract
  def initialize(record, locales); end
  def name; end
end
class MaxMind::GeoIP2::Record::Continent < MaxMind::GeoIP2::Record::Place
  def code; end
  def geoname_id; end
  def names; end
end
class MaxMind::GeoIP2::Record::Country < MaxMind::GeoIP2::Record::Place
  def confidence; end
  def geoname_id; end
  def in_european_union?; end
  def iso_code; end
  def names; end
end
class MaxMind::GeoIP2::Record::MaxMind < MaxMind::GeoIP2::Record::Abstract
  def queries_remaining; end
end
class MaxMind::GeoIP2::Record::RepresentedCountry < MaxMind::GeoIP2::Record::Country
  def type; end
end
class MaxMind::GeoIP2::Record::Traits < MaxMind::GeoIP2::Record::Abstract
  def anonymous?; end
  def anonymous_vpn?; end
  def anycast?; end
  def autonomous_system_number; end
  def autonomous_system_organization; end
  def connection_type; end
  def domain; end
  def hosting_provider?; end
  def initialize(record); end
  def ip_address; end
  def isp; end
  def legitimate_proxy?; end
  def mobile_country_code; end
  def mobile_network_code; end
  def network; end
  def organization; end
  def public_proxy?; end
  def residential_proxy?; end
  def static_ip_score; end
  def tor_exit_node?; end
  def user_count; end
  def user_type; end
end
module MaxMind::GeoIP2::Model
end
class MaxMind::GeoIP2::Model::Country
  def continent; end
  def country; end
  def initialize(record, locales); end
  def maxmind; end
  def registered_country; end
  def represented_country; end
  def traits; end
end
class MaxMind::GeoIP2::Record::City < MaxMind::GeoIP2::Record::Place
  def confidence; end
  def geoname_id; end
  def names; end
end
class MaxMind::GeoIP2::Record::Location < MaxMind::GeoIP2::Record::Abstract
  def accuracy_radius; end
  def average_income; end
  def latitude; end
  def longitude; end
  def metro_code; end
  def population_density; end
  def time_zone; end
end
class MaxMind::GeoIP2::Record::Postal < MaxMind::GeoIP2::Record::Abstract
  def code; end
  def confidence; end
end
class MaxMind::GeoIP2::Record::Subdivision < MaxMind::GeoIP2::Record::Place
  def confidence; end
  def geoname_id; end
  def iso_code; end
  def names; end
end
class MaxMind::GeoIP2::Model::City < MaxMind::GeoIP2::Model::Country
  def city; end
  def create_subdivisions(subdivisions, locales); end
  def initialize(record, locales); end
  def location; end
  def most_specific_subdivision; end
  def postal; end
  def subdivisions; end
end
class MaxMind::GeoIP2::Model::Insights < MaxMind::GeoIP2::Model::City
end
class MaxMind::GeoIP2::Client
  def city(ip_address = nil); end
  def country(ip_address = nil); end
  def get(endpoint, ip_address); end
  def handle_client_error(endpoint, status, body, is_json); end
  def handle_success(endpoint, body, is_json); end
  def initialize(account_id:, license_key:, locales: nil, host: nil, timeout: nil, proxy_address: nil, proxy_port: nil, proxy_username: nil, proxy_password: nil, pool_size: nil); end
  def insights(ip_address = nil); end
  def make_http_client; end
  def response_for(endpoint, model_class, ip_address); end
end
class MaxMind::GeoIP2::Model::Abstract
  def get(key); end
  def initialize(record); end
end
class MaxMind::GeoIP2::Model::AnonymousIP < MaxMind::GeoIP2::Model::Abstract
  def anonymous?; end
  def anonymous_vpn?; end
  def hosting_provider?; end
  def ip_address; end
  def network; end
  def public_proxy?; end
  def residential_proxy?; end
  def tor_exit_node?; end
end
class MaxMind::GeoIP2::Model::ASN < MaxMind::GeoIP2::Model::Abstract
  def autonomous_system_number; end
  def autonomous_system_organization; end
  def ip_address; end
  def network; end
end
class MaxMind::GeoIP2::Model::ConnectionType < MaxMind::GeoIP2::Model::Abstract
  def connection_type; end
  def ip_address; end
  def network; end
end
class MaxMind::GeoIP2::Model::Domain < MaxMind::GeoIP2::Model::Abstract
  def domain; end
  def ip_address; end
  def network; end
end
class MaxMind::GeoIP2::Model::Enterprise < MaxMind::GeoIP2::Model::City
end
class MaxMind::GeoIP2::Model::ISP < MaxMind::GeoIP2::Model::Abstract
  def autonomous_system_number; end
  def autonomous_system_organization; end
  def ip_address; end
  def isp; end
  def mobile_country_code; end
  def mobile_network_code; end
  def network; end
  def organization; end
end
class MaxMind::GeoIP2::Reader
  def anonymous_ip(ip_address); end
  def asn(ip_address); end
  def city(ip_address); end
  def close; end
  def connection_type(ip_address); end
  def country(ip_address); end
  def domain(ip_address); end
  def enterprise(ip_address); end
  def flat_model_for(model_class, method, type, ip_address); end
  def get_record(method, type, ip_address); end
  def initialize(*args); end
  def isp(ip_address); end
  def metadata; end
  def model_for(model_class, method, type, ip_address); end
end
