# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/mini_racer/all/mini_racer.rbi
#
# mini_racer-0.14.1

module MiniRacer
end
module MiniRacer::Loader
  def self.load(arg0); end
end
class MiniRacer::Context
  def assert_numeric_or_nil(option_name, object, min_value:, max_value: nil); end
  def assert_option_is_nil_or_a(option_name, object, klass); end
  def attach(name, callback); end
  def call(function_name, *arguments); end
  def call_unsafe(*arg0); end
  def check_init_options!(isolate:, snapshot:, max_memory:, marshal_stack_depth:, ensure_gc_after_idle:, timeout:); end
  def create_isolate_value; end
  def dispose; end
  def dispose_unsafe; end
  def ensure_gc_thread; end
  def eval(str, options = nil); end
  def eval_unsafe(arg0, arg1); end
  def heap_stats; end
  def init_unsafe(arg0, arg1); end
  def initialize(max_memory: nil, timeout: nil, isolate: nil, ensure_gc_after_idle: nil, snapshot: nil, marshal_stack_depth: nil); end
  def isolate; end
  def isolate_mutex; end
  def load(filename); end
  def stop; end
  def stop_attached; end
  def timeout(&blk); end
  def write_heap_snapshot(file_or_io); end
  def write_heap_snapshot_unsafe(arg0); end
end
class MiniRacer::Context::ExternalFunction
  def initialize(name, callback, parent); end
  def notify_v8; end
end
class MiniRacer::Snapshot
  def dump; end
  def initialize(str = nil); end
  def load(arg0); end
  def size; end
  def warmup!(src); end
  def warmup_unsafe!(arg0); end
end
class MiniRacer::Isolate
  def idle_notification(arg0); end
  def init_with_snapshot(arg0); end
  def initialize(snapshot = nil); end
  def low_memory_notification; end
  def pump_message_loop; end
end
class MiniRacer::Platform
  def self.flag_to_string(flag); end
  def self.flags_to_strings(flags); end
  def self.set_flag_as_str!(arg0); end
  def self.set_flags!(*args, **kwargs); end
end
class MiniRacer::Error < StandardError
end
class MiniRacer::ContextDisposedError < MiniRacer::Error
end
class MiniRacer::SnapshotError < MiniRacer::Error
end
class MiniRacer::PlatformAlreadyInitialized < MiniRacer::Error
end
class MiniRacer::EvalError < MiniRacer::Error
end
class MiniRacer::ParseError < MiniRacer::EvalError
end
class MiniRacer::ScriptTerminatedError < MiniRacer::EvalError
end
class MiniRacer::V8OutOfMemoryError < MiniRacer::EvalError
end
class MiniRacer::FailedV8Conversion
  def info; end
  def initialize(info); end
end
class MiniRacer::RuntimeError < MiniRacer::EvalError
  def backtrace; end
  def initialize(message); end
end
class MiniRacer::JavaScriptFunction
  def to_s; end
end
