# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `multi_xml` gem.
# Please instead update this file by running `bin/tapioca gem multi_xml`.


# source://multi_xml//lib/multi_xml.rb#7
module MultiXml
  class << self
    # The default parser based on what you currently
    # have loaded and installed. First checks to see
    # if any parsers are already loaded, then checks
    # to see which are installed if none are loaded.
    #
    # @raise [NoParserError]
    #
    # source://multi_xml//lib/multi_xml.rb#89
    def default_parser; end

    # Parse an XML string or IO into Ruby.
    #
    # <b>Options</b>
    #
    # <tt>:symbolize_keys</tt> :: If true, will use symbols instead of strings for the keys.
    #
    # <tt>:disallowed_types</tt> :: Types to disallow from being typecasted. Defaults to `['yaml', 'symbol']`. Use `[]` to allow all types.
    #
    # <tt>:typecast_xml_value</tt> :: If true, won't typecast values for parsed document
    #
    # source://multi_xml//lib/multi_xml.rb#134
    def parse(xml, options = T.unsafe(nil)); end

    # Get the current parser class.
    #
    # source://multi_xml//lib/multi_xml.rb#78
    def parser; end

    # Set the XML parser utilizing a symbol, string, or class.
    # Supported by default are:
    #
    # * <tt>:libxml</tt>
    # * <tt>:nokogiri</tt>
    # * <tt>:ox</tt>
    # * <tt>:rexml</tt>
    # * <tt>:oga</tt>
    #
    # source://multi_xml//lib/multi_xml.rb#113
    def parser=(new_parser); end

    private

    # source://multi_xml//lib/multi_xml.rb#193
    def base64_decode(input); end

    # TODO: Add support for other encodings
    #
    # source://multi_xml//lib/multi_xml.rb#176
    def parse_binary(binary, entity); end

    # source://multi_xml//lib/multi_xml.rb#185
    def parse_file(file, entity); end

    # source://multi_xml//lib/multi_xml.rb#197
    def symbolize_keys(params); end

    # source://multi_xml//lib/multi_xml.rb#224
    def typecast_xml_value(value, disallowed_types = T.unsafe(nil)); end

    # source://multi_xml//lib/multi_xml.rb#210
    def undasherize_keys(params); end
  end
end

# source://multi_xml//lib/multi_xml.rb#28
MultiXml::CONTENT_ROOT = T.let(T.unsafe(nil), String)

# source://multi_xml//lib/multi_xml.rb#70
MultiXml::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://multi_xml//lib/multi_xml.rb#68
MultiXml::DISALLOWED_XML_TYPES = T.let(T.unsafe(nil), Array)

# source://multi_xml//lib/multi_xml.rb#12
class MultiXml::DisallowedTypeError < ::StandardError
  # @return [DisallowedTypeError] a new instance of DisallowedTypeError
  #
  # source://multi_xml//lib/multi_xml.rb#13
  def initialize(type); end
end

# source://multi_xml//lib/multi_xml.rb#10
class MultiXml::NoParserError < ::StandardError; end

# source://multi_xml//lib/multi_xml.rb#34
MultiXml::PARSING = T.let(T.unsafe(nil), Hash)

# source://multi_xml//lib/multi_xml.rb#8
class MultiXml::ParseError < ::StandardError; end

# source://multi_xml//lib/multi_xml.rb#19
MultiXml::REQUIREMENT_MAP = T.let(T.unsafe(nil), Array)

# source://multi_xml//lib/multi_xml.rb#53
MultiXml::TYPE_NAMES = T.let(T.unsafe(nil), Hash)
