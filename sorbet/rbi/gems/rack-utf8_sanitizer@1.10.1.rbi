# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-utf8_sanitizer` gem.
# Please instead update this file by running `bin/tapioca gem rack-utf8_sanitizer`.


# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#8
module Rack; end

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#9
class Rack::UTF8Sanitizer
  # options[:sanitizable_content_types] Array
  # options[:additional_content_types] Array
  #
  # @return [UTF8Sanitizer] a new instance of UTF8Sanitizer
  #
  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#17
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#27
  def call(env); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#83
  def sanitize(env); end

  protected

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#110
  def build_strategy(options); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#219
  def decode_string(input); end

  # Performs the reverse function of `unescape_unreserved`. Unlike
  # the previous function, we can reuse the logic in URI#encode
  #
  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#258
  def escape_unreserved(input); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#214
  def reencode_string(decoded_value); end

  # Cookies need to be split and then sanitized as url encoded strings
  # since the cookie string itself is not url encoded (separated by `;`),
  # and the normal method of `sanitize_uri_encoded_string` would break
  # later cookie parsing in the case that a cookie value contained an
  # encoded `;`.
  #
  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#191
  def sanitize_cookies(env); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#171
  def sanitize_io(io, uri_encoded = T.unsafe(nil), content_length = T.unsafe(nil)); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#118
  def sanitize_rack_input(env); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#266
  def sanitize_string(input); end

  # URI.encode/decode expect the input to be in ASCII-8BIT.
  # However, there could be invalid UTF-8 characters both in
  # raw and percent-encoded form.
  #
  # So, first sanitize the value, then percent-decode it while
  # treating as UTF-8, then sanitize the result and encode it back.
  #
  # The result is guaranteed to be UTF-8-safe.
  #
  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#208
  def sanitize_uri_encoded_string(input); end

  # @return [Boolean]
  #
  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#103
  def skip?(rack_env_key); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#291
  def strip_byte_order_mark(input); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#280
  def transfer_frozen(from, to); end

  # RFC3986, 2.2 states that the characters from 'reserved' group must be
  # protected during normalization (which is what UTF8Sanitizer does).
  #
  # However, the regexp approach used by URI.unescape is not sophisticated
  # enough for our task.
  #
  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#235
  def unescape_unreserved(input); end
end

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#36
Rack::UTF8Sanitizer::DEFAULT_STRATEGIES = T.let(T.unsafe(nil), Hash)

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#81
Rack::UTF8Sanitizer::HTTP_ = T.let(T.unsafe(nil), String)

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#11
Rack::UTF8Sanitizer::NULL_BYTE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#13
class Rack::UTF8Sanitizer::NullByteInString < ::StandardError; end

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#70
Rack::UTF8Sanitizer::SANITIZABLE_CONTENT_TYPES = T.let(T.unsafe(nil), Array)

# Modeled after Rack::RewindableInput
# TODO: Should this delegate any methods to the original io?
#
# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#138
class Rack::UTF8Sanitizer::SanitizedRackInput
  # @return [SanitizedRackInput] a new instance of SanitizedRackInput
  #
  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#139
  def initialize(original_io, sanitized_io); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#165
  def close; end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#152
  def each(&block); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#144
  def gets; end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#148
  def read(*args); end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#156
  def rewind; end

  # source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#160
  def size; end
end

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#10
Rack::UTF8Sanitizer::StringIO = StringIO

# This regexp matches all 'unreserved' characters from RFC3986 (2.3),
# plus all multibyte UTF-8 characters.
#
# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#227
Rack::UTF8Sanitizer::UNRESERVED_OR_UTF8 = T.let(T.unsafe(nil), Regexp)

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#228
Rack::UTF8Sanitizer::UNRESERVED_OR_UTF8_OR_NULL = T.let(T.unsafe(nil), Regexp)

# This regexp matches unsafe characters, i.e. everything except 'reserved'
# and 'unreserved' characters from RFC3986 (2.3), and additionally '%',
# as percent-encoded unreserved characters could be left over from the
# `unescape_unreserved` invocation.
#
# See also URI::REGEXP::PATTERN::{UNRESERVED,RESERVED}.
#
# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#254
Rack::UTF8Sanitizer::UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#77
Rack::UTF8Sanitizer::URI_ENCODED_CONTENT_TYPES = T.let(T.unsafe(nil), Array)

# https://github.com/rack/rack/blob/main/SPEC.rdoc
#
# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#60
Rack::UTF8Sanitizer::URI_FIELDS = T.let(T.unsafe(nil), Array)

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#288
Rack::UTF8Sanitizer::UTF8_BOM = T.let(T.unsafe(nil), String)

# source://rack-utf8_sanitizer//lib/rack/utf8_sanitizer.rb#289
Rack::UTF8Sanitizer::UTF8_BOM_SIZE = T.let(T.unsafe(nil), Integer)
