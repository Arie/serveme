# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rails-dom-testing/all/rails-dom-testing.rbi
#
# rails-dom-testing-2.2.0

module Rails
end
module Rails::Dom
end
module Rails::Dom::Testing
  def default_html_version; end
  def default_html_version=(val); end
  def self.choose_html_parser(parser_classes, html_version: nil); end
  def self.default_html_version; end
  def self.default_html_version=(val); end
  def self.html5_support?; end
  def self.html_document(html_version: nil); end
  def self.html_document_fragment(html_version: nil); end
end
module Rails::Dom::Testing::Assertions
  include Rails::Dom::Testing::Assertions::DomAssertions
  include Rails::Dom::Testing::Assertions::SelectorAssertions
end
module Rails::Dom::Testing::Assertions::DomAssertions
  def assert_dom_equal(expected, actual, message = nil, strict: nil, html_version: nil); end
  def assert_dom_not_equal(expected, actual, message = nil, strict: nil, html_version: nil); end
  def compare_doms(expected, actual, strict); end
  def equal_attribute?(attr, other_attr); end
  def equal_attribute_nodes?(nodes, other_nodes); end
  def equal_child?(child, other_child, strict); end
  def equal_children?(child, other_child, strict); end
  def extract_children(node, strict); end
  def fragment(text, html_version: nil); end
end
module Rails::Dom::Testing::Assertions::SelectorAssertions
  def assert_dom(*args, &block); end
  def assert_dom_email(html_version: nil, &block); end
  def assert_dom_encoded(element = nil, html_version: nil, &block); end
  def assert_select(*args, &block); end
  def assert_select_email(html_version: nil, &block); end
  def assert_select_encoded(element = nil, html_version: nil, &block); end
  def assert_size_match!(size, equals, css_selector, message = nil); end
  def count_description(min, max, count); end
  def css_select(*args); end
  def document_root_element; end
  def nest_selection(selection); end
  def nodeset(node); end
  def pluralize_element(quantity); end
end
class Rails::Dom::Testing::Assertions::SelectorAssertions::SubstitutionContext
  def initialize; end
  def match(matches, attribute, matcher); end
  def matcher_for(value, format_for_presentation); end
  def substitutable?(value); end
  def substitute!(selector, values, format_for_presentation = nil); end
end
class Rails::Dom::Testing::Assertions::SelectorAssertions::HTMLSelector
  def context; end
  def css_selector; end
  def extract_equality_tests; end
  def extract_root(previous_selection, root_fallback); end
  def extract_selectors; end
  def filter(matches); end
  def initialize(values, previous_selection = nil, &root_fallback); end
  def message; end
  def select; end
  def selecting_no_body?; end
  def self.context; end
  def tests; end
  include Minitest::Assertions
end
class Rails::Dom::Testing::Railtie < Rails::Railtie
end
