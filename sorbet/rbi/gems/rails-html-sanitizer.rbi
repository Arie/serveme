# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rails-html-sanitizer/all/rails-html-sanitizer.rbi
#
# rails-html-sanitizer-1.6.0

module Rails
end
module Rails::HTML
end
class Rails::HTML::Sanitizer
  def properly_encode(fragment, options); end
  def remove_xpaths(node, xpaths); end
  def sanitize(html, options = nil); end
  def self.best_supported_vendor; end
  def self.html5_support?; end
  extend Rails::HTML4::Sanitizer::VendorMethods
end
class Rails::HTML::PermitScrubber < Loofah::Scrubber
  def allowed_node?(node); end
  def attributes; end
  def attributes=(attributes); end
  def initialize(prune: nil); end
  def keep_node?(node); end
  def prune; end
  def scrub(node); end
  def scrub_attribute(node, attr_node); end
  def scrub_attribute?(name); end
  def scrub_attributes(node); end
  def scrub_css_attribute(node); end
  def scrub_node(node); end
  def skip_node?(node); end
  def tags; end
  def tags=(tags); end
  def validate!(var, name); end
end
class Rails::HTML::TargetScrubber < Rails::HTML::PermitScrubber
  def allowed_node?(node); end
  def scrub_attribute?(name); end
end
class Rails::HTML::TextOnlyScrubber < Loofah::Scrubber
  def initialize; end
  def scrub(node); end
end
module Rails::HTML::Concern
end
module Rails::HTML::Concern::ComposedSanitize
  def sanitize(html, options = nil); end
end
module Rails::HTML::Concern::Parser
end
module Rails::HTML::Concern::Parser::HTML4
  def parse_fragment(html); end
end
module Rails::HTML::Concern::Parser::HTML5
  def parse_fragment(html); end
end
module Rails::HTML::Concern::Scrubber
end
module Rails::HTML::Concern::Scrubber::Full
  def scrub(fragment, options = nil); end
end
module Rails::HTML::Concern::Scrubber::Link
  def initialize; end
  def scrub(fragment, options = nil); end
end
module Rails::HTML::Concern::Scrubber::SafeList
  def allowed_attributes(options); end
  def allowed_tags(options); end
  def initialize(prune: nil); end
  def sanitize_css(style_string); end
  def scrub(fragment, options = nil); end
  def self.included(klass); end
end
module Rails::HTML::Concern::Serializer
end
module Rails::HTML::Concern::Serializer::UTF8Encode
  def serialize(fragment); end
end
module Rails::HTML4
end
module Rails::HTML4::Sanitizer
  extend Rails::HTML4::Sanitizer::VendorMethods
end
module Rails::HTML4::Sanitizer::VendorMethods
  def full_sanitizer; end
  def link_sanitizer; end
  def safe_list_sanitizer; end
  def white_list_sanitizer; end
end
class Rails::HTML4::FullSanitizer < Rails::HTML::Sanitizer
  include Rails::HTML::Concern::ComposedSanitize
  include Rails::HTML::Concern::Parser::HTML4
  include Rails::HTML::Concern::Scrubber::Full
  include Rails::HTML::Concern::Serializer::UTF8Encode
end
class Rails::HTML4::LinkSanitizer < Rails::HTML::Sanitizer
  include Rails::HTML::Concern::ComposedSanitize
  include Rails::HTML::Concern::Parser::HTML4
  include Rails::HTML::Concern::Scrubber::Link
  include Rails::HTML::Concern::Serializer::UTF8Encode
end
class Rails::HTML4::SafeListSanitizer < Rails::HTML::Sanitizer
  def self.allowed_attributes; end
  def self.allowed_attributes=(arg0); end
  def self.allowed_tags; end
  def self.allowed_tags=(arg0); end
  include Rails::HTML::Concern::ComposedSanitize
  include Rails::HTML::Concern::Parser::HTML4
  include Rails::HTML::Concern::Scrubber::SafeList
  include Rails::HTML::Concern::Serializer::UTF8Encode
end
module Rails::HTML5
end
class Rails::HTML5::Sanitizer
  def self.full_sanitizer; end
  def self.link_sanitizer; end
  def self.safe_list_sanitizer; end
  def self.white_list_sanitizer; end
end
class Rails::HTML5::FullSanitizer < Rails::HTML::Sanitizer
  include Rails::HTML::Concern::ComposedSanitize
  include Rails::HTML::Concern::Parser::HTML5
  include Rails::HTML::Concern::Scrubber::Full
  include Rails::HTML::Concern::Serializer::UTF8Encode
end
class Rails::HTML5::LinkSanitizer < Rails::HTML::Sanitizer
  include Rails::HTML::Concern::ComposedSanitize
  include Rails::HTML::Concern::Parser::HTML5
  include Rails::HTML::Concern::Scrubber::Link
  include Rails::HTML::Concern::Serializer::UTF8Encode
end
class Rails::HTML5::SafeListSanitizer < Rails::HTML::Sanitizer
  def self.allowed_attributes; end
  def self.allowed_attributes=(arg0); end
  def self.allowed_tags; end
  def self.allowed_tags=(arg0); end
  include Rails::HTML::Concern::ComposedSanitize
  include Rails::HTML::Concern::Parser::HTML5
  include Rails::HTML::Concern::Scrubber::SafeList
  include Rails::HTML::Concern::Serializer::UTF8Encode
end
module ActionView
end
module ActionView::Helpers
end
module ActionView::Helpers::SanitizeHelper
end
module ActionView::Helpers::SanitizeHelper::ClassMethods
  def deprecate_option(name); end
  def sanitized_allowed_attributes=(attributes); end
  def sanitized_allowed_css_keywords; end
  def sanitized_allowed_css_keywords=(_); end
  def sanitized_allowed_css_properties; end
  def sanitized_allowed_css_properties=(_); end
  def sanitized_allowed_protocols; end
  def sanitized_allowed_protocols=(_); end
  def sanitized_allowed_tags=(tags); end
  def sanitized_bad_tags; end
  def sanitized_bad_tags=(_); end
  def sanitized_protocol_separator; end
  def sanitized_protocol_separator=(_); end
  def sanitized_shorthand_css_properties; end
  def sanitized_shorthand_css_properties=(_); end
  def sanitized_uri_attributes; end
  def sanitized_uri_attributes=(_); end
end
