# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rbzip2` gem.
# Please instead update this file by running `bin/tapioca gem rbzip2`.


# source://rbzip2//lib/rbzip2.rb#6
module RBzip2
  class << self
    # source://rbzip2//lib/rbzip2.rb#15
    def default_adapter; end
  end
end

# source://rbzip2//lib/rbzip2/adapter.rb#6
module RBzip2::Adapter
  # @return [Boolean]
  #
  # source://rbzip2//lib/rbzip2/adapter.rb#13
  def available?; end

  class << self
    # @private
    #
    # source://rbzip2//lib/rbzip2/adapter.rb#8
    def extended(mod); end
  end
end

# source://rbzip2//lib/rbzip2/ffi.rb#11
module RBzip2::FFI
  extend ::RBzip2::Adapter
  extend ::FFI::Library

  class << self
    # source://rbzip2//lib/rbzip2/ffi.rb#13
    def init; end
  end
end

# source://rbzip2//lib/rbzip2/ffi/constants.rb#28
RBzip2::FFI::BZ_CONFIG_ERROR = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#23
RBzip2::FFI::BZ_DATA_ERROR = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#24
RBzip2::FFI::BZ_DATA_ERROR_MAGIC = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#13
RBzip2::FFI::BZ_FINISH = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#18
RBzip2::FFI::BZ_FINISH_OK = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#12
RBzip2::FFI::BZ_FLUSH = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#17
RBzip2::FFI::BZ_FLUSH_OK = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#25
RBzip2::FFI::BZ_IO_ERROR = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#22
RBzip2::FFI::BZ_MEM_ERROR = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#15
RBzip2::FFI::BZ_OK = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#27
RBzip2::FFI::BZ_OUTBUFF_FULL = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#21
RBzip2::FFI::BZ_PARAM_ERROR = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#11
RBzip2::FFI::BZ_RUN = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#16
RBzip2::FFI::BZ_RUN_OK = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#20
RBzip2::FFI::BZ_SEQUENCE_ERROR = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#19
RBzip2::FFI::BZ_STREAM_END = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/constants.rb#26
RBzip2::FFI::BZ_UNEXPECTED_EOF = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/errors.rb#10
class RBzip2::FFI::BufferError < ::RBzip2::FFI::Error; end

# source://rbzip2//lib/rbzip2/ffi/compressor.rb#7
class RBzip2::FFI::Compressor
  extend ::FFI::Library

  # @return [Compressor] a new instance of Compressor
  #
  # source://rbzip2//lib/rbzip2/ffi/compressor.rb#51
  def initialize(io); end

  def BZ2_bzBuffToBuffCompress(*_arg0); end

  # source://rbzip2//lib/rbzip2/ffi/compressor.rb#59
  def close; end

  # source://rbzip2//lib/rbzip2/ffi/compressor.rb#55
  def flush; end

  # source://rbzip2//lib/rbzip2/ffi/compressor.rb#67
  def putc(int); end

  # source://rbzip2//lib/rbzip2/ffi/compressor.rb#75
  def puts(line); end

  # source://rbzip2//lib/rbzip2/ffi/compressor.rb#79
  def write(bytes); end

  class << self
    def BZ2_bzBuffToBuffCompress(*_arg0); end

    # source://rbzip2//lib/rbzip2/ffi/compressor.rb#16
    def compress(data, blksize = T.unsafe(nil), verbosity = T.unsafe(nil), work_factor = T.unsafe(nil)); end
  end
end

# source://rbzip2//lib/rbzip2/ffi/errors.rb#11
class RBzip2::FFI::ConfigError < ::RBzip2::FFI::Error; end

# source://rbzip2//lib/rbzip2/ffi/errors.rb#12
class RBzip2::FFI::CorruptError < ::RBzip2::FFI::Error; end

# source://rbzip2//lib/rbzip2/ffi/constants.rb#9
RBzip2::FFI::DEFAULT_BLK_SIZE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ffi/decompressor.rb#7
class RBzip2::FFI::Decompressor
  extend ::FFI::Library

  # @return [Decompressor] a new instance of Decompressor
  #
  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#75
  def initialize(io); end

  def BZ2_bzBuffToBuffDecompress(*_arg0); end
  def BZ2_bzRead(*_arg0); end
  def BZ2_bzReadClose(*_arg0); end
  def BZ2_bzReadOpen(*_arg0); end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#79
  def close; end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#88
  def close_file; end

  def fclose(*_arg0); end
  def fopen(*_arg0); end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#94
  def getc; end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#98
  def gets; end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#159
  def inspect; end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#108
  def open_file(verbosity = T.unsafe(nil), small = T.unsafe(nil)); end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#121
  def read(length = T.unsafe(nil)); end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#64
  def read_file(length); end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#146
  def size; end

  # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#154
  def uncompressed; end

  class << self
    def BZ2_bzBuffToBuffDecompress(*_arg0); end
    def BZ2_bzRead(*_arg0); end
    def BZ2_bzReadClose(*_arg0); end
    def BZ2_bzReadOpen(*_arg0); end

    # source://rbzip2//lib/rbzip2/ffi/decompressor.rb#33
    def decompress(data, factor = T.unsafe(nil), small = T.unsafe(nil), verbosity = T.unsafe(nil)); end

    def fclose(*_arg0); end
    def fopen(*_arg0); end
  end
end

# source://rbzip2//lib/rbzip2/ffi/errors.rb#9
class RBzip2::FFI::Error < ::StandardError; end

# source://rbzip2//lib/rbzip2/io.rb#6
class RBzip2::IO
  # @return [IO] a new instance of IO
  #
  # source://rbzip2//lib/rbzip2/io.rb#8
  def initialize(io); end

  # source://rbzip2//lib/rbzip2/io.rb#14
  def close; end

  # source://rbzip2//lib/rbzip2/io.rb#19
  def getc; end

  # source://rbzip2//lib/rbzip2/io.rb#23
  def gets; end

  # source://rbzip2//lib/rbzip2/io.rb#27
  def putc(int); end

  # source://rbzip2//lib/rbzip2/io.rb#31
  def puts(line); end

  # source://rbzip2//lib/rbzip2/io.rb#35
  def read; end

  # source://rbzip2//lib/rbzip2/io.rb#39
  def write(data); end
end

# source://rbzip2//lib/rbzip2/java.rb#6
module RBzip2::Java
  extend ::RBzip2::Adapter

  class << self
    # source://rbzip2//lib/rbzip2/java.rb#8
    def init; end
  end
end

# source://rbzip2//lib/rbzip2/java/compressor.rb#6
class RBzip2::Java::Compressor
  # @return [Compressor] a new instance of Compressor
  #
  # source://rbzip2//lib/rbzip2/java/compressor.rb#8
  def initialize(io); end

  # source://rbzip2//lib/rbzip2/java/compressor.rb#16
  def close; end

  # source://rbzip2//lib/rbzip2/java/compressor.rb#12
  def flush; end

  # source://rbzip2//lib/rbzip2/java/compressor.rb#20
  def putc(int); end

  # source://rbzip2//lib/rbzip2/java/compressor.rb#28
  def puts(line); end

  # source://rbzip2//lib/rbzip2/java/compressor.rb#32
  def write(bytes); end
end

# source://rbzip2//lib/rbzip2/java/decompressor.rb#6
class RBzip2::Java::Decompressor
  # @return [Decompressor] a new instance of Decompressor
  #
  # source://rbzip2//lib/rbzip2/java/decompressor.rb#8
  def initialize(io); end

  # source://rbzip2//lib/rbzip2/java/decompressor.rb#13
  def close; end

  # source://rbzip2//lib/rbzip2/java/decompressor.rb#17
  def getc; end

  # source://rbzip2//lib/rbzip2/java/decompressor.rb#21
  def gets; end

  # source://rbzip2//lib/rbzip2/java/decompressor.rb#61
  def inspect; end

  # source://rbzip2//lib/rbzip2/java/decompressor.rb#31
  def read(length = T.unsafe(nil)); end

  # source://rbzip2//lib/rbzip2/java/decompressor.rb#48
  def size; end

  # source://rbzip2//lib/rbzip2/java/decompressor.rb#56
  def uncompressed; end
end

# source://rbzip2//lib/rbzip2/ruby.rb#6
module RBzip2::Ruby
  extend ::RBzip2::Adapter
end

# source://rbzip2//lib/rbzip2/ruby/crc.rb#6
class RBzip2::Ruby::CRC
  # @return [CRC] a new instance of CRC
  #
  # source://rbzip2//lib/rbzip2/ruby/crc.rb#54
  def initialize; end

  # source://rbzip2//lib/rbzip2/ruby/crc.rb#62
  def final_crc; end

  # source://rbzip2//lib/rbzip2/ruby/crc.rb#58
  def initialize_crc; end

  # source://rbzip2//lib/rbzip2/ruby/crc.rb#66
  def update_crc(in_ch); end
end

# source://rbzip2//lib/rbzip2/ruby/crc.rb#8
RBzip2::Ruby::CRC::CRC32_TABLE = T.let(T.unsafe(nil), Array)

# source://rbzip2//lib/rbzip2/ruby/compressor.rb#6
class RBzip2::Ruby::Compressor
  include ::RBzip2::Ruby::Constants

  # @return [Compressor] a new instance of Compressor
  #
  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#168
  def initialize(io, block_size = T.unsafe(nil)); end

  # Returns the value of attribute block_size.
  #
  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#166
  def block_size; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#183
  def block_sort; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#207
  def close; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#215
  def end_block; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#238
  def end_compression; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#251
  def finish; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#265
  def finished_with_stream; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#274
  def flush; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#278
  def generate_mtf_values; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#367
  def init; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#380
  def init_block; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#506
  def main_qsort3(data_shadow, lo_st, hi_st, d_st); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#593
  def main_simple_sort(data_shadow, lo, hi, d); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#390
  def main_sort; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#764
  def move_to_front_code_and_send; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#782
  def put_byte(c); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#787
  def put_int(u); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#770
  def putc(int); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#778
  def puts(line); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#794
  def randomize_block; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#823
  def send_mtf_values; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#845
  def send_mtf_values0(n_groups, alpha_size); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#883
  def send_mtf_values1(n_groups, alpha_size); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#973
  def send_mtf_values2(n_groups, n_selectors); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#994
  def send_mtf_values3(n_groups, alpha_size); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#1012
  def send_mtf_values4; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#1050
  def send_mtf_values5(n_groups, n_selectors); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#1086
  def send_mtf_values6(n_groups, alpha_size); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#1141
  def send_mtf_values7; end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#1178
  def w(n, v); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#1190
  def write(bytes); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#1196
  def write0(b); end

  # source://rbzip2//lib/rbzip2/ruby/compressor.rb#1217
  def write_run; end

  class << self
    # source://rbzip2//lib/rbzip2/ruby/compressor.rb#10
    def assign_codes(code, length, min_len, max_len, alpha_size); end

    # source://rbzip2//lib/rbzip2/ruby/compressor.rb#23
    def choose_block_size(input_length); end

    # source://rbzip2//lib/rbzip2/ruby/compressor.rb#27
    def make_code_lengths(len, freq, data, alpha_size, max_len); end

    # source://rbzip2//lib/rbzip2/ruby/compressor.rb#153
    def med3(a, b, c); end

    # source://rbzip2//lib/rbzip2/ruby/compressor.rb#157
    def vswap(fmap, p1, p2, n); end
  end
end

# source://rbzip2//lib/rbzip2/ruby/constants.rb#6
module RBzip2::Ruby::Constants; end

# source://rbzip2//lib/rbzip2/ruby/constants.rb#8
RBzip2::Ruby::Constants::BASEBLOCKSIZE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#69
RBzip2::Ruby::Constants::CLEARMASK = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#73
RBzip2::Ruby::Constants::DEPTH_THRESH = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#19
RBzip2::Ruby::Constants::EOF = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#70
RBzip2::Ruby::Constants::GREATER_ICOST = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#14
RBzip2::Ruby::Constants::G_SIZE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#77
RBzip2::Ruby::Constants::INCS = T.let(T.unsafe(nil), Array)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#71
RBzip2::Ruby::Constants::LESSER_ICOST = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#9
RBzip2::Ruby::Constants::MAX_ALPHA_SIZE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#67
RBzip2::Ruby::Constants::MAX_BLOCK_SIZE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#10
RBzip2::Ruby::Constants::MAX_CODE_LEN = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#16
RBzip2::Ruby::Constants::MAX_SELECTORS = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#66
RBzip2::Ruby::Constants::MIN_BLOCK_SIZE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#24
RBzip2::Ruby::Constants::NO_RAND_PART_A_STATE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#25
RBzip2::Ruby::Constants::NO_RAND_PART_B_STATE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#26
RBzip2::Ruby::Constants::NO_RAND_PART_C_STATE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#17
RBzip2::Ruby::Constants::NUM_OVERSHOOT_BYTES = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#13
RBzip2::Ruby::Constants::N_GROUPS = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#15
RBzip2::Ruby::Constants::N_ITERS = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#75
RBzip2::Ruby::Constants::QSORT_STACK_SIZE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#21
RBzip2::Ruby::Constants::RAND_PART_A_STATE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#22
RBzip2::Ruby::Constants::RAND_PART_B_STATE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#23
RBzip2::Ruby::Constants::RAND_PART_C_STATE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#28
RBzip2::Ruby::Constants::RNUMS = T.let(T.unsafe(nil), Array)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#11
RBzip2::Ruby::Constants::RUNA = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#12
RBzip2::Ruby::Constants::RUNB = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#68
RBzip2::Ruby::Constants::SETMASK = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#72
RBzip2::Ruby::Constants::SMALL_THRESH = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#20
RBzip2::Ruby::Constants::START_BLOCK_STATE = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/constants.rb#74
RBzip2::Ruby::Constants::WORK_FACTOR = T.let(T.unsafe(nil), Integer)

# source://rbzip2//lib/rbzip2/ruby/decompressor.rb#8
class RBzip2::Ruby::Decompressor
  include ::RBzip2::Ruby::Constants

  # @return [Decompressor] a new instance of Decompressor
  #
  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#12
  def initialize(io); end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#189
  def bit; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#117
  def check_magic; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#160
  def close; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#152
  def complete; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#25
  def count(read); end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#201
  def create_decode_tables(limit, base, perm, length, min_len, max_len, alpha_size); end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#308
  def create_huffman_decoding_tables(alpha_size, groups); end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#143
  def end_block; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#331
  def get_and_move_to_front_decode; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#486
  def get_and_move_to_front_decode0(group_no); end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#29
  def getc; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#33
  def gets; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#106
  def init; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#121
  def init_block; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#679
  def inspect; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#197
  def int; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#90
  def make_maps; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#167
  def r(n); end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#43
  def read(length = T.unsafe(nil)); end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#70
  def read0; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#239
  def receive_decoding_tables; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#511
  def setup_block; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#575
  def setup_no_rand_part_a; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#636
  def setup_no_rand_part_b; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#653
  def setup_no_rand_part_c; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#549
  def setup_rand_part_a; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#593
  def setup_rand_part_b; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#623
  def setup_rand_part_c; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#667
  def size; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#193
  def ubyte; end

  # source://rbzip2//lib/rbzip2/ruby/decompressor.rb#675
  def uncompressed; end
end

# source://rbzip2//lib/rbzip2/ruby/input_data.rb#6
class RBzip2::Ruby::InputData
  include ::RBzip2::Ruby::Constants

  # @return [InputData] a new instance of InputData
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#15
  def initialize(block_size); end

  # Returns the value of attribute base.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def base; end

  # Returns the value of attribute cftab.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def cftab; end

  # Returns the value of attribute get_and_move_to_front_decode_yy.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def get_and_move_to_front_decode_yy; end

  # Returns the value of attribute in_use.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def in_use; end

  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#37
  def init_tt(size); end

  # Returns the value of attribute limit.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def limit; end

  # Returns the value of attribute ll8.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def ll8; end

  # Returns the value of attribute min_lens.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def min_lens; end

  # Returns the value of attribute perm.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def perm; end

  # Returns the value of attribute receive_decoding_tables_pos.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def receive_decoding_tables_pos; end

  # Returns the value of attribute selector.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def selector; end

  # Returns the value of attribute selector_mtf.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def selector_mtf; end

  # Returns the value of attribute seq_to_unseq.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def seq_to_unseq; end

  # Returns the value of attribute temp_char_array_2d.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def temp_char_array_2d; end

  # Returns the value of attribute tt.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def tt; end

  # Returns the value of attribute unzftab.
  #
  # source://rbzip2//lib/rbzip2/ruby/input_data.rb#10
  def unzftab; end
end

# source://rbzip2//lib/rbzip2/ruby/output_data.rb#6
class RBzip2::Ruby::OutputData
  include ::RBzip2::Ruby::Constants

  # @return [OutputData] a new instance of OutputData
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#19
  def initialize(block_size); end

  # Returns the value of attribute block.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def block; end

  # Returns the value of attribute fmap.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def fmap; end

  # Returns the value of attribute ftab.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def ftab; end

  # Returns the value of attribute generate_mtf_values_yy.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def generate_mtf_values_yy; end

  # Returns the value of attribute heap.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def heap; end

  # Returns the value of attribute in_use.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def in_use; end

  # Returns the value of attribute main_sort_big_done.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def main_sort_big_done; end

  # Returns the value of attribute main_sort_copy.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def main_sort_copy; end

  # Returns the value of attribute main_sort_running_order.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def main_sort_running_order; end

  # Returns the value of attribute mtf_freq.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def mtf_freq; end

  # Returns the value of attribute parent.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def parent; end

  # Returns the value of attribute quadrant.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def quadrant; end

  # Returns the value of attribute selector.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def selector; end

  # Returns the value of attribute selector_mtf.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def selector_mtf; end

  # Returns the value of attribute send_mtf_values2_pos.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def send_mtf_values2_pos; end

  # Returns the value of attribute send_mtf_values4_in_use_16.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def send_mtf_values4_in_use_16; end

  # Returns the value of attribute send_mtf_values_code.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def send_mtf_values_code; end

  # Returns the value of attribute send_mtf_values_cost.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def send_mtf_values_cost; end

  # Returns the value of attribute send_mtf_values_fave.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def send_mtf_values_fave; end

  # Returns the value of attribute send_mtf_values_len.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def send_mtf_values_len; end

  # Returns the value of attribute send_mtf_values_rfreq.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def send_mtf_values_rfreq; end

  # Returns the value of attribute sfmap.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def sfmap; end

  # Returns the value of attribute stack_dd.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def stack_dd; end

  # Returns the value of attribute stack_hh.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def stack_hh; end

  # Returns the value of attribute stack_ll.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def stack_ll; end

  # Returns the value of attribute unseq_to_seq.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def unseq_to_seq; end

  # Returns the value of attribute weight.
  #
  # source://rbzip2//lib/rbzip2/ruby/output_data.rb#10
  def weight; end
end

# source://rbzip2//lib/rbzip2/version.rb#8
RBzip2::VERSION = T.let(T.unsafe(nil), String)
