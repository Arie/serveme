# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/redis-rack-cache/all/redis-rack-cache.rbi
#
# redis-rack-cache-2.2.1

class Redis
end
module Redis::Rack
end
module Redis::Rack::Cache
end
module Rack
end
module Rack::Cache
end
module Rack::Cache::RedisBase
  def initialize(server, options = nil); end
  def open(key); end
  def self.included(base); end
end
module Rack::Cache::RedisBase::ClassMethods
  def resolve(uri, options = nil); end
end
module Zlib
end
module Zlib::GzipCompression
  def self.deflate(data); end
  def self.inflate(data); end
end
class Rack::Cache::EntityStore
end
class Rack::Cache::EntityStore::Redis < Rack::Cache::EntityStore
  def cache; end
  def compress(data); end
  def compress?(data = nil); end
  def decompress(data); end
  def default_ttl; end
  def deflater; end
  def exist?(key); end
  def inflater; end
  def options; end
  def purge(key); end
  def read(key); end
  def write(body, ttl = nil); end
  extend Rack::Cache::RedisBase::ClassMethods
  extend Rack::Utils
  include Rack::Cache::RedisBase
end
module Rack::Cache::Options
  def compress; end
  def compress=(value); end
  def compress?; end
end
class Rack::Cache::MetaStore
end
class Rack::Cache::MetaStore::Redis < Rack::Cache::MetaStore
  def cache; end
  def default_ttl; end
  def options; end
  def purge(key); end
  def read(key); end
  def write(key, entries, ttl = nil); end
  extend Rack::Cache::RedisBase::ClassMethods
  extend Rack::Utils
  include Rack::Cache::RedisBase
end
