# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `redis-rack-cache` gem.
# Please instead update this file by running `bin/tapioca gem redis-rack-cache`.


# source://redis-rack-cache//lib/rack/cache/redis_base.rb#4
module Rack
  class << self
    # source://rack/2.2.9/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.9/lib/rack/version.rb#19
    def version; end
  end
end

# source://redis-rack-cache//lib/rack/cache/redis_base.rb#5
module Rack::Cache
  class << self
    # source://rack-cache/1.17.0/lib/rack/cache/headers.rb#13
    def Headers(headers); end

    # source://rack-cache/1.17.0/lib/rack/cache.rb#42
    def new(backend, options = T.unsafe(nil), &b); end
  end
end

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#9
class Rack::Cache::EntityStore
  private

  # source://rack-cache/1.17.0/lib/rack/cache/entity_store.rb#26
  def bytesize(string); end

  # source://rack-cache/1.17.0/lib/rack/cache/entity_store.rb#14
  def slurp(body); end
end

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#92
Rack::Cache::EntityStore::REDIS = Rack::Cache::EntityStore::Redis

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#92
Rack::Cache::EntityStore::REDISS = Rack::Cache::EntityStore::Redis

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#10
class Rack::Cache::EntityStore::Redis < ::Rack::Cache::EntityStore
  include ::Rack::Cache::RedisBase
  extend ::Rack::Cache::RedisBase::ClassMethods
  extend ::Rack::Utils

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def cache; end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def default_ttl; end

  # @return [Boolean]
  #
  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#15
  def exist?(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def options; end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#38
  def purge(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#19
  def read(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#27
  def write(body, ttl = T.unsafe(nil)); end

  protected

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#45
  def compress(data); end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#51
  def decompress(data); end

  private

  # @return [Boolean]
  #
  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#85
  def compress?(data = T.unsafe(nil)); end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#59
  def deflater; end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#72
  def inflater; end
end

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#11
Rack::Cache::EntityStore::Redis::MINIMUM_COMPRESSION_BYTESIZE = T.let(T.unsafe(nil), Integer)

# source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#9
class Rack::Cache::MetaStore
  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#112
  def cache_key(request); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#118
  def invalidate(request, entity_store); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#28
  def lookup(request, entity_store); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#62
  def store(request, response, entity_store); end

  protected

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#185
  def purge(key); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#172
  def read(key); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#179
  def write(key, negotiations, ttl = T.unsafe(nil)); end

  private

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#192
  def hexdigest(data); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#138
  def persist_request(request); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#151
  def persist_response(response); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#159
  def requests_match?(vary, env1, env2); end

  # source://rack-cache/1.17.0/lib/rack/cache/meta_store.rb#146
  def restore_response(hash, body = T.unsafe(nil)); end
end

# source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#28
Rack::Cache::MetaStore::REDIS = Rack::Cache::MetaStore::Redis

# source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#28
Rack::Cache::MetaStore::REDISS = Rack::Cache::MetaStore::Redis

# source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#10
class Rack::Cache::MetaStore::Redis < ::Rack::Cache::MetaStore
  include ::Rack::Cache::RedisBase
  extend ::Rack::Cache::RedisBase::ClassMethods
  extend ::Rack::Utils

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def cache; end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def default_ttl; end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def options; end

  # source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#22
  def purge(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#13
  def read(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#17
  def write(key, entries, ttl = T.unsafe(nil)); end
end

# source://redis-rack-cache//lib/rack/cache/redis_base.rb#6
module Rack::Cache::RedisBase
  mixes_in_class_methods ::Rack::Cache::RedisBase::ClassMethods
  mixes_in_class_methods ::Rack::Utils

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#24
  def initialize(server, options = T.unsafe(nil)); end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#30
  def open(key); end

  class << self
    # @private
    #
    # source://redis-rack-cache//lib/rack/cache/redis_base.rb#7
    def included(base); end
  end
end

# source://redis-rack-cache//lib/rack/cache/redis_base.rb#18
module Rack::Cache::RedisBase::ClassMethods
  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#19
  def resolve(uri, options = T.unsafe(nil)); end
end

# source://redis-rack-cache//lib/redis-rack-cache/constants.rb#1
class Redis
  include ::Redis::Commands::Bitmaps
  include ::Redis::Commands::Cluster
  include ::Redis::Commands::Connection
  include ::Redis::Commands::Geo
  include ::Redis::Commands::Hashes
  include ::Redis::Commands::HyperLogLog
  include ::Redis::Commands::Keys
  include ::Redis::Commands::Lists
  include ::Redis::Commands::Pubsub
  include ::Redis::Commands::Scripting
  include ::Redis::Commands::Server
  include ::Redis::Commands::Sets
  include ::Redis::Commands::SortedSets
  include ::Redis::Commands::Streams
  include ::Redis::Commands::Strings
  include ::Redis::Commands::Transactions

  # source://redis/5.2.0/lib/redis.rb#63
  def initialize(options = T.unsafe(nil)); end

  # source://redis/5.2.0/lib/redis.rb#98
  def _client; end

  # source://redis/5.2.0/lib/redis.rb#88
  def close; end

  # source://redis/5.2.0/lib/redis.rb#83
  def connected?; end

  # source://redis/5.2.0/lib/redis.rb#122
  def connection; end

  # source://redis/5.2.0/lib/redis.rb#88
  def disconnect!; end

  # source://redis/5.2.0/lib/redis.rb#118
  def dup; end

  # source://redis/5.2.0/lib/redis.rb#110
  def id; end

  # source://redis/5.2.0/lib/redis.rb#114
  def inspect; end

  # source://redis/5.2.0/lib/redis.rb#102
  def pipelined(exception: T.unsafe(nil)); end

  # source://redis/5.2.0/lib/redis.rb#94
  def with; end

  # source://redis/5.2.0/lib/redis.rb#78
  def without_reconnect(&block); end

  private

  # source://redis/5.2.0/lib/redis.rb#164
  def _subscription(method, timeout, channels, block); end

  # source://redis/5.2.0/lib/redis.rb#134
  def initialize_client(options); end

  # source://redis/5.2.0/lib/redis.rb#158
  def send_blocking_command(command, timeout, &block); end

  # source://redis/5.2.0/lib/redis.rb#150
  def send_command(command, &block); end

  # source://redis/5.2.0/lib/redis.rb#146
  def synchronize; end

  class << self
    # source://redis/5.2.0/lib/redis.rb#14
    def deprecate!(message); end

    # source://redis/5.2.0/lib/redis.rb#12
    def raise_deprecations; end

    # source://redis/5.2.0/lib/redis.rb#12
    def raise_deprecations=(_arg0); end

    # source://redis/5.2.0/lib/redis.rb#12
    def silence_deprecations; end

    # source://redis/5.2.0/lib/redis.rb#12
    def silence_deprecations=(_arg0); end
  end
end

# source://redis-rack-cache//lib/redis-rack-cache/constants.rb#2
module Redis::Rack; end

# source://redis-rack-cache//lib/redis-rack-cache/constants.rb#3
module Redis::Rack::Cache; end

# 1 year
#
# source://redis-rack-cache//lib/redis-rack-cache/constants.rb#4
Redis::Rack::Cache::DEFAULT_TTL = T.let(T.unsafe(nil), Integer)

# source://redis-rack-cache//lib/redis-rack-cache/version.rb#4
Redis::Rack::Cache::VERSION = T.let(T.unsafe(nil), String)

# Compress data over the wire to Redis with GZip. This code was mostly
# stolen from `Dalli::GzipCompressor`.
#
# https://github.com/petergoldstein/dalli/blob/master/lib/dalli/compressor.rb
#
# source://redis-rack-cache//lib/zlib/gzip_compression.rb#6
module Zlib::GzipCompression
  class << self
    # Compress the given data with GZip.
    #
    # @param data [String] - Uncompressed data.
    # @return [String]
    #
    # source://redis-rack-cache//lib/zlib/gzip_compression.rb#11
    def deflate(data); end

    # Decompress the given data with GZip.
    #
    # @param data [String] - Compressed data.
    # @return [String] Decompressed data.
    #
    # source://redis-rack-cache//lib/zlib/gzip_compression.rb#25
    def inflate(data); end
  end
end
