# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `redis-rack-cache` gem.
# Please instead update this file by running `bin/tapioca gem redis-rack-cache`.

# source://redis-rack-cache//lib/rack/cache/redis_base.rb#4
module Rack
  class << self
    # source://rack/2.2.7/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.7/lib/rack/version.rb#19
    def version; end
  end
end

# source://rack/2.2.7/lib/rack.rb#29
Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#31
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#32
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://redis-rack-cache//lib/rack/cache/redis_base.rb#5
module Rack::Cache
  class << self
    # source://rack-cache/1.13.0/lib/rack/cache.rb#42
    def new(backend, options = T.unsafe(nil), &b); end
  end
end

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#9
class Rack::Cache::EntityStore
  private

  # source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#26
  def bytesize(string); end

  # source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#14
  def slurp(body); end
end

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#168
Rack::Cache::EntityStore::DISK = Rack::Cache::EntityStore::Disk

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#169
Rack::Cache::EntityStore::FILE = Rack::Cache::EntityStore::Disk

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#337
Rack::Cache::EntityStore::GAE = Rack::Cache::EntityStore::GAEStore

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#336
Rack::Cache::EntityStore::GAECACHE = Rack::Cache::EntityStore::GAEStore

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#79
Rack::Cache::EntityStore::HEAP = Rack::Cache::EntityStore::Heap

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#80
Rack::Cache::EntityStore::MEM = Rack::Cache::EntityStore::Heap

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#285
Rack::Cache::EntityStore::MEMCACHE = Rack::Cache::EntityStore::Dalli

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#292
Rack::Cache::EntityStore::MEMCACHED = Rack::Cache::EntityStore::Dalli

# source://rack-cache/1.13.0/lib/rack/cache/entity_store.rb#374
Rack::Cache::EntityStore::NOOP = Rack::Cache::EntityStore::Noop

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#92
Rack::Cache::EntityStore::REDIS = Rack::Cache::EntityStore::Redis

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#92
Rack::Cache::EntityStore::REDISS = Rack::Cache::EntityStore::Redis

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#10
class Rack::Cache::EntityStore::Redis < ::Rack::Cache::EntityStore
  include ::Rack::Cache::RedisBase
  extend ::Rack::Cache::RedisBase::ClassMethods
  extend ::Rack::Utils

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def cache; end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def default_ttl; end

  # @return [Boolean]
  #
  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#15
  def exist?(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def options; end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#38
  def purge(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#19
  def read(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#27
  def write(body, ttl = T.unsafe(nil)); end

  protected

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#45
  def compress(data); end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#51
  def decompress(data); end

  private

  # @return [Boolean]
  #
  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#85
  def compress?(data = T.unsafe(nil)); end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#59
  def deflater; end

  # source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#72
  def inflater; end
end

# source://redis-rack-cache//lib/rack/cache/redis_entitystore.rb#11
Rack::Cache::EntityStore::Redis::MINIMUM_COMPRESSION_BYTESIZE = T.let(T.unsafe(nil), Integer)

# source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#9
class Rack::Cache::MetaStore
  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#112
  def cache_key(request); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#118
  def invalidate(request, entity_store); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#28
  def lookup(request, entity_store); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#61
  def store(request, response, entity_store); end

  protected

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#187
  def purge(key); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#174
  def read(key); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#181
  def write(key, negotiations, ttl = T.unsafe(nil)); end

  private

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#194
  def hexdigest(data); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#140
  def persist_request(request); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#153
  def persist_response(response); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#161
  def requests_match?(vary, env1, env2); end

  # source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#148
  def restore_response(hash, body = T.unsafe(nil)); end
end

# source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#291
Rack::Cache::MetaStore::DISK = Rack::Cache::MetaStore::Disk

# source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#292
Rack::Cache::MetaStore::FILE = Rack::Cache::MetaStore::Disk

# source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#441
Rack::Cache::MetaStore::GAE = Rack::Cache::MetaStore::GAEStore

# source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#440
Rack::Cache::MetaStore::GAECACHE = Rack::Cache::MetaStore::GAEStore

# source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#233
Rack::Cache::MetaStore::HEAP = Rack::Cache::MetaStore::Heap

# source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#234
Rack::Cache::MetaStore::MEM = Rack::Cache::MetaStore::Heap

# source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#402
Rack::Cache::MetaStore::MEMCACHE = Rack::Cache::MetaStore::Dalli

# source://rack-cache/1.13.0/lib/rack/cache/meta_store.rb#408
Rack::Cache::MetaStore::MEMCACHED = Rack::Cache::MetaStore::Dalli

# source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#28
Rack::Cache::MetaStore::REDIS = Rack::Cache::MetaStore::Redis

# source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#28
Rack::Cache::MetaStore::REDISS = Rack::Cache::MetaStore::Redis

# source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#10
class Rack::Cache::MetaStore::Redis < ::Rack::Cache::MetaStore
  include ::Rack::Cache::RedisBase
  extend ::Rack::Cache::RedisBase::ClassMethods
  extend ::Rack::Utils

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def cache; end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def default_ttl; end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#12
  def options; end

  # source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#22
  def purge(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#13
  def read(key); end

  # source://redis-rack-cache//lib/rack/cache/redis_metastore.rb#17
  def write(key, entries, ttl = T.unsafe(nil)); end
end

# source://redis-rack-cache//lib/rack/cache/redis_base.rb#6
module Rack::Cache::RedisBase
  mixes_in_class_methods ::Rack::Cache::RedisBase::ClassMethods
  mixes_in_class_methods ::Rack::Utils

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#24
  def initialize(server, options = T.unsafe(nil)); end

  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#30
  def open(key); end

  class << self
    # @private
    #
    # source://redis-rack-cache//lib/rack/cache/redis_base.rb#7
    def included(base); end
  end
end

# source://redis-rack-cache//lib/rack/cache/redis_base.rb#18
module Rack::Cache::RedisBase::ClassMethods
  # source://redis-rack-cache//lib/rack/cache/redis_base.rb#19
  def resolve(uri, options = T.unsafe(nil)); end
end

# source://rack/2.2.7/lib/rack.rb#43
Rack::DELETE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#36
Rack::ETAG = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#30
Rack::EXPIRES = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack/file.rb#6
Rack::File = Rack::Files

# source://rack/2.2.7/lib/rack.rb#39
Rack::GET = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#44
Rack::HEAD = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#20
Rack::HTTPS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#35
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#17
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#18
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#19
Rack::HTTP_VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#46
Rack::LINK = T.let(T.unsafe(nil), String)

# source://rack-test/2.1.0/lib/rack/test.rb#381
Rack::MockSession = Rack::Test::Session

# source://rack/2.2.7/lib/rack.rb#45
Rack::OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#42
Rack::PATCH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#21
Rack::PATH_INFO = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#40
Rack::POST = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#41
Rack::PUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#25
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#53
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#63
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#65
Rack::RACK_HIJACK_IO = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#55
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#64
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#54
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#76
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#67
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#68
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#60
Rack::RACK_MULTIPROCESS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#59
Rack::RACK_MULTITHREAD = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#66
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#72
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#73
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#70
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#69
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#71
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#74
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#75
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#61
Rack::RACK_RUNONCE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#56
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#57
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#77
Rack::RACK_SESSION_UNPACKED_COOKIE_DATA = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#58
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#52
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#62
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#51
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack/version.rb#23
Rack::RELEASE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#22
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#23
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#24
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#27
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#28
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#26
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#33
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#48
Rack::TRACE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#34
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#47
Rack::UNLINK = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack/version.rb#16
Rack::VERSION = T.let(T.unsafe(nil), Array)

# source://redis-rack-cache//lib/redis-rack-cache/constants.rb#1
class Redis
  include ::Redis::Commands::Bitmaps
  include ::Redis::Commands::Cluster
  include ::Redis::Commands::Connection
  include ::Redis::Commands::Geo
  include ::Redis::Commands::Hashes
  include ::Redis::Commands::HyperLogLog
  include ::Redis::Commands::Keys
  include ::Redis::Commands::Lists
  include ::Redis::Commands::Pubsub
  include ::Redis::Commands::Scripting
  include ::Redis::Commands::Server
  include ::Redis::Commands::Sets
  include ::Redis::Commands::SortedSets
  include ::Redis::Commands::Streams
  include ::Redis::Commands::Strings
  include ::Redis::Commands::Transactions

  # source://redis/4.8.1/lib/redis.rb#83
  def initialize(options = T.unsafe(nil)); end

  # source://redis/4.8.1/lib/redis.rb#160
  def _client; end

  # source://redis/4.8.1/lib/redis.rb#110
  def close; end

  # source://redis/4.8.1/lib/redis.rb#140
  def commit; end

  # source://redis/4.8.1/lib/redis.rb#105
  def connected?; end

  # source://redis/4.8.1/lib/redis.rb#250
  def connection; end

  # source://redis/4.8.1/lib/redis.rb#110
  def disconnect!; end

  # source://redis/4.8.1/lib/redis.rb#246
  def dup; end

  # source://redis/4.8.1/lib/redis.rb#238
  def id; end

  # source://redis/4.8.1/lib/redis.rb#242
  def inspect; end

  # source://redis/4.8.1/lib/redis.rb#214
  def multi(&block); end

  # source://redis/4.8.1/lib/redis.rb#164
  def pipelined(&block); end

  # source://redis/4.8.1/lib/redis.rb#125
  def queue(*command); end

  # source://redis/4.8.1/lib/redis.rb#115
  def with; end

  # source://redis/4.8.1/lib/redis.rb#93
  def with_reconnect(val = T.unsafe(nil), &blk); end

  # source://redis/4.8.1/lib/redis.rb#100
  def without_reconnect(&blk); end

  private

  # source://redis/4.8.1/lib/redis.rb#280
  def _subscription(method, timeout, channels, block); end

  # source://redis/4.8.1/lib/redis.rb#274
  def send_blocking_command(command, timeout, &block); end

  # source://redis/4.8.1/lib/redis.rb#268
  def send_command(command, &block); end

  # source://redis/4.8.1/lib/redis.rb#264
  def synchronize; end

  class << self
    # source://redis/4.8.1/lib/redis.rb#40
    def current; end

    # source://redis/4.8.1/lib/redis.rb#45
    def current=(redis); end

    # source://redis/4.8.1/lib/redis.rb#30
    def deprecate!(message); end

    # source://redis/4.8.1/lib/redis.rb#15
    def exists_returns_integer; end

    # source://redis/4.8.1/lib/redis.rb#18
    def exists_returns_integer=(value); end

    # source://redis/4.8.1/lib/redis.rb#16
    def raise_deprecations; end

    # source://redis/4.8.1/lib/redis.rb#16
    def raise_deprecations=(_arg0); end

    # source://redis/4.8.1/lib/redis.rb#16
    def sadd_returns_boolean; end

    # source://redis/4.8.1/lib/redis.rb#16
    def sadd_returns_boolean=(_arg0); end

    # source://redis/4.8.1/lib/redis.rb#16
    def silence_deprecations; end

    # source://redis/4.8.1/lib/redis.rb#16
    def silence_deprecations=(_arg0); end
  end
end

# source://redis/4.8.1/lib/redis.rb#8
Redis::BASE_PATH = T.let(T.unsafe(nil), String)

# source://redis-rack-cache//lib/redis-rack-cache/constants.rb#2
module Redis::Rack; end

# source://redis-rack-cache//lib/redis-rack-cache/constants.rb#3
module Redis::Rack::Cache; end

# 1 year
#
# source://redis-rack-cache//lib/redis-rack-cache/constants.rb#4
Redis::Rack::Cache::DEFAULT_TTL = T.let(T.unsafe(nil), Integer)

# source://redis-rack-cache//lib/redis-rack-cache/version.rb#4
Redis::Rack::Cache::VERSION = T.let(T.unsafe(nil), String)

# source://redis-rack/2.1.4/lib/redis/rack/version.rb#3
Redis::Rack::VERSION = T.let(T.unsafe(nil), String)

# source://redis/4.8.1/lib/redis/version.rb#4
Redis::VERSION = T.let(T.unsafe(nil), String)

# Compress data over the wire to Redis with GZip. This code was mostly
# stolen from `Dalli::GzipCompressor`.
#
# https://github.com/petergoldstein/dalli/blob/master/lib/dalli/compressor.rb
#
# source://redis-rack-cache//lib/zlib/gzip_compression.rb#6
module Zlib::GzipCompression
  class << self
    # Compress the given data with GZip.
    #
    # @param data [String] - Uncompressed data.
    # @return [String]
    #
    # source://redis-rack-cache//lib/zlib/gzip_compression.rb#11
    def deflate(data); end

    # Decompress the given data with GZip.
    #
    # @param data [String] - Compressed data.
    # @return [String] Decompressed data.
    #
    # source://redis-rack-cache//lib/zlib/gzip_compression.rb#25
    def inflate(data); end
  end
end
