# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `redis-rack` gem.
# Please instead update this file by running `bin/tapioca gem redis-rack`.

# source://redis-rack//lib/rack/session/redis.rb#6
module Rack
  class << self
    # source://rack/2.2.7/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.7/lib/rack/version.rb#19
    def version; end
  end
end

# source://rack/2.2.7/lib/rack.rb#29
Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#31
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#32
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#43
Rack::DELETE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#36
Rack::ETAG = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#30
Rack::EXPIRES = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack/file.rb#6
Rack::File = Rack::Files

# source://rack/2.2.7/lib/rack.rb#39
Rack::GET = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#44
Rack::HEAD = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#20
Rack::HTTPS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#35
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#17
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#18
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#19
Rack::HTTP_VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#46
Rack::LINK = T.let(T.unsafe(nil), String)

# source://rack-test/2.1.0/lib/rack/test.rb#381
Rack::MockSession = Rack::Test::Session

# source://rack/2.2.7/lib/rack.rb#45
Rack::OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#42
Rack::PATCH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#21
Rack::PATH_INFO = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#40
Rack::POST = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#41
Rack::PUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#25
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#53
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#63
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#65
Rack::RACK_HIJACK_IO = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#55
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#64
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#54
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#76
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#67
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#68
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#60
Rack::RACK_MULTIPROCESS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#59
Rack::RACK_MULTITHREAD = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#66
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#72
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#73
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#70
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#69
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#71
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#74
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#75
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#61
Rack::RACK_RUNONCE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#56
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#57
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#77
Rack::RACK_SESSION_UNPACKED_COOKIE_DATA = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#58
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#52
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#62
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#51
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack/version.rb#23
Rack::RELEASE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#22
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#23
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#24
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#27
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#28
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#26
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#33
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)

# source://redis-rack//lib/rack/session/redis.rb#7
module Rack::Session; end

# source://redis-rack//lib/rack/session/redis.rb#8
class Rack::Session::Redis < ::Rack::Session::Abstract::PersistedSecure
  # @return [Redis] a new instance of Redis
  #
  # source://redis-rack//lib/rack/session/redis.rb#15
  def initialize(app, options = T.unsafe(nil)); end

  # source://redis-rack//lib/rack/session/redis.rb#54
  def delete_session(req, sid, options); end

  # source://redis-rack//lib/rack/session/redis.rb#33
  def find_session(req, sid); end

  # source://redis-rack//lib/rack/session/redis.rb#22
  def generate_unique_sid(session); end

  # Returns the value of attribute mutex.
  #
  # source://redis-rack//lib/rack/session/redis.rb#9
  def mutex; end

  # @return [Boolean]
  #
  # source://redis-rack//lib/rack/session/redis.rb#64
  def threadsafe?; end

  # source://redis-rack//lib/rack/session/redis.rb#81
  def with(&block); end

  # source://redis-rack//lib/rack/session/redis.rb#68
  def with_lock(req, default = T.unsafe(nil)); end

  # source://redis-rack//lib/rack/session/redis.rb#47
  def write_session(req, sid, new_session, options = T.unsafe(nil)); end

  private

  # source://redis-rack//lib/rack/session/redis.rb#87
  def get_session_with_fallback(sid); end
end

# source://redis-rack//lib/rack/session/redis.rb#11
Rack::Session::Redis::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://rack/2.2.7/lib/rack.rb#48
Rack::TRACE = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#34
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack.rb#47
Rack::UNLINK = T.let(T.unsafe(nil), String)

# source://rack/2.2.7/lib/rack/version.rb#16
Rack::VERSION = T.let(T.unsafe(nil), Array)

# source://redis-rack//lib/redis/rack/version.rb#1
class Redis
  include ::Redis::Commands::Bitmaps
  include ::Redis::Commands::Cluster
  include ::Redis::Commands::Connection
  include ::Redis::Commands::Geo
  include ::Redis::Commands::Hashes
  include ::Redis::Commands::HyperLogLog
  include ::Redis::Commands::Keys
  include ::Redis::Commands::Lists
  include ::Redis::Commands::Pubsub
  include ::Redis::Commands::Scripting
  include ::Redis::Commands::Server
  include ::Redis::Commands::Sets
  include ::Redis::Commands::SortedSets
  include ::Redis::Commands::Streams
  include ::Redis::Commands::Strings
  include ::Redis::Commands::Transactions

  # source://redis/4.8.1/lib/redis.rb#83
  def initialize(options = T.unsafe(nil)); end

  # source://redis/4.8.1/lib/redis.rb#160
  def _client; end

  # source://redis/4.8.1/lib/redis.rb#110
  def close; end

  # source://redis/4.8.1/lib/redis.rb#140
  def commit; end

  # source://redis/4.8.1/lib/redis.rb#105
  def connected?; end

  # source://redis/4.8.1/lib/redis.rb#250
  def connection; end

  # source://redis/4.8.1/lib/redis.rb#110
  def disconnect!; end

  # source://redis/4.8.1/lib/redis.rb#246
  def dup; end

  # source://redis/4.8.1/lib/redis.rb#238
  def id; end

  # source://redis/4.8.1/lib/redis.rb#242
  def inspect; end

  # source://redis/4.8.1/lib/redis.rb#214
  def multi(&block); end

  # source://redis/4.8.1/lib/redis.rb#164
  def pipelined(&block); end

  # source://redis/4.8.1/lib/redis.rb#125
  def queue(*command); end

  # source://redis/4.8.1/lib/redis.rb#115
  def with; end

  # source://redis/4.8.1/lib/redis.rb#93
  def with_reconnect(val = T.unsafe(nil), &blk); end

  # source://redis/4.8.1/lib/redis.rb#100
  def without_reconnect(&blk); end

  private

  # source://redis/4.8.1/lib/redis.rb#280
  def _subscription(method, timeout, channels, block); end

  # source://redis/4.8.1/lib/redis.rb#274
  def send_blocking_command(command, timeout, &block); end

  # source://redis/4.8.1/lib/redis.rb#268
  def send_command(command, &block); end

  # source://redis/4.8.1/lib/redis.rb#264
  def synchronize; end

  class << self
    # source://redis/4.8.1/lib/redis.rb#40
    def current; end

    # source://redis/4.8.1/lib/redis.rb#45
    def current=(redis); end

    # source://redis/4.8.1/lib/redis.rb#30
    def deprecate!(message); end

    # source://redis/4.8.1/lib/redis.rb#15
    def exists_returns_integer; end

    # source://redis/4.8.1/lib/redis.rb#18
    def exists_returns_integer=(value); end

    # source://redis/4.8.1/lib/redis.rb#16
    def raise_deprecations; end

    # source://redis/4.8.1/lib/redis.rb#16
    def raise_deprecations=(_arg0); end

    # source://redis/4.8.1/lib/redis.rb#16
    def sadd_returns_boolean; end

    # source://redis/4.8.1/lib/redis.rb#16
    def sadd_returns_boolean=(_arg0); end

    # source://redis/4.8.1/lib/redis.rb#16
    def silence_deprecations; end

    # source://redis/4.8.1/lib/redis.rb#16
    def silence_deprecations=(_arg0); end
  end
end

# source://redis/4.8.1/lib/redis.rb#8
Redis::BASE_PATH = T.let(T.unsafe(nil), String)

# source://redis-rack//lib/redis/rack/version.rb#2
module Redis::Rack; end

# source://redis-rack//lib/redis/rack/connection.rb#3
class Redis::Rack::Connection
  # @return [Connection] a new instance of Connection
  #
  # source://redis-rack//lib/redis/rack/connection.rb#6
  def initialize(options = T.unsafe(nil)); end

  # source://redis-rack//lib/redis/rack/connection.rb#34
  def pool; end

  # source://redis-rack//lib/redis/rack/connection.rb#42
  def pool_options; end

  # @return [Boolean]
  #
  # source://redis-rack//lib/redis/rack/connection.rb#28
  def pooled?; end

  # source://redis-rack//lib/redis/rack/connection.rb#38
  def store; end

  # source://redis-rack//lib/redis/rack/connection.rb#20
  def with(&block); end
end

# source://redis-rack//lib/redis/rack/connection.rb#4
Redis::Rack::Connection::POOL_KEYS = T.let(T.unsafe(nil), Array)

# source://redis-rack//lib/redis/rack/version.rb#3
Redis::Rack::VERSION = T.let(T.unsafe(nil), String)

# source://redis/4.8.1/lib/redis/version.rb#4
Redis::VERSION = T.let(T.unsafe(nil), String)
