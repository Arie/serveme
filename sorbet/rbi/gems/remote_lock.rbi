# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/remote_lock/all/remote_lock.rbi
#
# remote_lock-402bba89168d

module RemoteLock::Adapters
end
class RemoteLock::Adapters::Base
  def delete(key); end
  def has_key?(key, options = nil); end
  def initialize(connection); end
  def self.valid?(adapter); end
  def store(key, options = nil); end
  def thread_id; end
  def uid; end
end
class RemoteLock::Adapters::Memcached < RemoteLock::Adapters::Base
  def delete(key); end
  def has_key?(key); end
  def store(key, expires_in_seconds); end
end
class RemoteLock::Adapters::Dalli < RemoteLock::Adapters::Base
  def delete(key); end
  def has_key?(key); end
  def store(key, expires_in_seconds); end
end
class RemoteLock::Adapters::DalliConnectionPool < RemoteLock::Adapters::Base
  def delete(key); end
  def has_key?(key); end
  def store(key, expires_in_seconds); end
end
class RemoteLock::Adapters::Redis < RemoteLock::Adapters::Base
  def delete(key); end
  def has_key?(key); end
  def store(key, expires_in_seconds); end
end
class RemoteLock
  def acquire_lock(key, options = nil); end
  def acquired?(key); end
  def initialize(adapter, prefix = nil); end
  def key_for(string); end
  def release_lock(key); end
  def synchronize(key, options = nil); end
end
class RemoteLock::Error < RuntimeError
end
