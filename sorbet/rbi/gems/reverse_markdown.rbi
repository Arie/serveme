# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/reverse_markdown/all/reverse_markdown.rbi
#
# reverse_markdown-2.1.1

module ReverseMarkdown
  def self.cleaner; end
  def self.config; end
  def self.convert(input, options = nil); end
end
class ReverseMarkdown::Error < StandardError
end
class ReverseMarkdown::UnknownTagError < ReverseMarkdown::Error
end
class ReverseMarkdown::InvalidConfigurationError < ReverseMarkdown::Error
end
class ReverseMarkdown::Cleaner
  def clean_punctuation_characters(string); end
  def clean_tag_borders(string); end
  def force_encoding(string); end
  def present_or_default(string, default); end
  def preserve_border_whitespaces(string, options = nil, &block); end
  def remove_inner_whitespaces(string); end
  def remove_leading_newlines(string); end
  def remove_newlines(string); end
  def tidy(string); end
end
class ReverseMarkdown::Config
  def force_encoding; end
  def force_encoding=(arg0); end
  def github_flavored; end
  def github_flavored=(arg0); end
  def initialize; end
  def tag_border; end
  def tag_border=(arg0); end
  def unknown_tags; end
  def unknown_tags=(arg0); end
  def with(options = nil); end
end
module ReverseMarkdown::Converters
  def self.default_converter(tag_name); end
  def self.lookup(tag_name); end
  def self.register(tag_name, converter); end
  def self.unregister(tag_name); end
end
class ReverseMarkdown::Converters::Base
  def escape_keychars(string); end
  def extract_title(node); end
  def treat(node, state); end
  def treat_children(node, state); end
end
class ReverseMarkdown::Converters::A < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
  def prepend_space?(node); end
end
class ReverseMarkdown::Converters::Blockquote < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Br < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Bypass < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Code < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Del < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
  def disabled?; end
  def enabled?; end
end
class ReverseMarkdown::Converters::Div < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Drop < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Details < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
  def disabled?; end
  def enabled?; end
end
class ReverseMarkdown::Converters::Em < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::FigCaption < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Figure < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::H < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Hr < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Ignore < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Img < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Li < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
  def indentation_from(state); end
  def prefix_for(node); end
end
class ReverseMarkdown::Converters::Ol < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::P < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::PassThrough < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Pre < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
  def language(node); end
  def language_from_confluence_class(node); end
  def language_from_highlight_class(node); end
  def treat(node, state); end
end
class ReverseMarkdown::Converters::Strong < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Table < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Td < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
end
class ReverseMarkdown::Converters::Text < ReverseMarkdown::Converters::Base
  def convert(node, options = nil); end
  def preserve_keychars_within_backticks(text); end
  def preserve_nbsp(text); end
  def preserve_tags(text); end
  def remove_border_newlines(text); end
  def remove_inner_newlines(text); end
  def treat_empty(node); end
  def treat_text(node); end
end
class ReverseMarkdown::Converters::Tr < ReverseMarkdown::Converters::Base
  def convert(node, state = nil); end
  def table_header_row?(node); end
  def underline_for(node); end
end
