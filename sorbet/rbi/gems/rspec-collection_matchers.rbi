# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rspec-collection_matchers/all/rspec-collection_matchers.rbi
#
# rspec-collection_matchers-1.2.1

module RSpec
end
module RSpec::CollectionMatchers
end
module RSpec::Matchers
  def a_collection_having(n); end
  def have(n); end
  def have_at_least(n); end
  def have_at_most(n); end
  def have_exactly(n); end
end
class RSpec::CollectionMatchers::Have
  def ==(collection_or_owner); end
  def description; end
  def determine_collection(collection_or_owner); end
  def determine_query_method(collection); end
  def enumerator_class; end
  def errors_on_message(prefix, suffix = nil); end
  def failure_message; end
  def failure_message_for_should; end
  def failure_message_for_should_not; end
  def failure_message_when_negated; end
  def initialize(expected, relativity = nil); end
  def is_errors_on?; end
  def is_ignored_class?(collection); end
  def matches?(collection_or_owner); end
  def method_missing(method, *args, &block); end
  def not_a_collection; end
  def relative_expectation; end
  def relativities; end
  def respond_to?(m, include_all = nil); end
  def supports_value_expectations?; end
  include RSpec::Matchers::Composable
end
module RSpec::CollectionMatchers::Syntax
  def self.expression_generator; end
  def self.negative_expression(target_expression, matcher_expression); end
  def self.positive_expression(target_expression, matcher_expression); end
end
module RSpec::CollectionMatchers::Syntax::ShouldExpressionGenerator
  def self.negative_expression(target_expression, matcher_expression); end
  def self.positive_expression(target_expression, matcher_expression); end
end
module RSpec::CollectionMatchers::Syntax::ExpectExpressionGenerator
  def self.negative_expression(target_expression, matcher_expression); end
  def self.positive_expression(target_expression, matcher_expression); end
end
module ActiveModel::Validations
  def error_on(attribute, options = nil); end
  def errors_on(attribute, options = nil); end
end
