# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sassc/all/sassc.rbi
#
# sassc-2.4.0

module SassC
  def self.load_paths; end
end
module SassC::Native
  def _context_get_included_files(*arg0); end
  def _make_data_context(*arg0); end
  def boolean_get_value(*arg0); end
  def color_get_a(*arg0); end
  def color_get_b(*arg0); end
  def color_get_g(*arg0); end
  def color_get_r(*arg0); end
  def color_set_a(*arg0); end
  def color_set_b(*arg0); end
  def color_set_g(*arg0); end
  def color_set_r(*arg0); end
  def compile_data_context(*arg0); end
  def compile_file_context(*arg0); end
  def compiler_get_last_import(*arg0); end
  def context_get_error_column(*arg0); end
  def context_get_error_file(*arg0); end
  def context_get_error_json(*arg0); end
  def context_get_error_line(*arg0); end
  def context_get_error_message(*arg0); end
  def context_get_error_status(*arg0); end
  def context_get_options(*arg0); end
  def context_get_output_string(*arg0); end
  def context_get_source_map_string(*arg0); end
  def data_context_get_context(*arg0); end
  def data_context_get_options(*arg0); end
  def data_context_set_options(*arg0); end
  def delete_data_context(*arg0); end
  def delete_file_context(*arg0); end
  def error_get_message(*arg0); end
  def error_set_message(*arg0); end
  def file_context_get_context(*arg0); end
  def file_context_get_options(*arg0); end
  def file_context_set_options(*arg0); end
  def function_get_cookie(*arg0); end
  def function_get_function(*arg0); end
  def function_get_list_entry(*arg0); end
  def function_get_signature(*arg0); end
  def function_set_list_entry(*arg0); end
  def import_get_abs_path(*arg0); end
  def import_get_imp_path(*arg0); end
  def import_get_source(*arg0); end
  def import_set_list_entry(*arg0); end
  def list_get_length(*arg0); end
  def list_get_value(*arg0); end
  def list_set_value(*arg0); end
  def make_boolean(*arg0); end
  def make_color(*arg0); end
  def make_error(*arg0); end
  def make_file_context(*arg0); end
  def make_function(*arg0); end
  def make_function_list(*arg0); end
  def make_import_entry(*arg0); end
  def make_import_list(*arg0); end
  def make_importer(*arg0); end
  def make_list(*arg0); end
  def make_map(*arg0); end
  def make_number(*arg0); end
  def make_options(*arg0); end
  def make_qstring(*arg0); end
  def make_string(*arg0); end
  def map_get_key(*arg0); end
  def map_get_length(*arg0); end
  def map_get_value(*arg0); end
  def map_set_key(*arg0); end
  def map_set_value(*arg0); end
  def number_get_unit(*arg0); end
  def number_get_value(*arg0); end
  def option_get_c_functions(*arg0); end
  def option_get_include_path(*arg0); end
  def option_get_input_path(*arg0); end
  def option_get_is_indented_syntax_src(*arg0); end
  def option_get_omit_source_map_url(*arg0); end
  def option_get_output_path(*arg0); end
  def option_get_output_style(*arg0); end
  def option_get_precision(*arg0); end
  def option_get_source_comments(*arg0); end
  def option_get_source_map_contents(*arg0); end
  def option_get_source_map_embed(*arg0); end
  def option_get_source_map_file(*arg0); end
  def option_set_c_functions(*arg0); end
  def option_set_c_importers(*arg0); end
  def option_set_include_path(*arg0); end
  def option_set_input_path(*arg0); end
  def option_set_is_indented_syntax_src(*arg0); end
  def option_set_omit_source_map_url(*arg0); end
  def option_set_output_path(*arg0); end
  def option_set_output_style(*arg0); end
  def option_set_precision(*arg0); end
  def option_set_source_comments(*arg0); end
  def option_set_source_map_contents(*arg0); end
  def option_set_source_map_embed(*arg0); end
  def option_set_source_map_file(*arg0); end
  def sass2scss(*arg0); end
  def self._context_get_included_files(*arg0); end
  def self._make_data_context(*arg0); end
  def self.attach_function(*args); end
  def self.boolean_get_value(*arg0); end
  def self.color_get_a(*arg0); end
  def self.color_get_b(*arg0); end
  def self.color_get_g(*arg0); end
  def self.color_get_r(*arg0); end
  def self.color_set_a(*arg0); end
  def self.color_set_b(*arg0); end
  def self.color_set_g(*arg0); end
  def self.color_set_r(*arg0); end
  def self.compile_data_context(*arg0); end
  def self.compile_file_context(*arg0); end
  def self.compiler_get_last_import(*arg0); end
  def self.context_get_error_column(*arg0); end
  def self.context_get_error_file(*arg0); end
  def self.context_get_error_json(*arg0); end
  def self.context_get_error_line(*arg0); end
  def self.context_get_error_message(*arg0); end
  def self.context_get_error_status(*arg0); end
  def self.context_get_included_files(*args); end
  def self.context_get_options(*arg0); end
  def self.context_get_output_string(*arg0); end
  def self.context_get_source_map_string(*arg0); end
  def self.data_context_get_context(*arg0); end
  def self.data_context_get_options(*arg0); end
  def self.data_context_set_options(*arg0); end
  def self.delete_data_context(*arg0); end
  def self.delete_file_context(*arg0); end
  def self.error_get_message(*arg0); end
  def self.error_set_message(*arg0); end
  def self.file_context_get_context(*arg0); end
  def self.file_context_get_options(*arg0); end
  def self.file_context_set_options(*arg0); end
  def self.function_get_cookie(*arg0); end
  def self.function_get_function(*arg0); end
  def self.function_get_list_entry(*arg0); end
  def self.function_get_signature(*arg0); end
  def self.function_set_list_entry(*arg0); end
  def self.import_get_abs_path(*arg0); end
  def self.import_get_imp_path(*arg0); end
  def self.import_get_source(*arg0); end
  def self.import_set_list_entry(*arg0); end
  def self.list_get_length(*arg0); end
  def self.list_get_value(*arg0); end
  def self.list_set_value(*arg0); end
  def self.make_boolean(*arg0); end
  def self.make_color(*arg0); end
  def self.make_data_context(data); end
  def self.make_error(*arg0); end
  def self.make_file_context(*arg0); end
  def self.make_function(*arg0); end
  def self.make_function_list(*arg0); end
  def self.make_import_entry(*arg0); end
  def self.make_import_list(*arg0); end
  def self.make_importer(*arg0); end
  def self.make_list(*arg0); end
  def self.make_map(*arg0); end
  def self.make_number(*arg0); end
  def self.make_options(*arg0); end
  def self.make_qstring(*arg0); end
  def self.make_string(*arg0); end
  def self.map_get_key(*arg0); end
  def self.map_get_length(*arg0); end
  def self.map_get_value(*arg0); end
  def self.map_set_key(*arg0); end
  def self.map_set_value(*arg0); end
  def self.native_string(string); end
  def self.number_get_unit(*arg0); end
  def self.number_get_value(*arg0); end
  def self.option_get_c_functions(*arg0); end
  def self.option_get_include_path(*arg0); end
  def self.option_get_input_path(*arg0); end
  def self.option_get_is_indented_syntax_src(*arg0); end
  def self.option_get_omit_source_map_url(*arg0); end
  def self.option_get_output_path(*arg0); end
  def self.option_get_output_style(*arg0); end
  def self.option_get_precision(*arg0); end
  def self.option_get_source_comments(*arg0); end
  def self.option_get_source_map_contents(*arg0); end
  def self.option_get_source_map_embed(*arg0); end
  def self.option_get_source_map_file(*arg0); end
  def self.option_set_c_functions(*arg0); end
  def self.option_set_c_importers(*arg0); end
  def self.option_set_include_path(*arg0); end
  def self.option_set_input_path(*arg0); end
  def self.option_set_is_indented_syntax_src(*arg0); end
  def self.option_set_omit_source_map_url(*arg0); end
  def self.option_set_output_path(*arg0); end
  def self.option_set_output_style(*arg0); end
  def self.option_set_precision(*arg0); end
  def self.option_set_source_comments(*arg0); end
  def self.option_set_source_map_contents(*arg0); end
  def self.option_set_source_map_embed(*arg0); end
  def self.option_set_source_map_file(*arg0); end
  def self.return_string_array(ptr); end
  def self.sass2scss(*arg0); end
  def self.string_get_type(native_value); end
  def self.string_get_value(*arg0); end
  def self.string_is_quoted(*arg0); end
  def self.value_get_tag(*arg0); end
  def self.value_is_null(*arg0); end
  def self.version(*arg0); end
  def string_get_value(*arg0); end
  def string_is_quoted(*arg0); end
  def value_get_tag(*arg0); end
  def value_is_null(*arg0); end
  def version(*arg0); end
  extend FFI::Library
end
class SassC::Native::SassValue < FFI::Union
end
class SassC::Native::SassUnknown < FFI::Struct
end
class SassC::Native::SassBoolean < FFI::Struct
end
class SassC::Native::SassNumber < FFI::Struct
end
class SassC::Native::SassColor < FFI::Struct
end
class SassC::Native::SassString < FFI::Struct
end
class SassC::Native::SassList < FFI::Struct
end
class SassC::Native::SassMapPair < FFI::Struct
end
class SassC::Native::SassMap < FFI::Struct
end
class SassC::Native::SassNull < FFI::Struct
end
class SassC::Native::SassError < FFI::Struct
end
class SassC::Native::SassWarning < FFI::Struct
end
class SassC::Native::StringList < FFI::Struct
end
class SassC::ImportHandler
  def import_function; end
  def imports_to_native(imports); end
  def initialize(options); end
  def setup(native_options); end
end
class SassC::Importer
  def imports(path, parent_path); end
  def initialize(options); end
  def options; end
end
class SassC::Importer::Import
  def initialize(path, source: nil, source_map_path: nil); end
  def path; end
  def path=(arg0); end
  def source; end
  def source=(arg0); end
  def source_map_path; end
  def source_map_path=(arg0); end
  def to_s; end
end
module SassC::Util
  def abstract(obj); end
  def caller_info(entry = nil); end
  def clamp(value, min, max); end
  def deprecated(obj, message = nil); end
  def ironruby?; end
  def jruby?; end
  def jruby_version; end
  def map_keys(hash); end
  def paths(arrs); end
  def rails_env; end
  def rails_root; end
  def rbx?; end
  def relative_path_from(path, from); end
  def round(value); end
  def sass_warn(msg); end
  def self.abstract(obj); end
  def self.caller_info(entry = nil); end
  def self.clamp(value, min, max); end
  def self.deprecated(obj, message = nil); end
  def self.ironruby?; end
  def self.jruby?; end
  def self.jruby_version; end
  def self.map_keys(hash); end
  def self.paths(arrs); end
  def self.rails_env; end
  def self.rails_root; end
  def self.rbx?; end
  def self.relative_path_from(path, from); end
  def self.round(value); end
  def self.sass_warn(msg); end
  def self.silence_sass_warnings; end
  def self.windows?; end
  def silence_sass_warnings; end
  def windows?; end
  extend SassC::Util
end
class SassC::Util::NormalizedMap
  def [](k); end
  def []=(k, v); end
  def as_stored; end
  def delete(k); end
  def denormalize(key); end
  def dup; end
  def each; end
  def empty?; end
  def has_key?(k); end
  def initialize(map = nil); end
  def keys; end
  def map; end
  def method_missing(method, *args, &block); end
  def normalize(key); end
  def respond_to_missing?(method, include_private = nil); end
  def size; end
  def sort_by; end
  def to_a; end
  def to_hash; end
  def update(map); end
  def values; end
end
module SassC::Script
  def self.custom_functions(functions: nil); end
  def self.formatted_function_name(function_name, functions: nil); end
end
class SassC::Script::Value
  def ==(other); end
  def _perform(environment); end
  def assert_int!; end
  def bracketed; end
  def eql?(other); end
  def hash; end
  def initialize(value = nil); end
  def inspect; end
  def null?; end
  def options; end
  def options=(arg0); end
  def separator; end
  def source_range; end
  def source_range=(arg0); end
  def to_a; end
  def to_bool; end
  def to_h; end
  def to_i; end
  def to_s(opts = nil); end
  def to_sass(opts = nil); end
  def value; end
  def with_contents(contents, separator: nil, bracketed: nil); end
end
class SassC::Script::Value::Bool < SassC::Script::Value
  def self.new(value); end
  def to_bool; end
  def to_s(opts = nil); end
  def to_sass(opts = nil); end
  def value; end
end
class SassC::Script::Value::Number < SassC::Script::Value
  def basically_equal?(num1, num2); end
  def coerce(num_units, den_units); end
  def coercion_factor(from_units, to_units); end
  def comparable_to?(other); end
  def compute_units(this, other, operation); end
  def conversion_factor(from_unit, to_unit); end
  def convertable?(units); end
  def denominator_units; end
  def eql?(other); end
  def hash; end
  def initialize(value, numerator_units = nil, denominator_units = nil); end
  def inspect(opts = nil); end
  def int?; end
  def is_unit?(unit); end
  def legal_units?; end
  def normalize!; end
  def numerator_units; end
  def operate(other, operation); end
  def original; end
  def original=(arg0); end
  def sans_common_units(units1, units2); end
  def self.basically_equal?(num1, num2); end
  def self.epsilon; end
  def self.precision; end
  def self.precision=(digits); end
  def self.precision_factor; end
  def self.round(num); end
  def to_i; end
  def to_s(opts = nil); end
  def to_sass(opts = nil); end
  def unit_str; end
  def unitless?; end
  def value; end
end
class SassC::Script::Value::Color < SassC::Script::Value
  def ==(other_color); end
  def alpha; end
  def alpha_string; end
  def blue; end
  def eql?(other_color); end
  def green; end
  def hash; end
  def hlsa?; end
  def hue; end
  def initialize(red: nil, green: nil, blue: nil, hue: nil, saturation: nil, lightness: nil, alpha: nil); end
  def lightness; end
  def red; end
  def rgba?; end
  def saturation; end
  def to_s; end
  def value; end
end
class SassC::Script::Value::String < SassC::Script::Value
  def initialize(value, type = nil); end
  def inspect; end
  def plus(other); end
  def self.quote(contents, opts = nil); end
  def to_s(opts = nil); end
  def to_sass(opts = nil); end
  def type; end
  def value; end
end
class SassC::Script::Value::List < SassC::Script::Value
  def bracketed; end
  def element_needs_parens?(element); end
  def eq(other); end
  def hash; end
  def initialize(value, separator: nil, bracketed: nil); end
  def inspect; end
  def options=(options); end
  def self.assert_valid_index(list, n); end
  def sep_str(opts = nil); end
  def separator; end
  def to_a; end
  def to_h; end
  def to_s(opts = nil); end
  def to_sass(opts = nil); end
  def value; end
end
class SassC::Script::Value::Map < SassC::Script::Value
  def eq(other); end
  def hash; end
  def initialize(hash); end
  def inspect(opts = nil); end
  def options=(options); end
  def separator; end
  def to_a; end
  def to_h; end
  def to_s(opts = nil); end
  def to_sass(opts = nil); end
  def value; end
end
module SassC::Script::Functions
end
module SassC::Script::ValueConversion
  def self.from_native(native_value, options); end
  def self.to_native(value); end
end
class SassC::Script::ValueConversion::Base
  def initialize(value); end
end
class SassC::Script::ValueConversion::String < SassC::Script::ValueConversion::Base
  def to_native(opts = nil); end
end
class SassC::Script::ValueConversion::Number < SassC::Script::ValueConversion::Base
  def to_native; end
end
class SassC::Script::ValueConversion::Color < SassC::Script::ValueConversion::Base
  def to_native; end
end
class SassC::Script::ValueConversion::Map < SassC::Script::ValueConversion::Base
  def to_native; end
end
class SassC::Script::ValueConversion::List < SassC::Script::ValueConversion::Base
  def to_native; end
end
class SassC::Script::ValueConversion::Bool < SassC::Script::ValueConversion::Base
  def to_native; end
end
class SassC::FunctionsHandler
  def arguments_from_native_list(native_argument_list); end
  def error(message); end
  def initialize(options); end
  def setup(native_options, functions: nil); end
  def to_native_value(sass_value); end
end
class SassC::Dependency
  def filename; end
  def initialize(filename); end
  def options; end
  def self.from_filenames(filenames); end
end
class SassC::BaseError < StandardError
end
class SassC::NotRenderedError < SassC::BaseError
end
class SassC::InvalidStyleError < SassC::BaseError
end
class SassC::UnsupportedValue < SassC::BaseError
end
class SassC::SyntaxError < SassC::BaseError
  def backtrace; end
  def initialize(message, filename: nil, line: nil); end
  def sass_backtrace; end
end
class SassC::Engine
  def dependencies; end
  def filename; end
  def functions_handler; end
  def import_handler; end
  def initialize(template, options = nil); end
  def line_comments?; end
  def load_paths; end
  def omit_source_map_url?; end
  def options; end
  def output_style; end
  def output_style_enum; end
  def precision; end
  def quiet?; end
  def render; end
  def sass?; end
  def source_map; end
  def source_map_contents?; end
  def source_map_embed?; end
  def source_map_file; end
  def template; end
end
class SassC::Sass2Scss
  def self.convert(sass); end
end
