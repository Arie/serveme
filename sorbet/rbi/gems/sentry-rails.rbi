# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sentry-rails/all/sentry-rails.rbi
#
# sentry-rails-5.19.0

module Sentry
  def self.railtie_helpers_paths; end
  def self.railtie_namespace; end
  def self.railtie_routes_url_helpers(include_path_helpers = nil); end
  def self.table_name_prefix; end
  def self.use_relative_model_naming?; end
end
module Sentry::Rails
  extend Sentry::Integrable
end
module Sentry::Rails::Tracing
  def self.get_current_transaction; end
  def self.patch_active_support_notifications; end
  def self.register_subscribers(subscribers); end
  def self.remove_active_support_notifications_patch; end
  def self.subscribe_tracing_events; end
  def self.subscribed_tracing_events; end
  def self.subscribers; end
  def self.unsubscribe_tracing_events; end
end
module Sentry::Rails::Tracing::SentryNotificationExtension
end
class Sentry::Rails::Tracing::AbstractSubscriber
  def self.record_on_current_span(duration:, **options); end
  def self.subscribe!; end
  def self.subscribe_to_event(event_names); end
  def self.unsubscribe!; end
end
module Sentry::Rails::InstrumentPayloadCleanupHelper
  def cleanup_data(data); end
end
class Sentry::Rails::Tracing::ActionControllerSubscriber < Sentry::Rails::Tracing::AbstractSubscriber
  def self.subscribe!; end
  extend Sentry::Rails::InstrumentPayloadCleanupHelper
end
class Sentry::Rails::Tracing::ActionViewSubscriber < Sentry::Rails::Tracing::AbstractSubscriber
  def self.subscribe!; end
end
class Sentry::Rails::Tracing::ActiveRecordSubscriber < Sentry::Rails::Tracing::AbstractSubscriber
  def backtrace_cleaner; end
  def backtrace_cleaner=(arg0); end
  def backtrace_cleaner?; end
  def self.backtrace_cleaner; end
  def self.backtrace_cleaner=(value); end
  def self.backtrace_cleaner?; end
  def self.query_source_location; end
  def self.subscribe!; end
end
class Sentry::Rails::Tracing::ActiveStorageSubscriber < Sentry::Rails::Tracing::AbstractSubscriber
  def self.subscribe!; end
end
class Sentry::Configuration
  def rails; end
end
class Sentry::Rails::Configuration
  def active_support_logger_subscription_items; end
  def active_support_logger_subscription_items=(arg0); end
  def assets_regexp; end
  def assets_regexp=(arg0); end
  def db_query_source_threshold_ms; end
  def db_query_source_threshold_ms=(arg0); end
  def enable_db_query_source; end
  def enable_db_query_source=(arg0); end
  def initialize; end
  def register_error_subscriber; end
  def register_error_subscriber=(arg0); end
  def report_rescued_exceptions; end
  def report_rescued_exceptions=(arg0); end
  def skippable_job_adapters; end
  def skippable_job_adapters=(arg0); end
  def tracing_subscribers; end
  def tracing_subscribers=(arg0); end
end
class Sentry::Engine < Rails::Engine
end
class Sentry::Rails::CaptureExceptions < Sentry::Rack::CaptureExceptions
  def capture_exception(exception, env); end
  def collect_exception(env); end
  def initialize(_); end
  def show_exceptions?(exception, env); end
  def start_transaction(env, scope); end
  def transaction_op; end
end
class Sentry::Rails::RescuedExceptionInterceptor
  def call(env); end
  def initialize(app); end
  def report_rescued_exceptions?; end
end
class Sentry::Rails::BacktraceCleaner < ActiveSupport::BacktraceCleaner
  def initialize; end
end
class Sentry::Railtie < Rails::Railtie
  def activate_tracing; end
  def configure_cron_timezone; end
  def configure_project_root; end
  def configure_trusted_proxies; end
  def extend_controller_methods; end
  def inject_breadcrumbs_logger; end
  def override_streaming_reporter; end
  def patch_background_worker; end
  def register_error_subscriber(app); end
  def setup_backtrace_cleanup_callback; end
end
module Sentry::Rails::ControllerMethods
  def capture_exception(exception, options = nil); end
  def capture_message(message, options = nil); end
  def with_request_scope; end
end
module Sentry::Rails::ControllerTransaction
  def self.included(base); end
  def sentry_around_action; end
end
module Sentry::Rails::Overrides
end
module Sentry::Rails::Overrides::StreamingReporter
  def log_error(exception); end
end
module Sentry::Rails::Overrides::OldStreamingReporter
  def log_error_with_raven(exception); end
  def self.included(base); end
end
class Sentry::BackgroundWorker
end
module Sentry::Rails::Breadcrumb
end
module Sentry::Rails::Breadcrumb::ActiveSupportLogger
  def self.add(name, started, _finished, _unique_id, data); end
  def self.detach; end
  def self.inject(allowed_keys); end
end
module Sentry::Rails::ActionCableExtensions
end
class Sentry::Rails::ActionCableExtensions::ErrorHandler
  def self.capture(connection, transaction_name:, extra_context: nil, &block); end
  def self.finish_transaction(transaction, status_code); end
  def self.start_transaction(env, scope); end
end
module Sentry::Rails::ActionCableExtensions::Connection
  def handle_close; end
  def handle_open; end
end
module Sentry::Rails::ActionCableExtensions::Channel
end
module Sentry::Rails::ActionCableExtensions::Channel::Subscriptions
  def self.included(base); end
  def sentry_capture(hook, &block); end
end
module Sentry::Rails::ActionCableExtensions::Channel::Actions
  def dispatch_action(action, data); end
end
module Sentry::Rails::ActiveJobExtensions
  def already_supported_by_sentry_integration?; end
  def perform_now; end
end
class Sentry::Rails::ActiveJobExtensions::SentryReporter
  def self.finish_sentry_transaction(transaction, status); end
  def self.record(job, &block); end
  def self.sentry_context(job); end
  def self.sentry_serialize_arguments(argument); end
end
class Sentry::SendEventJob < ActiveJob::Base
  def perform(event, hint = nil); end
  def self.log_arguments; end
  def self.rescue_handlers; end
end
