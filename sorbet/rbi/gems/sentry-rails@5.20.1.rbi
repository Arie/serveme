# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-rails` gem.
# Please instead update this file by running `bin/tapioca gem sentry-rails`.


# source://sentry-rails//lib/sentry/rails/version.rb#1
module Sentry
  class << self
    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#216
    def add_attachment(**opts); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#311
    def add_breadcrumb(breadcrumb, **options); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#530
    def add_global_event_processor(&block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#104
    def apply_patches(config); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#72
    def background_worker; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#72
    def background_worker=(_arg0); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#80
    def backpressure_monitor; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#470
    def capture_check_in(slug, status, **options); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#454
    def capture_event(event); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#418
    def capture_exception(exception, **options, &block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#446
    def capture_message(message, **options, &block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#348
    def clone_hub_to_current_thread; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#249
    def close; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#156
    def configuration; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#364
    def configure_scope(&block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#574
    def continue_trace(env, **options); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#296
    def csp_report_uri; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#512
    def exception_captured?(exc); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#54
    def exception_locals_tp; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#547
    def get_baggage; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#332
    def get_current_client; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#321
    def get_current_hub; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#340
    def get_current_scope; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#304
    def get_main_hub; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#556
    def get_trace_propagation_headers; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#565
    def get_trace_propagation_meta; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#538
    def get_traceparent; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#227
    def init(&block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#284
    def initialized?; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#120
    def integrations; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#504
    def last_event_id; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#590
    def logger; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#84
    def metrics_aggregator; end

    # source://railties/7.2.1/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.2.1/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.2.1/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#128
    def register_integration(name, version); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#89
    def register_patch(key, patch = T.unsafe(nil), target = T.unsafe(nil), &block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#111
    def registered_patches; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#595
    def sdk_meta; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#163
    def send_event(*args); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#76
    def session_flusher; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#209
    def set_context(*args); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#195
    def set_extras(*args); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#188
    def set_tags(*args); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#202
    def set_user(*args); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#478
    def start_transaction(**options); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#582
    def sys_command(command); end

    # source://railties/7.2.1/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://railties/7.2.1/lib/rails/engine.rb#408
    def use_relative_model_naming?; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#600
    def utc_now; end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#496
    def with_child_span(**attributes, &block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#435
    def with_exception_captured(**options, &block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#389
    def with_scope(&block); end

    # source://sentry-ruby/5.20.1/lib/sentry-ruby.rb#409
    def with_session_tracking(&block); end
  end
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#7
class Sentry::Configuration
  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#361
  def initialize; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#29
  def app_dirs_pattern; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#29
  def app_dirs_pattern=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#36
  def async; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#426
  def async=(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#277
  def auto_session_tracking; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#277
  def auto_session_tracking=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#53
  def background_worker_max_queue; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#53
  def background_worker_max_queue=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#46
  def background_worker_threads; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#46
  def background_worker_threads=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#64
  def backtrace_cleanup_callback; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#64
  def backtrace_cleanup_callback=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#73
  def before_breadcrumb; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#467
  def before_breadcrumb=(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#87
  def before_send; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#455
  def before_send=(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#100
  def before_send_transaction; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#461
  def before_send_transaction=(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#112
  def breadcrumbs_logger; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#442
  def breadcrumbs_logger=(logger); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#155
  def capture_exception_frame_locals; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#169
  def capture_exception_frame_locals=(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#120
  def context_lines; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#120
  def context_lines=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#245
  def cron; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#556
  def csp_report_uri; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#129
  def debug; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#129
  def debug=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#578
  def detect_release; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#133
  def dsn; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#414
  def dsn=(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#283
  def enable_backpressure_handling; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#283
  def enable_backpressure_handling=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#268
  def enable_tracing; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#481
  def enable_tracing=(enable_tracing); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#137
  def enabled_environments; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#137
  def enabled_environments=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#534
  def enabled_in_current_env?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#303
  def enabled_patches; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#303
  def enabled_patches=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#124
  def environment; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#473
  def environment=(environment); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#591
  def error_messages; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#307
  def errors; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#521
  def exception_class_allowed?(exc); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#141
  def exclude_loggers; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#141
  def exclude_loggers=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#146
  def excluded_exceptions; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#146
  def excluded_exceptions=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#307
  def gem_specs; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#155
  def include_local_variables; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#155
  def include_local_variables=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#150
  def inspect_exception_causes_for_exclusion; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#150
  def inspect_exception_causes_for_exclusion=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#150
  def inspect_exception_causes_for_exclusion?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#292
  def instrumenter; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#477
  def instrumenter=(instrumenter); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#486
  def is_numeric_or_nil?(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#181
  def linecache; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#181
  def linecache=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#186
  def logger; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#186
  def logger=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#116
  def max_breadcrumbs; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#116
  def max_breadcrumbs=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#249
  def metrics; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#298
  def profiles_sample_rate; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#495
  def profiles_sample_rate=(profiles_sample_rate); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#549
  def profiling_enabled?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#191
  def project_root; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#191
  def project_root=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#200
  def propagate_traces; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#200
  def propagate_traces=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#204
  def rack_env_whitelist; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#204
  def rack_env_whitelist=(_arg0); end

  # Returns the value of attribute rails.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#8
  def rails; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#209
  def release; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#420
  def release=(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#511
  def sample_allowed?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#214
  def sample_rate; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#214
  def sample_rate=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#273
  def send_client_reports; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#273
  def send_client_reports=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#227
  def send_default_pii; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#227
  def send_default_pii=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#218
  def send_modules; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#218
  def send_modules=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#501
  def sending_allowed?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#505
  def sending_to_dsn_allowed?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#414
  def server=(value); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#237
  def server_name; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#237
  def server_name=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#517
  def session_tracking?; end

  # source://sentry-sidekiq/5.20.1/lib/sentry/sidekiq/configuration.rb#3
  def sidekiq; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#231
  def skip_rake_integration; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#231
  def skip_rake_integration=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#163
  def spotlight; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#163
  def spotlight=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#566
  def stacktrace_builder; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#196
  def strip_backtrace_load_path; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#196
  def strip_backtrace_load_path=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#288
  def trace_propagation_targets; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#288
  def trace_propagation_targets=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#253
  def traces_sample_rate; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#490
  def traces_sample_rate=(traces_sample_rate); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#263
  def traces_sampler; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#263
  def traces_sampler=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#543
  def tracing_enabled?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#241
  def transport; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#234
  def trusted_proxies; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#234
  def trusted_proxies=(_arg0); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#538
  def valid_sample_rate?(sample_rate); end

  private

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#633
  def capture_in_environment?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#649
  def environment_from_env; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#604
  def excluded_exception?(incoming_exception); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#610
  def excluded_exception_classes; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#614
  def get_exception_class(x); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#598
  def init_dsn(dsn_string); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#618
  def matches_exception?(excluded_exception_class, incoming_exception); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#673
  def processor_count; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#667
  def run_post_initialization_callbacks; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#663
  def running_on_heroku?; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#626
  def safe_const_get(x); end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#653
  def server_name_from_env; end

  # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#640
  def valid?; end

  class << self
    # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#356
    def add_post_initialization_callback(&block); end

    # source://sentry-ruby/5.20.1/lib/sentry/configuration.rb#351
    def post_initialization_callbacks; end
  end
end

# source://sentry-rails//lib/sentry/rails/engine.rb#2
class Sentry::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.2.1/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://sentry-rails//lib/sentry/rails/version.rb#2
module Sentry::Rails
  extend ::Sentry::Integrable
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#50
Sentry::Rails::ACTIVE_SUPPORT_LOGGER_SUBSCRIPTION_ITEMS_DEFAULT = T.let(T.unsafe(nil), Hash)

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#6
class Sentry::Rails::BacktraceCleaner < ::ActiveSupport::BacktraceCleaner
  # @return [BacktraceCleaner] a new instance of BacktraceCleaner
  #
  # source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#10
  def initialize; end
end

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#7
Sentry::Rails::BacktraceCleaner::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#8
Sentry::Rails::BacktraceCleaner::RENDER_TEMPLATE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#3
class Sentry::Rails::CaptureExceptions < ::Sentry::Rack::CaptureExceptions
  # @return [CaptureExceptions] a new instance of CaptureExceptions
  #
  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#7
  def initialize(_); end

  private

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#26
  def capture_exception(exception, env); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#17
  def collect_exception(env); end

  # @return [Boolean]
  #
  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#51
  def show_exceptions?(exception, env); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#35
  def start_transaction(env, scope); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#22
  def transaction_op; end
end

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#4
Sentry::Rails::CaptureExceptions::RAILS_7_1 = T.let(T.unsafe(nil), TrueClass)

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#5
Sentry::Rails::CaptureExceptions::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/configuration.rb#110
class Sentry::Rails::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#156
  def initialize; end

  # Hash of subscription items that will be shown in breadcrumbs active support logger.
  #
  # @return [Hash<String, Array<Symbol>>]
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#154
  def active_support_logger_subscription_items; end

  # Hash of subscription items that will be shown in breadcrumbs active support logger.
  #
  # @return [Hash<String, Array<Symbol>>]
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#154
  def active_support_logger_subscription_items=(_arg0); end

  # sentry-rails by default skips asset request' transactions by checking if the path matches
  #
  # ```rb
  # %r(\A/{0,2}#{::Rails.application.config.assets.prefix})
  # ```
  #
  # If you want to use a different pattern, you can configure the `assets_regexp` option like:
  #
  # ```rb
  # Sentry.init do |config|
  #   config.rails.assets_regexp = /my_regexp/
  # end
  # ```
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#150
  def assets_regexp; end

  # sentry-rails by default skips asset request' transactions by checking if the path matches
  #
  # ```rb
  # %r(\A/{0,2}#{::Rails.application.config.assets.prefix})
  # ```
  #
  # If you want to use a different pattern, you can configure the `assets_regexp` option like:
  #
  # ```rb
  # Sentry.init do |config|
  #   config.rails.assets_regexp = /my_regexp/
  # end
  # ```
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#150
  def assets_regexp=(_arg0); end

  # The threshold in milliseconds for the ActiveRecordSubscriber to capture the source location of the query
  # in the span data. Default is 100ms.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#135
  def db_query_source_threshold_ms; end

  # The threshold in milliseconds for the ActiveRecordSubscriber to capture the source location of the query
  # in the span data. Default is 100ms.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#135
  def db_query_source_threshold_ms=(_arg0); end

  # When the ActiveRecordSubscriber is enabled, capture the source location of the query in the span data.
  # This is enabled by default, but can be disabled by setting this to false.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#131
  def enable_db_query_source; end

  # When the ActiveRecordSubscriber is enabled, capture the source location of the query in the span data.
  # This is enabled by default, but can be disabled by setting this to false.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#131
  def enable_db_query_source=(_arg0); end

  # Rails 7.0 introduced a new error reporter feature, which the SDK once opted-in by default.
  # But after receiving multiple issue reports, the integration seemed to cause serious troubles to some users.
  # So the integration is now controlled by this configuration, which is disabled (false) by default.
  # More information can be found from: https://github.com/rails/rails/pull/43625#issuecomment-1072514175
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#115
  def register_error_subscriber; end

  # Rails 7.0 introduced a new error reporter feature, which the SDK once opted-in by default.
  # But after receiving multiple issue reports, the integration seemed to cause serious troubles to some users.
  # So the integration is now controlled by this configuration, which is disabled (false) by default.
  # More information can be found from: https://github.com/rails/rails/pull/43625#issuecomment-1072514175
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#115
  def register_error_subscriber=(_arg0); end

  # Rails catches exceptions in the ActionDispatch::ShowExceptions or
  # ActionDispatch::DebugExceptions middlewares, depending on the environment.
  # When `report_rescued_exceptions` is true (it is by default), Sentry will
  # report exceptions even when they are rescued by these middlewares.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#121
  def report_rescued_exceptions; end

  # Rails catches exceptions in the ActionDispatch::ShowExceptions or
  # ActionDispatch::DebugExceptions middlewares, depending on the environment.
  # When `report_rescued_exceptions` is true (it is by default), Sentry will
  # report exceptions even when they are rescued by these middlewares.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#121
  def report_rescued_exceptions=(_arg0); end

  # Some adapters, like sidekiq, already have their own sentry integration.
  # In those cases, we should skip ActiveJob's reporting to avoid duplicated reports.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#125
  def skippable_job_adapters; end

  # Some adapters, like sidekiq, already have their own sentry integration.
  # In those cases, we should skip ActiveJob's reporting to avoid duplicated reports.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#125
  def skippable_job_adapters=(_arg0); end

  # Returns the value of attribute tracing_subscribers.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#127
  def tracing_subscribers; end

  # Sets the attribute tracing_subscribers
  #
  # @param value the value to set the attribute tracing_subscribers to.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#127
  def tracing_subscribers=(_arg0); end
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#33
Sentry::Rails::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#3
module Sentry::Rails::InstrumentPayloadCleanupHelper
  # source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#6
  def cleanup_data(data); end
end

# source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#4
Sentry::Rails::InstrumentPayloadCleanupHelper::IGNORED_DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#3
class Sentry::Rails::RescuedExceptionInterceptor
  # @return [RescuedExceptionInterceptor] a new instance of RescuedExceptionInterceptor
  #
  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#4
  def initialize(app); end

  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#8
  def call(env); end

  # @return [Boolean]
  #
  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#19
  def report_rescued_exceptions?; end
end

# source://sentry-rails//lib/sentry/rails/tracing.rb#3
module Sentry::Rails::Tracing
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing.rb#69
    def get_current_transaction; end

    # this is necessary because instrumentation events don't record absolute start/finish time
    # so we need to retrieve the correct time this way
    #
    # source://sentry-rails//lib/sentry/rails/tracing.rb#42
    def patch_active_support_notifications; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#6
    def register_subscribers(subscribers); end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#59
    def remove_active_support_notifications_patch; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#18
    def subscribe_tracing_events; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#14
    def subscribed_tracing_events; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#10
    def subscribers; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#31
    def unsubscribe_tracing_events; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#4
class Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#39
    def record_on_current_span(duration:, **options); end

    # @raise [NotImplementedError]
    #
    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#6
    def subscribe!; end

    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#28
    def subscribe_to_event(event_names); end

    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#10
    def unsubscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#7
class Sentry::Rails::Tracing::ActionControllerSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  extend ::Sentry::Rails::InstrumentPayloadCleanupHelper

  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#14
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#10
Sentry::Rails::Tracing::ActionControllerSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#11
Sentry::Rails::Tracing::ActionControllerSubscriber::OP_NAME = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#12
Sentry::Rails::Tracing::ActionControllerSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#6
class Sentry::Rails::Tracing::ActionViewSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#11
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#7
Sentry::Rails::Tracing::ActionViewSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#9
Sentry::Rails::Tracing::ActionViewSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#8
Sentry::Rails::Tracing::ActionViewSubscriber::SPAN_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#8
class Sentry::Rails::Tracing::ActiveRecordSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner; end

  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner=(_arg0); end

  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner?; end

  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner=(value); end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner?; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#87
    def query_source_location; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#23
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#9
Sentry::Rails::Tracing::ActiveRecordSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#12
Sentry::Rails::Tracing::ActiveRecordSubscriber::EXCLUDED_EVENTS = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#11
Sentry::Rails::Tracing::ActiveRecordSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#10
Sentry::Rails::Tracing::ActiveRecordSubscriber::SPAN_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#14
Sentry::Rails::Tracing::ActiveRecordSubscriber::SUPPORT_SOURCE_LOCATION = T.let(T.unsafe(nil), TrueClass)

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#6
class Sentry::Rails::Tracing::ActiveStorageSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#24
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#7
Sentry::Rails::Tracing::ActiveStorageSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#22
Sentry::Rails::Tracing::ActiveStorageSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing.rb#4
Sentry::Rails::Tracing::START_TIMESTAMP_NAME = T.let(T.unsafe(nil), Symbol)

# it's just a container for the extended method
#
# source://sentry-rails//lib/sentry/rails/tracing.rb#74
module Sentry::Rails::Tracing::SentryNotificationExtension; end

# source://sentry-rails//lib/sentry/rails/version.rb#3
Sentry::Rails::VERSION = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/railtie.rb#6
class Sentry::Railtie < ::Rails::Railtie
  # source://sentry-rails//lib/sentry/rails/railtie.rb#125
  def activate_tracing; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#74
  def configure_cron_timezone; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#66
  def configure_project_root; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#70
  def configure_trusted_proxies; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#79
  def extend_controller_methods; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#95
  def inject_breadcrumbs_logger; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#117
  def override_streaming_reporter; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#91
  def patch_background_worker; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#134
  def register_error_subscriber(app); end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#109
  def setup_backtrace_cleanup_callback; end
end

class Sentry::SendEventJob < ::ActiveJob::Base
  def perform(event, hint = T.unsafe(nil)); end

  class << self
    # source://activejob/7.2.1/lib/active_job/logging.rb#26
    def log_arguments; end

    # source://activesupport/7.2.1/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end
