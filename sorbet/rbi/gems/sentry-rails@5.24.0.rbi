# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-rails` gem.
# Please instead update this file by running `bin/tapioca gem sentry-rails`.


# source://sentry-rails//lib/sentry/rails/version.rb#3
module Sentry
  class << self
    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#228
    def add_attachment(**opts); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#330
    def add_breadcrumb(breadcrumb, **options); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#568
    def add_global_event_processor(&block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#116
    def apply_patches(config); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#84
    def background_worker; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#84
    def background_worker=(_arg0); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#92
    def backpressure_monitor; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#489
    def capture_check_in(slug, status, **options); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#473
    def capture_event(event); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#437
    def capture_exception(exception, **options, &block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#508
    def capture_log(message, **options); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#465
    def capture_message(message, **options, &block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#367
    def clone_hub_to_current_thread; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#263
    def close; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#168
    def configuration; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#383
    def configure_scope(&block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#612
    def continue_trace(env, **options); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#312
    def csp_report_uri; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#680
    def dependency_installed?(name); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#550
    def exception_captured?(exc); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#66
    def exception_locals_tp; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#585
    def get_baggage; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#351
    def get_current_client; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#340
    def get_current_hub; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#359
    def get_current_scope; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#320
    def get_main_hub; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#594
    def get_trace_propagation_headers; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#603
    def get_trace_propagation_meta; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#576
    def get_traceparent; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#239
    def init(&block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#300
    def initialized?; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#132
    def integrations; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#542
    def last_event_id; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#637
    def logger; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#96
    def metrics_aggregator; end

    # source://railties/8.0.2/lib/rails/engine.rb#413
    def railtie_helpers_paths; end

    # source://railties/8.0.2/lib/rails/engine.rb#396
    def railtie_namespace; end

    # source://railties/8.0.2/lib/rails/engine.rb#417
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#140
    def register_integration(name, version); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#101
    def register_patch(key, patch = T.unsafe(nil), target = T.unsafe(nil), &block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#123
    def registered_patches; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#665
    def sdk_logger; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#670
    def sdk_meta; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#175
    def send_event(*args); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#88
    def session_flusher; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#221
    def set_context(*args); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#207
    def set_extras(*args); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#200
    def set_tags(*args); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#214
    def set_user(*args); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#516
    def start_transaction(**options); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#657
    def sys_command(command); end

    # source://railties/8.0.2/lib/rails/engine.rb#402
    def table_name_prefix; end

    # source://railties/8.0.2/lib/rails/engine.rb#409
    def use_relative_model_naming?; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#675
    def utc_now; end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#534
    def with_child_span(**attributes, &block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#454
    def with_exception_captured(**options, &block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#408
    def with_scope(&block); end

    # source://sentry-ruby/5.24.0/lib/sentry-ruby.rb#428
    def with_session_tracking(&block); end
  end
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#10
class Sentry::Configuration
  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#427
  def initialize; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#31
  def app_dirs_pattern; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#31
  def app_dirs_pattern=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#38
  def async; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#515
  def async=(value); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#296
  def auto_session_tracking; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#296
  def auto_session_tracking=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#55
  def background_worker_max_queue; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#55
  def background_worker_max_queue=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#48
  def background_worker_threads; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#48
  def background_worker_threads=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#66
  def backtrace_cleanup_callback; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#66
  def backtrace_cleanup_callback=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#75
  def before_breadcrumb; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#556
  def before_breadcrumb=(value); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#89
  def before_send; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#544
  def before_send=(value); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#102
  def before_send_transaction; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#550
  def before_send_transaction=(value); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#114
  def breadcrumbs_logger; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#531
  def breadcrumbs_logger=(logger); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#157
  def capture_exception_frame_locals; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#171
  def capture_exception_frame_locals=(value); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#122
  def context_lines; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#122
  def context_lines=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#259
  def cron; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#655
  def csp_report_uri; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#131
  def debug; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#131
  def debug=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#677
  def detect_release; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#135
  def dsn; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#503
  def dsn=(value); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#302
  def enable_backpressure_handling; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#302
  def enable_backpressure_handling=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#281
  def enable_logs; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#281
  def enable_logs=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#287
  def enable_tracing; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#570
  def enable_tracing=(enable_tracing); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#139
  def enabled_environments; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#139
  def enabled_environments=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#633
  def enabled_in_current_env?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#326
  def enabled_patches; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#326
  def enabled_patches=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#126
  def environment; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#562
  def environment=(environment); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#690
  def error_messages; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#334
  def errors; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#620
  def exception_class_allowed?(exc); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#143
  def exclude_loggers; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#143
  def exclude_loggers=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#148
  def excluded_exceptions; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#148
  def excluded_exceptions=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#334
  def gem_specs; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#157
  def include_local_variables; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#157
  def include_local_variables=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#152
  def inspect_exception_causes_for_exclusion; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#152
  def inspect_exception_causes_for_exclusion=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#152
  def inspect_exception_causes_for_exclusion?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#311
  def instrumenter; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#566
  def instrumenter=(instrumenter); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#183
  def linecache; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#183
  def linecache=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#197
  def logger; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#191
  def logger=(logger); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#118
  def max_breadcrumbs; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#118
  def max_breadcrumbs=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#330
  def max_log_events; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#330
  def max_log_events=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#263
  def metrics; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#315
  def profiler_class; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#589
  def profiler_class=(profiler_class); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#321
  def profiles_sample_rate; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#585
  def profiles_sample_rate=(profiles_sample_rate); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#648
  def profiling_enabled?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#205
  def project_root; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#205
  def project_root=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#214
  def propagate_traces; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#214
  def propagate_traces=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#218
  def rack_env_whitelist; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#218
  def rack_env_whitelist=(_arg0); end

  # Returns the value of attribute rails.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#11
  def rails; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#223
  def release; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#509
  def release=(value); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#610
  def sample_allowed?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#228
  def sample_rate; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#228
  def sample_rate=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#188
  def sdk_logger; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#188
  def sdk_logger=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#292
  def send_client_reports; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#292
  def send_client_reports=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#241
  def send_default_pii; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#241
  def send_default_pii=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#232
  def send_modules; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#232
  def send_modules=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#600
  def sending_allowed?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#604
  def sending_to_dsn_allowed?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#503
  def server=(value); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#251
  def server_name; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#251
  def server_name=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#616
  def session_tracking?; end

  # source://sentry-sidekiq/5.24.0/lib/sentry/sidekiq/configuration.rb#5
  def sidekiq; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#245
  def skip_rake_integration; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#245
  def skip_rake_integration=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#165
  def spotlight; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#165
  def spotlight=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#665
  def stacktrace_builder; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#210
  def strip_backtrace_load_path; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#210
  def strip_backtrace_load_path=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#307
  def trace_propagation_targets; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#307
  def trace_propagation_targets=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#267
  def traces_sample_rate; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#581
  def traces_sample_rate=(traces_sample_rate); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#277
  def traces_sampler; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#277
  def traces_sampler=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#642
  def tracing_enabled?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#255
  def transport; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#248
  def trusted_proxies; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#248
  def trusted_proxies=(_arg0); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#637
  def valid_sample_rate?(sample_rate); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#485
  def validate; end

  private

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#732
  def capture_in_environment?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#748
  def environment_from_env; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#703
  def excluded_exception?(incoming_exception); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#709
  def excluded_exception_classes; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#713
  def get_exception_class(x); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#697
  def init_dsn(dsn_string); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#717
  def matches_exception?(excluded_exception_class, incoming_exception); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#772
  def processor_count; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#766
  def run_post_initialization_callbacks; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#762
  def running_on_heroku?; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#725
  def safe_const_get(x); end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#752
  def server_name_from_env; end

  # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#739
  def valid?; end

  class << self
    # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#383
    def add_post_initialization_callback(&block); end

    # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#378
    def post_initialization_callbacks; end

    # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#391
    def validate(attribute, optional: T.unsafe(nil), type: T.unsafe(nil)); end

    # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#387
    def validations; end

    private

    # source://sentry-ruby/5.24.0/lib/sentry/configuration.rb#401
    def build_validation_proc(optional, type); end
  end
end

# source://sentry-rails//lib/sentry/rails/engine.rb#4
class Sentry::Engine < ::Rails::Engine
  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end
  end
end

# source://sentry-rails//lib/sentry/rails/version.rb#4
module Sentry::Rails
  extend ::Sentry::Integrable
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#53
Sentry::Rails::ACTIVE_SUPPORT_LOGGER_SUBSCRIPTION_ITEMS_DEFAULT = T.let(T.unsafe(nil), Hash)

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#8
class Sentry::Rails::BacktraceCleaner < ::ActiveSupport::BacktraceCleaner
  # @return [BacktraceCleaner] a new instance of BacktraceCleaner
  #
  # source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#12
  def initialize; end
end

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#9
Sentry::Rails::BacktraceCleaner::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sentry-rails//lib/sentry/rails/backtrace_cleaner.rb#10
Sentry::Rails::BacktraceCleaner::RENDER_TEMPLATE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#5
class Sentry::Rails::CaptureExceptions < ::Sentry::Rack::CaptureExceptions
  # @return [CaptureExceptions] a new instance of CaptureExceptions
  #
  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#9
  def initialize(_); end

  private

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#28
  def capture_exception(exception, env); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#19
  def collect_exception(env); end

  # @return [Boolean]
  #
  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#53
  def show_exceptions?(exception, env); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#37
  def start_transaction(env, scope); end

  # source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#24
  def transaction_op; end
end

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#6
Sentry::Rails::CaptureExceptions::RAILS_7_1 = T.let(T.unsafe(nil), TrueClass)

# source://sentry-rails//lib/sentry/rails/capture_exceptions.rb#7
Sentry::Rails::CaptureExceptions::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/configuration.rb#113
class Sentry::Rails::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#162
  def initialize; end

  # Set this option to true if you want Sentry to capture each retry failure
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#160
  def active_job_report_on_retry_error; end

  # Set this option to true if you want Sentry to capture each retry failure
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#160
  def active_job_report_on_retry_error=(_arg0); end

  # Hash of subscription items that will be shown in breadcrumbs active support logger.
  #
  # @return [Hash<String, Array<Symbol>>]
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#157
  def active_support_logger_subscription_items; end

  # Hash of subscription items that will be shown in breadcrumbs active support logger.
  #
  # @return [Hash<String, Array<Symbol>>]
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#157
  def active_support_logger_subscription_items=(_arg0); end

  # sentry-rails by default skips asset request' transactions by checking if the path matches
  #
  # ```rb
  # %r(\A/{0,2}#{::Rails.application.config.assets.prefix})
  # ```
  #
  # If you want to use a different pattern, you can configure the `assets_regexp` option like:
  #
  # ```rb
  # Sentry.init do |config|
  #   config.rails.assets_regexp = /my_regexp/
  # end
  # ```
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#153
  def assets_regexp; end

  # sentry-rails by default skips asset request' transactions by checking if the path matches
  #
  # ```rb
  # %r(\A/{0,2}#{::Rails.application.config.assets.prefix})
  # ```
  #
  # If you want to use a different pattern, you can configure the `assets_regexp` option like:
  #
  # ```rb
  # Sentry.init do |config|
  #   config.rails.assets_regexp = /my_regexp/
  # end
  # ```
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#153
  def assets_regexp=(_arg0); end

  # The threshold in milliseconds for the ActiveRecordSubscriber to capture the source location of the query
  # in the span data. Default is 100ms.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#138
  def db_query_source_threshold_ms; end

  # The threshold in milliseconds for the ActiveRecordSubscriber to capture the source location of the query
  # in the span data. Default is 100ms.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#138
  def db_query_source_threshold_ms=(_arg0); end

  # When the ActiveRecordSubscriber is enabled, capture the source location of the query in the span data.
  # This is enabled by default, but can be disabled by setting this to false.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#134
  def enable_db_query_source; end

  # When the ActiveRecordSubscriber is enabled, capture the source location of the query in the span data.
  # This is enabled by default, but can be disabled by setting this to false.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#134
  def enable_db_query_source=(_arg0); end

  # Rails 7.0 introduced a new error reporter feature, which the SDK once opted-in by default.
  # But after receiving multiple issue reports, the integration seemed to cause serious troubles to some users.
  # So the integration is now controlled by this configuration, which is disabled (false) by default.
  # More information can be found from: https://github.com/rails/rails/pull/43625#issuecomment-1072514175
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#118
  def register_error_subscriber; end

  # Rails 7.0 introduced a new error reporter feature, which the SDK once opted-in by default.
  # But after receiving multiple issue reports, the integration seemed to cause serious troubles to some users.
  # So the integration is now controlled by this configuration, which is disabled (false) by default.
  # More information can be found from: https://github.com/rails/rails/pull/43625#issuecomment-1072514175
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#118
  def register_error_subscriber=(_arg0); end

  # Rails catches exceptions in the ActionDispatch::ShowExceptions or
  # ActionDispatch::DebugExceptions middlewares, depending on the environment.
  # When `report_rescued_exceptions` is true (it is by default), Sentry will
  # report exceptions even when they are rescued by these middlewares.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#124
  def report_rescued_exceptions; end

  # Rails catches exceptions in the ActionDispatch::ShowExceptions or
  # ActionDispatch::DebugExceptions middlewares, depending on the environment.
  # When `report_rescued_exceptions` is true (it is by default), Sentry will
  # report exceptions even when they are rescued by these middlewares.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#124
  def report_rescued_exceptions=(_arg0); end

  # Some adapters, like sidekiq, already have their own sentry integration.
  # In those cases, we should skip ActiveJob's reporting to avoid duplicated reports.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#128
  def skippable_job_adapters; end

  # Some adapters, like sidekiq, already have their own sentry integration.
  # In those cases, we should skip ActiveJob's reporting to avoid duplicated reports.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#128
  def skippable_job_adapters=(_arg0); end

  # Returns the value of attribute tracing_subscribers.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#130
  def tracing_subscribers; end

  # Sets the attribute tracing_subscribers
  #
  # @param value the value to set the attribute tracing_subscribers to.
  #
  # source://sentry-rails//lib/sentry/rails/configuration.rb#130
  def tracing_subscribers=(_arg0); end
end

# source://sentry-rails//lib/sentry/rails/configuration.rb#36
Sentry::Rails::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#5
module Sentry::Rails::InstrumentPayloadCleanupHelper
  # source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#8
  def cleanup_data(data); end
end

# source://sentry-rails//lib/sentry/rails/instrument_payload_cleanup_helper.rb#6
Sentry::Rails::InstrumentPayloadCleanupHelper::IGNORED_DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#5
class Sentry::Rails::RescuedExceptionInterceptor
  # @return [RescuedExceptionInterceptor] a new instance of RescuedExceptionInterceptor
  #
  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#6
  def initialize(app); end

  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#10
  def call(env); end

  # @return [Boolean]
  #
  # source://sentry-rails//lib/sentry/rails/rescued_exception_interceptor.rb#21
  def report_rescued_exceptions?; end
end

# source://sentry-rails//lib/sentry/rails/tracing.rb#5
module Sentry::Rails::Tracing
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing.rb#71
    def get_current_transaction; end

    # this is necessary because instrumentation events don't record absolute start/finish time
    # so we need to retrieve the correct time this way
    #
    # source://sentry-rails//lib/sentry/rails/tracing.rb#44
    def patch_active_support_notifications; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#8
    def register_subscribers(subscribers); end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#61
    def remove_active_support_notifications_patch; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#20
    def subscribe_tracing_events; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#16
    def subscribed_tracing_events; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#12
    def subscribers; end

    # source://sentry-rails//lib/sentry/rails/tracing.rb#33
    def unsubscribe_tracing_events; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#6
class Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#41
    def record_on_current_span(duration:, **options); end

    # @raise [NotImplementedError]
    #
    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#8
    def subscribe!; end

    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#30
    def subscribe_to_event(event_names); end

    # source://sentry-rails//lib/sentry/rails/tracing/abstract_subscriber.rb#12
    def unsubscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#9
class Sentry::Rails::Tracing::ActionControllerSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  extend ::Sentry::Rails::InstrumentPayloadCleanupHelper

  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#16
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#12
Sentry::Rails::Tracing::ActionControllerSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#13
Sentry::Rails::Tracing::ActionControllerSubscriber::OP_NAME = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_controller_subscriber.rb#14
Sentry::Rails::Tracing::ActionControllerSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#8
class Sentry::Rails::Tracing::ActionViewSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#13
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#9
Sentry::Rails::Tracing::ActionViewSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#11
Sentry::Rails::Tracing::ActionViewSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/action_view_subscriber.rb#10
Sentry::Rails::Tracing::ActionViewSubscriber::SPAN_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#8
class Sentry::Rails::Tracing::ActiveRecordSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner; end

  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner=(_arg0); end

  # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
  def backtrace_cleaner?; end

  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner=(value); end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#17
    def backtrace_cleaner?; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#88
    def query_source_location; end

    # source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#23
    def subscribe!; end

    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_backtrace_cleaner; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_backtrace_cleaner=(new_value); end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#9
Sentry::Rails::Tracing::ActiveRecordSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#12
Sentry::Rails::Tracing::ActiveRecordSubscriber::EXCLUDED_EVENTS = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#11
Sentry::Rails::Tracing::ActiveRecordSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#10
Sentry::Rails::Tracing::ActiveRecordSubscriber::SPAN_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_record_subscriber.rb#14
Sentry::Rails::Tracing::ActiveRecordSubscriber::SUPPORT_SOURCE_LOCATION = T.let(T.unsafe(nil), TrueClass)

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#8
class Sentry::Rails::Tracing::ActiveStorageSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#26
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#9
Sentry::Rails::Tracing::ActiveStorageSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_storage_subscriber.rb#24
Sentry::Rails::Tracing::ActiveStorageSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#8
class Sentry::Rails::Tracing::ActiveSupportSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    # source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#46
    def operation_name(event_name); end

    # source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#31
    def subscribe!; end
  end
end

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#27
Sentry::Rails::Tracing::ActiveSupportSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#23
Sentry::Rails::Tracing::ActiveSupportSubscriber::FLUSH_EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#9
Sentry::Rails::Tracing::ActiveSupportSubscriber::READ_EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#19
Sentry::Rails::Tracing::ActiveSupportSubscriber::REMOVE_EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#29
Sentry::Rails::Tracing::ActiveSupportSubscriber::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/tracing/active_support_subscriber.rb#13
Sentry::Rails::Tracing::ActiveSupportSubscriber::WRITE_EVENT_NAMES = T.let(T.unsafe(nil), Array)

# source://sentry-rails//lib/sentry/rails/tracing.rb#6
Sentry::Rails::Tracing::START_TIMESTAMP_NAME = T.let(T.unsafe(nil), Symbol)

# it's just a container for the extended method
#
# source://sentry-rails//lib/sentry/rails/tracing.rb#76
module Sentry::Rails::Tracing::SentryNotificationExtension; end

# source://sentry-rails//lib/sentry/rails/version.rb#5
Sentry::Rails::VERSION = T.let(T.unsafe(nil), String)

# source://sentry-rails//lib/sentry/rails/railtie.rb#8
class Sentry::Railtie < ::Rails::Railtie
  # source://sentry-rails//lib/sentry/rails/railtie.rb#132
  def activate_tracing; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#81
  def configure_cron_timezone; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#73
  def configure_project_root; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#77
  def configure_trusted_proxies; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#86
  def extend_controller_methods; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#102
  def inject_breadcrumbs_logger; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#124
  def override_streaming_reporter; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#98
  def patch_background_worker; end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#141
  def register_error_subscriber(app); end

  # source://sentry-rails//lib/sentry/rails/railtie.rb#116
  def setup_backtrace_cleanup_callback; end
end

class Sentry::SendEventJob < ::ActiveJob::Base
  def perform(event, hint = T.unsafe(nil)); end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_log_arguments; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_log_arguments=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_rescue_handlers; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_rescue_handlers=(new_value); end
  end
end
