# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-raven` gem.
# Please instead update this file by running `bin/tapioca gem sentry-raven`.

# source://american_date/1.2.0/lib/american_date.rb#16
::AMERICAN_DATE_RE = T.let(T.unsafe(nil), Regexp)

# source://ruby-openid/2.9.2/lib/openid/fetchers.rb#13
::MAX_RESPONSE_KB = T.let(T.unsafe(nil), Integer)

# source://yard/0.9.34/lib/yard.rb#61
::RUBY18 = T.let(T.unsafe(nil), FalseClass)

# source://yard/0.9.34/lib/yard.rb#62
::RUBY19 = T.let(T.unsafe(nil), TrueClass)

# source://sentry-raven//lib/raven/core_ext/object/deep_dup.rb#22
class Array
  include ::Enumerable

  # Returns a deep copy of array.
  #
  #   array = [1, [2, 3]]
  #   dup   = array.deep_dup
  #   dup[1][2] = 4
  #
  #   array[1][2] # => nil
  #   dup[1][2]   # => 4
  #
  # source://sentry-raven//lib/raven/core_ext/object/deep_dup.rb#31
  def deep_dup; end
end

# source://activesupport/7.0.5/lib/active_support/core_ext/array/deprecated_conversions.rb#4
Array::NOT_SET = T.let(T.unsafe(nil), Object)

# source://sentry-raven//lib/raven/core_ext/object/duplicable.rb#107
class BigDecimal < ::Numeric
  # BigDecimals are duplicable:
  #
  #   BigDecimal("1.2").duplicable? # => true
  #   BigDecimal("1.2").dup         # => #<BigDecimal:...,'0.12E1',18(18)>
  #
  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/core_ext/object/duplicable.rb#112
  def duplicable?; end
end

BigDecimal::EXCEPTION_NaN = T.let(T.unsafe(nil), Integer)
BigDecimal::VERSION = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/helpers/deprecation_helper.rb#1
module DeprecationHelper
  class << self
    # source://sentry-raven//lib/raven/helpers/deprecation_helper.rb#2
    def deprecate_dasherized_filename(correct_filename); end

    # source://sentry-raven//lib/raven/helpers/deprecation_helper.rb#6
    def deprecate_old_breadcrumbs_configuration(logger); end
  end
end

# source://sentry-raven//lib/raven/core_ext/object/deep_dup.rb#36
class Hash
  include ::Enumerable

  # Returns a deep copy of hash.
  #
  #   hash = { a: { b: 'b' } }
  #   dup  = hash.deep_dup
  #   dup[:a][:c] = 'c'
  #
  #   hash[:a][:c] # => nil
  #   dup[:a][:c]  # => "c"
  #
  # source://sentry-raven//lib/raven/core_ext/object/deep_dup.rb#45
  def deep_dup; end
end

# source://sentry-raven//lib/raven/core_ext/object/duplicable.rb#117
class Method
  # Methods are not duplicable:
  #
  #  method(:puts).duplicable? # => false
  #  method(:puts).dup         # => TypeError: allocator undefined for Method
  #
  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/core_ext/object/duplicable.rb#122
  def duplicable?; end
end

# source://sentry-raven//lib/raven/core_ext/object/duplicable.rb#92
class Numeric
  include ::Comparable
end

# source://activesupport/7.0.5/lib/active_support/core_ext/numeric/bytes.rb#9
Numeric::EXABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport/7.0.5/lib/active_support/core_ext/numeric/bytes.rb#6
Numeric::GIGABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport/7.0.5/lib/active_support/core_ext/numeric/bytes.rb#4
Numeric::KILOBYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport/7.0.5/lib/active_support/core_ext/numeric/bytes.rb#5
Numeric::MEGABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport/7.0.5/lib/active_support/core_ext/numeric/bytes.rb#8
Numeric::PETABYTE = T.let(T.unsafe(nil), Integer)

# source://activesupport/7.0.5/lib/active_support/core_ext/numeric/bytes.rb#7
Numeric::TERABYTE = T.let(T.unsafe(nil), Integer)

# --
# Most objects are cloneable, but not all. For example you can't dup methods:
#
#   method(:puts).dup # => TypeError: allocator undefined for Method
#
# Classes may signal their instances are not duplicable removing +dup+/+clone+
# or raising exceptions from them. So, to dup an arbitrary object you normally
# use an optimistic approach and are ready to catch an exception, say:
#
#   arbitrary_object.dup rescue object
#
# Rails dups objects in a few critical spots where they are not that arbitrary.
# That rescue is very expensive (like 40 times slower than a predicate), and it
# is often triggered.
#
# That's why we hardcode the following cases and check duplicable? instead of
# using that rescue idiom.
# ++
#
# source://sentry-raven//lib/raven/core_ext/object/duplicable.rb#25
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  # Returns a deep copy of object if it's duplicable. If it's
  # not duplicable, returns +self+.
  #
  #   object = Object.new
  #   dup    = object.deep_dup
  #   dup.instance_variable_set(:@a, 1)
  #
  #   object.instance_variable_defined?(:@a) # => false
  #   dup.instance_variable_defined?(:@a)    # => true
  #
  # source://sentry-raven//lib/raven/core_ext/object/deep_dup.rb#17
  def deep_dup; end

  # Can you safely dup this object?
  #
  # False for method objects;
  # true otherwise.
  #
  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/core_ext/object/duplicable.rb#30
  def duplicable?; end
end

# source://sentry-raven//lib/raven/integrations/rake.rb#5
module Rake
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils
end

# source://sentry-raven//lib/raven/integrations/rake.rb#6
class Rake::Application
  # source://rake/13.0.6/lib/rake/application.rb#49
  def initialize; end

  # source://rake/13.0.6/lib/rake/application.rb#777
  def add_import(fn); end

  # source://rake/13.0.6/lib/rake/application.rb#139
  def add_loader(ext, loader); end

  # source://rake/13.0.6/lib/rake/application.rb#758
  def collect_command_line_tasks(args); end

  # source://rake/13.0.6/lib/rake/application.rb#772
  def default_task_name; end

  # source://rake/13.0.6/lib/rake/application.rb#258
  def deprecate(old_usage, new_usage, call_site); end

  # source://rake/13.0.6/lib/rake/application.rb#222
  def display_cause_details(ex); end

  # source://sentry-raven//lib/raven/integrations/rake.rb#8
  def display_error_message(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#245
  def display_exception_backtrace(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#214
  def display_exception_details(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#229
  def display_exception_details_seen; end

  # source://rake/13.0.6/lib/rake/application.rb#237
  def display_exception_message_details(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#381
  def display_prerequisites; end

  # source://rake/13.0.6/lib/rake/application.rb#298
  def display_tasks_and_comments; end

  # source://rake/13.0.6/lib/rake/application.rb#349
  def dynamic_width; end

  # source://rake/13.0.6/lib/rake/application.rb#353
  def dynamic_width_stty; end

  # source://rake/13.0.6/lib/rake/application.rb#357
  def dynamic_width_tput; end

  # source://rake/13.0.6/lib/rake/application.rb#201
  def exit_because_of_exception(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#678
  def find_rakefile_location; end

  # source://rake/13.0.6/lib/rake/application.rb#644
  def handle_options(argv); end

  # source://rake/13.0.6/lib/rake/application.rb#233
  def has_cause?(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#274
  def have_rakefile; end

  # source://rake/13.0.6/lib/rake/application.rb#88
  def init(app_name = T.unsafe(nil), argv = T.unsafe(nil)); end

  # source://rake/13.0.6/lib/rake/application.rb#157
  def invoke_task(task_string); end

  # source://rake/13.0.6/lib/rake/application.rb#782
  def load_imports; end

  # source://rake/13.0.6/lib/rake/application.rb#102
  def load_rakefile; end

  # source://rake/13.0.6/lib/rake/application.rb#24
  def name; end

  # source://rake/13.0.6/lib/rake/application.rb#145
  def options; end

  # source://rake/13.0.6/lib/rake/application.rb#206
  def orig_display_error_messsage(ex); end

  # source://rake/13.0.6/lib/rake/application.rb#27
  def original_dir; end

  # source://rake/13.0.6/lib/rake/application.rb#163
  def parse_task_string(string); end

  # source://rake/13.0.6/lib/rake/application.rb#690
  def print_rakefile_directory(location); end

  # source://rake/13.0.6/lib/rake/application.rb#664
  def rake_require(file_name, paths = T.unsafe(nil), loaded = T.unsafe(nil)); end

  # source://rake/13.0.6/lib/rake/application.rb#30
  def rakefile; end

  # source://rake/13.0.6/lib/rake/application.rb#798
  def rakefile_location(backtrace = T.unsafe(nil)); end

  # source://rake/13.0.6/lib/rake/application.rb#695
  def raw_load_rakefile; end

  # source://rake/13.0.6/lib/rake/application.rb#79
  def run(argv = T.unsafe(nil)); end

  # source://rake/13.0.6/lib/rake/application.rb#122
  def run_with_threads; end

  # source://rake/13.0.6/lib/rake/application.rb#807
  def set_default_options; end

  # source://rake/13.0.6/lib/rake/application.rb#185
  def standard_exception_handling; end

  # source://rake/13.0.6/lib/rake/application.rb#402
  def standard_rake_options; end

  # source://rake/13.0.6/lib/rake/application.rb#727
  def system_dir; end

  # source://rake/13.0.6/lib/rake/application.rb#33
  def terminal_columns; end

  # source://rake/13.0.6/lib/rake/application.rb#33
  def terminal_columns=(_arg0); end

  # source://rake/13.0.6/lib/rake/application.rb#337
  def terminal_width; end

  # source://rake/13.0.6/lib/rake/application.rb#150
  def thread_pool; end

  # source://rake/13.0.6/lib/rake/application.rb#109
  def top_level; end

  # source://rake/13.0.6/lib/rake/application.rb#36
  def top_level_tasks; end

  # source://rake/13.0.6/lib/rake/application.rb#388
  def trace(*strings); end

  # source://rake/13.0.6/lib/rake/application.rb#370
  def truncate(string, width); end

  # source://rake/13.0.6/lib/rake/application.rb#293
  def truncate_output?; end

  # source://rake/13.0.6/lib/rake/application.rb#39
  def tty_output=(_arg0); end

  # source://rake/13.0.6/lib/rake/application.rb#287
  def tty_output?; end

  # source://rake/13.0.6/lib/rake/application.rb#361
  def unix?; end

  # source://rake/13.0.6/lib/rake/application.rb#366
  def windows?; end

  private

  # source://rake/13.0.6/lib/rake/application.rb#721
  def glob(path, &block); end

  # source://rake/13.0.6/lib/rake/application.rb#267
  def has_chain?(exception); end

  # source://rake/13.0.6/lib/rake/application.rb#620
  def select_tasks_to_show(options, show_tasks, value); end

  # source://rake/13.0.6/lib/rake/application.rb#627
  def select_trace_output(options, trace_option, value); end

  # source://rake/13.0.6/lib/rake/application.rb#393
  def sort_options(options); end

  # source://rake/13.0.6/lib/rake/application.rb#744
  def standard_system_dir; end
end

# source://rake/13.0.6/lib/rake/application.rb#41
Rake::Application::DEFAULT_RAKEFILES = T.let(T.unsafe(nil), Array)

# source://rake/13.0.6/lib/rake/early_time.rb#21
Rake::EARLY = T.let(T.unsafe(nil), Rake::EarlyTime)

# source://rake/13.0.6/lib/rake/task_arguments.rb#108
Rake::EMPTY_TASK_ARGS = T.let(T.unsafe(nil), Rake::TaskArguments)

# source://rake/13.0.6/lib/rake/late_time.rb#17
Rake::LATE = T.let(T.unsafe(nil), Rake::LateTime)

# source://rdoc/6.5.0/rdoc/task.rb#326
Rake::RDocTask = RDoc::Task

# source://rake/13.0.6/lib/rake/version.rb#3
Rake::VERSION = T.let(T.unsafe(nil), String)

# Based on ActionDispatch::RemoteIp. All security-related precautions from that
# middleware have been removed, because the Event IP just needs to be accurate,
# and spoofing an IP here only makes data inaccurate, not insecure. Don't re-use
# this module if you have to *trust* the IP address.
#
# source://sentry-raven//lib/raven/version.rb#3
module Raven
  class << self
    # source://forwardable/1.3.3/forwardable.rb#231
    def annotate(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def annotateException(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def annotate_exception(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def breadcrumbs(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def capture(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def captureException(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def captureMessage(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def capture_exception(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def capture_message(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def capture_type(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def client(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def client=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def configuration(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def configuration=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def configure(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def context(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def extra_context(*args, **_arg1, &block); end

    # Injects various integrations. Default behavior: inject all available integrations
    #
    # source://sentry-raven//lib/raven/base.rb#63
    def inject; end

    # source://sentry-raven//lib/raven/base.rb#72
    def inject_only(*only_integrations); end

    # source://sentry-raven//lib/raven/base.rb#67
    def inject_without(*exclude_integrations); end

    # source://sentry-raven//lib/raven/base.rb#44
    def instance; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def last_event_id(*args, **_arg1, &block); end

    # source://sentry-raven//lib/raven/base.rb#89
    def load_integration(integration); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def logger(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def rack_context(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def report_ready(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def report_status(*args, **_arg1, &block); end

    # source://sentry-raven//lib/raven/base.rb#95
    def safely_prepend(module_name, opts = T.unsafe(nil)); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def send_event(*args, **_arg1, &block); end

    # source://sentry-raven//lib/raven/base.rb#105
    def sys_command(command); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def tags_context(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def user_context(*args, **_arg1, &block); end
  end
end

# source://sentry-raven//lib/raven/base.rb#36
Raven::AVAILABLE_INTEGRATIONS = T.let(T.unsafe(nil), Array)

# Front end to parsing the backtrace for each notice
#
# source://sentry-raven//lib/raven/backtrace.rb#7
class Raven::Backtrace
  # @return [Backtrace] a new instance of Backtrace
  #
  # source://sentry-raven//lib/raven/backtrace.rb#113
  def initialize(lines); end

  # source://sentry-raven//lib/raven/backtrace.rb#129
  def ==(other); end

  # source://sentry-raven//lib/raven/backtrace.rb#117
  def inspect; end

  # holder for an Array of Backtrace::Line instances
  #
  # source://sentry-raven//lib/raven/backtrace.rb#92
  def lines; end

  # source://sentry-raven//lib/raven/backtrace.rb#121
  def to_s; end

  private

  # Sets the attribute lines
  #
  # @param value the value to set the attribute lines to.
  #
  # source://sentry-raven//lib/raven/backtrace.rb#139
  def lines=(_arg0); end

  class << self
    # source://sentry-raven//lib/raven/backtrace.rb#94
    def parse(backtrace, opts = T.unsafe(nil)); end
  end
end

# source://sentry-raven//lib/raven/backtrace.rb#89
Raven::Backtrace::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# Handles backtrace parsing line by line
#
# source://sentry-raven//lib/raven/backtrace.rb#9
class Raven::Backtrace::Line
  # @return [Line] a new instance of Line
  #
  # source://sentry-raven//lib/raven/backtrace.rb#49
  def initialize(file, number, method, module_name); end

  # source://sentry-raven//lib/raven/backtrace.rb#69
  def ==(other); end

  # The file portion of the line (such as app/models/user.rb)
  #
  # source://sentry-raven//lib/raven/backtrace.rb#22
  def file; end

  # source://sentry-raven//lib/raven/backtrace.rb#56
  def in_app; end

  # source://sentry-raven//lib/raven/backtrace.rb#73
  def inspect; end

  # The method of the line (such as index)
  #
  # source://sentry-raven//lib/raven/backtrace.rb#28
  def method; end

  # The module name (JRuby)
  #
  # source://sentry-raven//lib/raven/backtrace.rb#31
  def module_name; end

  # The line number portion of the line
  #
  # source://sentry-raven//lib/raven/backtrace.rb#25
  def number; end

  # Reconstructs the line in a readable fashion
  #
  # source://sentry-raven//lib/raven/backtrace.rb#65
  def to_s; end

  private

  # Sets the attribute file
  #
  # @param value the value to set the attribute file to.
  #
  # source://sentry-raven//lib/raven/backtrace.rb#86
  def file=(_arg0); end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  #
  # source://sentry-raven//lib/raven/backtrace.rb#86
  def method=(_arg0); end

  # Sets the attribute module_name
  #
  # @param value the value to set the attribute module_name to.
  #
  # source://sentry-raven//lib/raven/backtrace.rb#86
  def module_name=(_arg0); end

  # Sets the attribute number
  #
  # @param value the value to set the attribute number to.
  #
  # source://sentry-raven//lib/raven/backtrace.rb#86
  def number=(_arg0); end

  class << self
    # source://sentry-raven//lib/raven/backtrace.rb#77
    def in_app_pattern; end

    # Parses a single line of a given backtrace
    #
    # @param unparsed_line [String] The raw line from +caller+ or some backtrace
    # @return [Line] The parsed backtrace line
    #
    # source://sentry-raven//lib/raven/backtrace.rb#36
    def parse(unparsed_line); end
  end
end

# org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:170)
#
# source://sentry-raven//lib/raven/backtrace.rb#19
Raven::Backtrace::Line::JAVA_INPUT_FORMAT = T.let(T.unsafe(nil), Regexp)

# source://sentry-raven//lib/raven/backtrace.rb#10
Raven::Backtrace::Line::RB_EXTENSION = T.let(T.unsafe(nil), String)

# regexp (optional leading X: on windows, or JRuby9000 class-prefix)
#
# source://sentry-raven//lib/raven/backtrace.rb#12
Raven::Backtrace::Line::RUBY_INPUT_FORMAT = T.let(T.unsafe(nil), Regexp)

# source://sentry-raven//lib/raven/breadcrumbs.rb#2
class Raven::Breadcrumb
  # @return [Breadcrumb] a new instance of Breadcrumb
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#5
  def initialize; end

  # Returns the value of attribute category.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def category; end

  # Sets the attribute category
  #
  # @param value the value to set the attribute category to.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def category=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def data=(_arg0); end

  # Returns the value of attribute level.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def level; end

  # Sets the attribute level
  #
  # @param value the value to set the attribute level to.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def level=(_arg0); end

  # Returns the value of attribute message.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def message=(_arg0); end

  # Returns the value of attribute timestamp.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def timestamp; end

  # Sets the attribute timestamp
  #
  # @param value the value to set the attribute timestamp to.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def timestamp=(_arg0); end

  # source://sentry-raven//lib/raven/breadcrumbs.rb#14
  def to_hash; end

  # Returns the value of attribute type.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#3
  def type=(_arg0); end
end

# source://sentry-raven//lib/raven/breadcrumbs.rb#28
class Raven::BreadcrumbBuffer
  include ::Enumerable

  # @return [BreadcrumbBuffer] a new instance of BreadcrumbBuffer
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#41
  def initialize(size = T.unsafe(nil)); end

  # Returns the value of attribute buffer.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#31
  def buffer; end

  # Sets the attribute buffer
  #
  # @param value the value to set the attribute buffer to.
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#31
  def buffer=(_arg0); end

  # source://sentry-raven//lib/raven/breadcrumbs.rb#62
  def each(&block); end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/breadcrumbs.rb#66
  def empty?; end

  # source://sentry-raven//lib/raven/breadcrumbs.rb#54
  def members; end

  # source://sentry-raven//lib/raven/breadcrumbs.rb#58
  def peek; end

  # source://sentry-raven//lib/raven/breadcrumbs.rb#45
  def record(crumb = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/breadcrumbs.rb#70
  def to_hash; end

  class << self
    # source://sentry-raven//lib/raven/breadcrumbs.rb#37
    def clear!; end

    # source://sentry-raven//lib/raven/breadcrumbs.rb#33
    def current; end
  end
end

# source://sentry-raven//lib/raven/cli.rb#2
class Raven::CLI
  class << self
    # source://sentry-raven//lib/raven/cli.rb#3
    def test(dsn = T.unsafe(nil), silent = T.unsafe(nil), config = T.unsafe(nil)); end
  end
end

# Encodes events and sends them to the Sentry server.
#
# source://sentry-raven//lib/raven/client.rb#11
class Raven::Client
  # @return [Client] a new instance of Client
  #
  # source://sentry-raven//lib/raven/client.rb#18
  def initialize(configuration); end

  # Returns the value of attribute configuration.
  #
  # source://sentry-raven//lib/raven/client.rb#16
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  #
  # source://sentry-raven//lib/raven/client.rb#16
  def configuration=(_arg0); end

  # source://sentry-raven//lib/raven/client.rb#24
  def send_event(event, hint = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/client.rb#58
  def transport; end

  private

  # source://sentry-raven//lib/raven/client.rb#74
  def encode(event); end

  # source://sentry-raven//lib/raven/client.rb#118
  def failed_send(e, event); end

  # source://sentry-raven//lib/raven/client.rb#102
  def generate_auth_header; end

  # source://sentry-raven//lib/raven/client.rb#98
  def get_log_message(event); end

  # source://sentry-raven//lib/raven/client.rb#86
  def get_message_from_exception(event); end

  # source://sentry-raven//lib/raven/client.rb#114
  def successful_send; end
end

# source://sentry-raven//lib/raven/client.rb#14
Raven::Client::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/client.rb#12
Raven::Client::PROTOCOL_VERSION = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/client.rb#13
Raven::Client::USER_AGENT = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/client.rb#132
class Raven::ClientState
  # @return [ClientState] a new instance of ClientState
  #
  # source://sentry-raven//lib/raven/client.rb#133
  def initialize; end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/client.rb#164
  def failed?; end

  # source://sentry-raven//lib/raven/client.rb#146
  def failure(retry_after = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/client.rb#157
  def reset; end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/client.rb#137
  def should_try?; end

  # source://sentry-raven//lib/raven/client.rb#153
  def success; end
end

# source://sentry-raven//lib/raven/configuration.rb#4
class Raven::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://sentry-raven//lib/raven/configuration.rb#248
  def initialize; end

  # Allows config options to be read like a hash
  #
  # @param option [Symbol] Key for a given attribute
  #
  # source://sentry-raven//lib/raven/configuration.rb#369
  def [](option); end

  # Directories to be recognized as part of your app. e.g. if you
  # have an `engines` dir at the root of your project, you may want
  # to set this to something like /(app|config|engines|lib)/
  #
  # source://sentry-raven//lib/raven/configuration.rb#8
  def app_dirs_pattern; end

  # Directories to be recognized as part of your app. e.g. if you
  # have an `engines` dir at the root of your project, you may want
  # to set this to something like /(app|config|engines|lib)/
  #
  # source://sentry-raven//lib/raven/configuration.rb#8
  def app_dirs_pattern=(_arg0); end

  # Provide an object that responds to `call` to send events asynchronously.
  # E.g.: lambda { |event| Thread.new { Raven.send_event(event) } }
  #
  # source://sentry-raven//lib/raven/configuration.rb#12
  def async; end

  # source://sentry-raven//lib/raven/configuration.rb#317
  def async=(value); end

  # Provide an object that responds to `call` to send events asynchronously.
  # E.g.: lambda { |event| Thread.new { Raven.send_event(event) } }
  #
  # source://sentry-raven//lib/raven/configuration.rb#12
  def async?; end

  # a proc/lambda that takes an array of stack traces
  # it'll be used to silence (reduce) backtrace of the exception
  #
  # for example:
  #
  # ```ruby
  # Raven.configuration.backtrace_cleanup_callback = lambda do |backtrace|
  #   Rails.backtrace_cleaner.clean(backtrace)
  # end
  # ```
  #
  # source://sentry-raven//lib/raven/configuration.rb#137
  def backtrace_cleanup_callback; end

  # a proc/lambda that takes an array of stack traces
  # it'll be used to silence (reduce) backtrace of the exception
  #
  # for example:
  #
  # ```ruby
  # Raven.configuration.backtrace_cleanup_callback = lambda do |backtrace|
  #   Rails.backtrace_cleaner.clean(backtrace)
  # end
  # ```
  #
  # source://sentry-raven//lib/raven/configuration.rb#137
  def backtrace_cleanup_callback=(_arg0); end

  # Optional Proc, called before sending an event to the server/
  # E.g.: lambda { |event, hint| event }
  # E.g.: lambda { |event, hint| nil }
  # E.g.: lambda { |event, hint|
  #   event[:message] = 'a'
  #   event
  # }
  #
  # source://sentry-raven//lib/raven/configuration.rb#188
  def before_send; end

  # source://sentry-raven//lib/raven/configuration.rb#358
  def before_send=(value); end

  # An array of breadcrumbs loggers to be used. Available options are:
  # - :sentry_logger
  # - :active_support_logger
  #
  # source://sentry-raven//lib/raven/configuration.rb#18
  def breadcrumbs_logger; end

  # source://sentry-raven//lib/raven/configuration.rb#325
  def breadcrumbs_logger=(logger); end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#377
  def capture_allowed?(message_or_exc = T.unsafe(nil)); end

  # Number of lines of code context to capture, or nil for none
  #
  # source://sentry-raven//lib/raven/configuration.rb#21
  def context_lines; end

  # Number of lines of code context to capture, or nil for none
  #
  # source://sentry-raven//lib/raven/configuration.rb#21
  def context_lines=(_arg0); end

  # RACK_ENV by default.
  #
  # source://sentry-raven//lib/raven/configuration.rb#24
  def current_environment; end

  # source://sentry-raven//lib/raven/configuration.rb#373
  def current_environment=(environment); end

  # the dsn value, whether it's set via `config.dsn=` or `ENV["SENTRY_DSN"]`
  #
  # source://sentry-raven//lib/raven/configuration.rb#194
  def dsn; end

  # source://sentry-raven//lib/raven/configuration.rb#284
  def dsn=(value); end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#416
  def enabled_in_current_env?; end

  # Encoding type for event bodies. Must be :json or :gzip.
  #
  # source://sentry-raven//lib/raven/configuration.rb#27
  def encoding; end

  # @raise [Error]
  #
  # source://sentry-raven//lib/raven/configuration.rb#311
  def encoding=(encoding); end

  # Whitelist of environments that will send notifications to Sentry. Array of Strings.
  #
  # source://sentry-raven//lib/raven/configuration.rb#30
  def environments; end

  # Whitelist of environments that will send notifications to Sentry. Array of Strings.
  #
  # source://sentry-raven//lib/raven/configuration.rb#30
  def environments=(_arg0); end

  # source://sentry-raven//lib/raven/configuration.rb#388
  def error_messages; end

  # Errors object - an Array that contains error messages. See #
  #
  # source://sentry-raven//lib/raven/configuration.rb#191
  def errors; end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#403
  def exception_class_allowed?(exc); end

  # Logger 'progname's to exclude from breadcrumbs
  #
  # source://sentry-raven//lib/raven/configuration.rb#33
  def exclude_loggers; end

  # Logger 'progname's to exclude from breadcrumbs
  #
  # source://sentry-raven//lib/raven/configuration.rb#33
  def exclude_loggers=(_arg0); end

  # Array of exception classes that should never be sent. See IGNORE_DEFAULT.
  # You should probably append to this rather than overwrite it.
  #
  # source://sentry-raven//lib/raven/configuration.rb#37
  def excluded_exceptions; end

  # Array of exception classes that should never be sent. See IGNORE_DEFAULT.
  # You should probably append to this rather than overwrite it.
  #
  # source://sentry-raven//lib/raven/configuration.rb#37
  def excluded_exceptions=(_arg0); end

  # A Proc yeilding the faraday builder allowing for further configuration
  # of the faraday adapter
  #
  # source://sentry-raven//lib/raven/configuration.rb#51
  def faraday_builder; end

  # A Proc yeilding the faraday builder allowing for further configuration
  # of the faraday adapter
  #
  # source://sentry-raven//lib/raven/configuration.rb#51
  def faraday_builder=(_arg0); end

  # DSN component - set automatically if DSN provided
  #
  # source://sentry-raven//lib/raven/configuration.rb#44
  def host; end

  # DSN component - set automatically if DSN provided
  #
  # source://sentry-raven//lib/raven/configuration.rb#44
  def host=(_arg0); end

  # The Faraday adapter to be used. Will default to Net::HTTP when not set.
  #
  # source://sentry-raven//lib/raven/configuration.rb#47
  def http_adapter; end

  # The Faraday adapter to be used. Will default to Net::HTTP when not set.
  #
  # source://sentry-raven//lib/raven/configuration.rb#47
  def http_adapter=(_arg0); end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to false
  #
  # source://sentry-raven//lib/raven/configuration.rb#40
  def inspect_exception_causes_for_exclusion; end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to false
  #
  # source://sentry-raven//lib/raven/configuration.rb#40
  def inspect_exception_causes_for_exclusion=(_arg0); end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to false
  #
  # source://sentry-raven//lib/raven/configuration.rb#40
  def inspect_exception_causes_for_exclusion?; end

  # You may provide your own LineCache for matching paths with source files.
  # This may be useful if you need to get source code from places other than
  # the disk. See Raven::LineCache for the required interface you must implement.
  #
  # source://sentry-raven//lib/raven/configuration.rb#56
  def linecache; end

  # You may provide your own LineCache for matching paths with source files.
  # This may be useful if you need to get source code from places other than
  # the disk. See Raven::LineCache for the required interface you must implement.
  #
  # source://sentry-raven//lib/raven/configuration.rb#56
  def linecache=(_arg0); end

  # Logger used by Raven. In Rails, this is the Rails logger, otherwise
  # Raven provides its own Raven::Logger.
  #
  # source://sentry-raven//lib/raven/configuration.rb#60
  def logger; end

  # Logger used by Raven. In Rails, this is the Rails logger, otherwise
  # Raven provides its own Raven::Logger.
  #
  # source://sentry-raven//lib/raven/configuration.rb#60
  def logger=(_arg0); end

  # Timeout waiting for the Sentry server connection to open in seconds
  #
  # source://sentry-raven//lib/raven/configuration.rb#63
  def open_timeout; end

  # Timeout waiting for the Sentry server connection to open in seconds
  #
  # source://sentry-raven//lib/raven/configuration.rb#63
  def open_timeout=(_arg0); end

  # DSN component - set automatically if DSN provided
  #
  # source://sentry-raven//lib/raven/configuration.rb#66
  def path; end

  # DSN component - set automatically if DSN provided
  #
  # source://sentry-raven//lib/raven/configuration.rb#66
  def path=(_arg0); end

  # DSN component - set automatically if DSN provided
  #
  # source://sentry-raven//lib/raven/configuration.rb#69
  def port; end

  # DSN component - set automatically if DSN provided
  #
  # source://sentry-raven//lib/raven/configuration.rb#69
  def port=(_arg0); end

  # Processors to run on data before sending upstream. See DEFAULT_PROCESSORS.
  # You should probably append to this rather than overwrite it.
  #
  # source://sentry-raven//lib/raven/configuration.rb#73
  def processors; end

  # Processors to run on data before sending upstream. See DEFAULT_PROCESSORS.
  # You should probably append to this rather than overwrite it.
  #
  # source://sentry-raven//lib/raven/configuration.rb#73
  def processors=(_arg0); end

  # Project ID number to send to the Sentry server
  # If you provide a DSN, this will be set automatically.
  #
  # source://sentry-raven//lib/raven/configuration.rb#77
  def project_id; end

  # Project ID number to send to the Sentry server
  # If you provide a DSN, this will be set automatically.
  #
  # source://sentry-raven//lib/raven/configuration.rb#77
  def project_id=(_arg0); end

  # Project directory root for in_app detection. Could be Rails root, etc.
  # Set automatically for Rails.
  #
  # source://sentry-raven//lib/raven/configuration.rb#81
  def project_root; end

  # source://sentry-raven//lib/raven/configuration.rb#393
  def project_root=(root_dir); end

  # Proxy information to pass to the HTTP adapter (via Faraday)
  #
  # source://sentry-raven//lib/raven/configuration.rb#84
  def proxy; end

  # Proxy information to pass to the HTTP adapter (via Faraday)
  #
  # source://sentry-raven//lib/raven/configuration.rb#84
  def proxy=(_arg0); end

  # Public key for authentication with the Sentry server
  # If you provide a DSN, this will be set automatically.
  #
  # source://sentry-raven//lib/raven/configuration.rb#88
  def public_key; end

  # Public key for authentication with the Sentry server
  # If you provide a DSN, this will be set automatically.
  #
  # source://sentry-raven//lib/raven/configuration.rb#88
  def public_key=(_arg0); end

  # Array of rack env parameters to be included in the event sent to sentry.
  #
  # source://sentry-raven//lib/raven/configuration.rb#197
  def rack_env_whitelist; end

  # Array of rack env parameters to be included in the event sent to sentry.
  #
  # source://sentry-raven//lib/raven/configuration.rb#197
  def rack_env_whitelist=(_arg0); end

  # Turns on ActiveSupport breadcrumbs integration
  #
  # source://sentry-raven//lib/raven/configuration.rb#91
  def rails_activesupport_breadcrumbs; end

  # source://sentry-raven//lib/raven/configuration.rb#398
  def rails_activesupport_breadcrumbs=(val); end

  # Rails catches exceptions in the ActionDispatch::ShowExceptions or
  # ActionDispatch::DebugExceptions middlewares, depending on the environment.
  # When `rails_report_rescued_exceptions` is true (it is by default), Raven
  # will report exceptions even when they are rescued by these middlewares.
  #
  # source://sentry-raven//lib/raven/configuration.rb#97
  def rails_report_rescued_exceptions; end

  # Rails catches exceptions in the ActionDispatch::ShowExceptions or
  # ActionDispatch::DebugExceptions middlewares, depending on the environment.
  # When `rails_report_rescued_exceptions` is true (it is by default), Raven
  # will report exceptions even when they are rescued by these middlewares.
  #
  # source://sentry-raven//lib/raven/configuration.rb#97
  def rails_report_rescued_exceptions=(_arg0); end

  # Release tag to be passed with every event sent to Sentry.
  # We automatically try to set this to a git SHA or Capistrano release.
  #
  # source://sentry-raven//lib/raven/configuration.rb#101
  def release; end

  # Release tag to be passed with every event sent to Sentry.
  # We automatically try to set this to a git SHA or Capistrano release.
  #
  # source://sentry-raven//lib/raven/configuration.rb#101
  def release=(_arg0); end

  # The sampling factor to apply to events. A value of 0.0 will not send
  # any events, and a value of 1.0 will send 100% of events.
  #
  # source://sentry-raven//lib/raven/configuration.rb#105
  def sample_rate; end

  # The sampling factor to apply to events. A value of 0.0 will not send
  # any events, and a value of 1.0 will send 100% of events.
  #
  # source://sentry-raven//lib/raven/configuration.rb#105
  def sample_rate=(_arg0); end

  # Boolean - sanitize values that look like credit card numbers
  #
  # source://sentry-raven//lib/raven/configuration.rb#108
  def sanitize_credit_cards; end

  # Boolean - sanitize values that look like credit card numbers
  #
  # source://sentry-raven//lib/raven/configuration.rb#108
  def sanitize_credit_cards=(_arg0); end

  # By default, Sentry censors Hash values when their keys match things like
  # "secret", "password", etc. Provide an array of Strings that, when matched in
  # a hash key, will be censored and not sent to Sentry.
  #
  # source://sentry-raven//lib/raven/configuration.rb#113
  def sanitize_fields; end

  # By default, Sentry censors Hash values when their keys match things like
  # "secret", "password", etc. Provide an array of Strings that, when matched in
  # a hash key, will be censored and not sent to Sentry.
  #
  # source://sentry-raven//lib/raven/configuration.rb#113
  def sanitize_fields=(_arg0); end

  # If you're sure you want to override the default sanitization values, you can
  # add to them to an array of Strings here, e.g. %w(authorization password)
  #
  # source://sentry-raven//lib/raven/configuration.rb#117
  def sanitize_fields_excluded; end

  # If you're sure you want to override the default sanitization values, you can
  # add to them to an array of Strings here, e.g. %w(authorization password)
  #
  # source://sentry-raven//lib/raven/configuration.rb#117
  def sanitize_fields_excluded=(_arg0); end

  # Sanitize additional HTTP headers - only Authorization is removed by default.
  #
  # source://sentry-raven//lib/raven/configuration.rb#120
  def sanitize_http_headers; end

  # Sanitize additional HTTP headers - only Authorization is removed by default.
  #
  # source://sentry-raven//lib/raven/configuration.rb#120
  def sanitize_http_headers=(_arg0); end

  # DSN component - set automatically if DSN provided.
  # Otherwise, can be one of "http", "https", or "dummy"
  #
  # source://sentry-raven//lib/raven/configuration.rb#124
  def scheme; end

  # DSN component - set automatically if DSN provided.
  # Otherwise, can be one of "http", "https", or "dummy"
  #
  # source://sentry-raven//lib/raven/configuration.rb#124
  def scheme=(_arg0); end

  # Secret key for authentication with the Sentry server
  # If you provide a DSN, this will be set automatically.
  #
  # This is deprecated and not necessary for newer Sentry installations any more.
  #
  # source://sentry-raven//lib/raven/configuration.rb#143
  def secret_key; end

  # Secret key for authentication with the Sentry server
  # If you provide a DSN, this will be set automatically.
  #
  # This is deprecated and not necessary for newer Sentry installations any more.
  #
  # source://sentry-raven//lib/raven/configuration.rb#143
  def secret_key=(_arg0); end

  # Include module versions in reports - boolean.
  #
  # source://sentry-raven//lib/raven/configuration.rb#146
  def send_modules; end

  # Include module versions in reports - boolean.
  #
  # source://sentry-raven//lib/raven/configuration.rb#146
  def send_modules=(_arg0); end

  # If we cannot capture, we cannot send.
  #
  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#377
  def sending_allowed?(message_or_exc = T.unsafe(nil)); end

  # Simple server string - set this to the DSN found on your Sentry settings.
  #
  # source://sentry-raven//lib/raven/configuration.rb#149
  def server; end

  # source://sentry-raven//lib/raven/configuration.rb#284
  def server=(value); end

  # Returns the value of attribute server_name.
  #
  # source://sentry-raven//lib/raven/configuration.rb#151
  def server_name; end

  # Sets the attribute server_name
  #
  # @param value the value to set the attribute server_name to.
  #
  # source://sentry-raven//lib/raven/configuration.rb#151
  def server_name=(_arg0); end

  # Provide a configurable callback to determine event capture.
  # Note that the object passed into the block will be a String (messages) or
  # an exception.
  # e.g. lambda { |exc_or_msg| exc_or_msg.some_attr == false }
  #
  # source://sentry-raven//lib/raven/configuration.rb#157
  def should_capture; end

  # source://sentry-raven//lib/raven/configuration.rb#350
  def should_capture=(value); end

  # Silences ready message when true.
  #
  # source://sentry-raven//lib/raven/configuration.rb#160
  def silence_ready; end

  # Silences ready message when true.
  #
  # source://sentry-raven//lib/raven/configuration.rb#160
  def silence_ready=(_arg0); end

  # SSL settings passed directly to Faraday's ssl option
  #
  # source://sentry-raven//lib/raven/configuration.rb#163
  def ssl; end

  # SSL settings passed directly to Faraday's ssl option
  #
  # source://sentry-raven//lib/raven/configuration.rb#163
  def ssl=(_arg0); end

  # The path to the SSL certificate file
  #
  # source://sentry-raven//lib/raven/configuration.rb#166
  def ssl_ca_file; end

  # The path to the SSL certificate file
  #
  # source://sentry-raven//lib/raven/configuration.rb#166
  def ssl_ca_file=(_arg0); end

  # Should the SSL certificate of the server be verified?
  #
  # source://sentry-raven//lib/raven/configuration.rb#169
  def ssl_verification; end

  # Should the SSL certificate of the server be verified?
  #
  # source://sentry-raven//lib/raven/configuration.rb#169
  def ssl_verification=(_arg0); end

  # Default tags for events. Hash.
  #
  # source://sentry-raven//lib/raven/configuration.rb#172
  def tags; end

  # Default tags for events. Hash.
  #
  # source://sentry-raven//lib/raven/configuration.rb#172
  def tags=(_arg0); end

  # Timeout when waiting for the server to return data in seconds.
  #
  # source://sentry-raven//lib/raven/configuration.rb#175
  def timeout; end

  # Timeout when waiting for the server to return data in seconds.
  #
  # source://sentry-raven//lib/raven/configuration.rb#175
  def timeout=(_arg0); end

  # Optional Proc, called when the Sentry server cannot be contacted for any reason
  # E.g. lambda { |event| Thread.new { MyJobProcessor.send_email(event) } }
  #
  # source://sentry-raven//lib/raven/configuration.rb#179
  def transport_failure_callback; end

  # source://sentry-raven//lib/raven/configuration.rb#342
  def transport_failure_callback=(value); end

  private

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#507
  def capture_allowed_by_callback?(message_or_exc); end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#500
  def capture_in_current_environment?; end

  # source://sentry-raven//lib/raven/configuration.rb#545
  def current_environment_from_env; end

  # source://sentry-raven//lib/raven/configuration.rb#422
  def detect_project_root; end

  # source://sentry-raven//lib/raven/configuration.rb#430
  def detect_release; end

  # source://sentry-raven//lib/raven/configuration.rb#481
  def detect_release_from_capistrano; end

  # source://sentry-raven//lib/raven/configuration.rb#496
  def detect_release_from_env; end

  # source://sentry-raven//lib/raven/configuration.rb#492
  def detect_release_from_git; end

  # source://sentry-raven//lib/raven/configuration.rb#469
  def detect_release_from_heroku; end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#439
  def excluded_exception?(incoming_exception); end

  # source://sentry-raven//lib/raven/configuration.rb#445
  def get_exception_class(x); end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#449
  def matches_exception?(excluded_exception_class, incoming_exception); end

  # In Ruby <2.0 const_get can't lookup "SomeModule::SomeClass" in one go
  #
  # source://sentry-raven//lib/raven/configuration.rb#458
  def qualified_const_get(x); end

  # Try to resolve the hostname to an FQDN, but fall back to whatever
  # the load name is.
  #
  # source://sentry-raven//lib/raven/configuration.rb#540
  def resolve_hostname; end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#477
  def running_on_heroku?; end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#527
  def sample_allowed?; end

  # source://sentry-raven//lib/raven/configuration.rb#549
  def server_name_from_env; end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/configuration.rb#514
  def valid?; end
end

# source://sentry-raven//lib/raven/configuration.rb#246
Raven::Configuration::AVAILABLE_BREADCRUMBS_LOGGERS = T.let(T.unsafe(nil), Array)

# Note the order - we have to remove circular references and bad characters
# before passing to other processors.
#
# source://sentry-raven//lib/raven/configuration.rb#225
Raven::Configuration::DEFAULT_PROCESSORS = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/configuration.rb#234
Raven::Configuration::HEROKU_DYNO_METADATA_MESSAGE = T.let(T.unsafe(nil), String)

# Most of these errors generate 4XX responses. In general, Sentry clients
# only automatically report 5xx responses.
#
# source://sentry-raven//lib/raven/configuration.rb#201
Raven::Configuration::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/configuration.rb#243
Raven::Configuration::LOG_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/configuration.rb#244
Raven::Configuration::MODULE_SEPARATOR = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/configuration.rb#237
Raven::Configuration::RACK_ENV_WHITELIST_DEFAULT = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/context.rb#5
class Raven::Context
  # @return [Context] a new instance of Context
  #
  # source://sentry-raven//lib/raven/context.rb#16
  def initialize; end

  # Returns the value of attribute extra.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def extra; end

  # Sets the attribute extra
  #
  # @param value the value to set the attribute extra to.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def extra=(_arg0); end

  # Returns the value of attribute rack_env.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def rack_env; end

  # Sets the attribute rack_env
  #
  # @param value the value to set the attribute rack_env to.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def rack_env=(_arg0); end

  # Returns the value of attribute runtime.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def runtime; end

  # Sets the attribute runtime
  #
  # @param value the value to set the attribute runtime to.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def runtime=(_arg0); end

  # Returns the value of attribute server_os.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def server_os; end

  # Sets the attribute server_os
  #
  # @param value the value to set the attribute server_os to.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def server_os=(_arg0); end

  # Returns the value of attribute tags.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def tags; end

  # Sets the attribute tags
  #
  # @param value the value to set the attribute tags to.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def tags=(_arg0); end

  # Returns the value of attribute transaction.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def transaction; end

  # Sets the attribute transaction
  #
  # @param value the value to set the attribute transaction to.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def transaction=(_arg0); end

  # Returns the value of attribute user.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def user; end

  # Sets the attribute user
  #
  # @param value the value to set the attribute user to.
  #
  # source://sentry-raven//lib/raven/context.rb#14
  def user=(_arg0); end

  class << self
    # source://sentry-raven//lib/raven/context.rb#10
    def clear!; end

    # source://sentry-raven//lib/raven/context.rb#6
    def current; end

    # source://sentry-raven//lib/raven/context.rb#27
    def os_context; end

    # source://sentry-raven//lib/raven/context.rb#40
    def runtime_context; end
  end
end

# source://sentry-raven//lib/raven/base.rb#38
class Raven::Error < ::StandardError; end

# source://sentry-raven//lib/raven/event.rb#7
class Raven::Event
  # @return [Event] a new instance of Event
  # @yield [_self]
  # @yieldparam _self [Raven::Event] the object that the method was called on
  #
  # source://sentry-raven//lib/raven/event.rb#23
  def initialize(options); end

  # source://sentry-raven//lib/raven/event.rb#127
  def [](key); end

  # source://sentry-raven//lib/raven/event.rb#131
  def []=(key, value); end

  # source://sentry-raven//lib/raven/event.rb#155
  def add_exception_interface(exc); end

  # Returns the value of attribute backtrace.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def backtrace; end

  # Sets the attribute backtrace
  #
  # @param value the value to set the attribute backtrace to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def backtrace=(_arg0); end

  # Returns the value of attribute breadcrumbs.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def breadcrumbs; end

  # Sets the attribute breadcrumbs
  #
  # @param value the value to set the attribute breadcrumbs to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def breadcrumbs=(_arg0); end

  # Returns the value of attribute checksum.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def checksum; end

  # Sets the attribute checksum
  #
  # @param value the value to set the attribute checksum to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def checksum=(_arg0); end

  # Returns the value of attribute configuration.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def configuration=(_arg0); end

  # Returns the value of attribute context.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def context=(_arg0); end

  # Returns the value of attribute environment.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def environment; end

  # Sets the attribute environment
  #
  # @param value the value to set the attribute environment to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def environment=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def event_id; end

  # Returns the value of attribute extra.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def extra; end

  # Sets the attribute extra
  #
  # @param value the value to set the attribute extra to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def extra=(_arg0); end

  # Returns the value of attribute fingerprint.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def fingerprint; end

  # Sets the attribute fingerprint
  #
  # @param value the value to set the attribute fingerprint to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def fingerprint=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def id=(_arg0); end

  # @raise [Error]
  #
  # source://sentry-raven//lib/raven/event.rb#119
  def interface(name, value = T.unsafe(nil), &block); end

  # Returns the value of attribute level.
  #
  # source://sentry-raven//lib/raven/event.rb#21
  def level; end

  # needed to meet the Sentry spec
  #
  # source://sentry-raven//lib/raven/event.rb#115
  def level=(new_level); end

  # Returns the value of attribute logger.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def logger=(_arg0); end

  # source://sentry-raven//lib/raven/event.rb#85
  def message; end

  # source://sentry-raven//lib/raven/event.rb#89
  def message=(args); end

  # Returns the value of attribute modules.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def modules; end

  # Sets the attribute modules
  #
  # @param value the value to set the attribute modules to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def modules=(_arg0); end

  # Returns the value of attribute platform.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def platform; end

  # Sets the attribute platform
  #
  # @param value the value to set the attribute platform to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def platform=(_arg0); end

  # Returns the value of attribute release.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def release; end

  # Sets the attribute release
  #
  # @param value the value to set the attribute release to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def release=(_arg0); end

  # Returns the value of attribute runtime.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def runtime; end

  # Sets the attribute runtime
  #
  # @param value the value to set the attribute runtime to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def runtime=(_arg0); end

  # Returns the value of attribute sdk.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def sdk; end

  # Sets the attribute sdk
  #
  # @param value the value to set the attribute sdk to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def sdk=(_arg0); end

  # Returns the value of attribute server_name.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def server_name; end

  # Sets the attribute server_name
  #
  # @param value the value to set the attribute server_name to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def server_name=(_arg0); end

  # Returns the value of attribute server_os.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def server_os; end

  # Sets the attribute server_os
  #
  # @param value the value to set the attribute server_os to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def server_os=(_arg0); end

  # source://sentry-raven//lib/raven/event.rb#177
  def stacktrace_interface_from(backtrace); end

  # Returns the value of attribute tags.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def tags; end

  # Sets the attribute tags
  #
  # @param value the value to set the attribute tags to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def tags=(_arg0); end

  # Returns the value of attribute time_spent.
  #
  # source://sentry-raven//lib/raven/event.rb#21
  def time_spent; end

  # source://sentry-raven//lib/raven/event.rb#111
  def time_spent=(time); end

  # Returns the value of attribute timestamp.
  #
  # source://sentry-raven//lib/raven/event.rb#21
  def timestamp; end

  # source://sentry-raven//lib/raven/event.rb#107
  def timestamp=(time); end

  # source://sentry-raven//lib/raven/event.rb#135
  def to_hash; end

  # source://sentry-raven//lib/raven/event.rb#150
  def to_json_compatible; end

  # Returns the value of attribute transaction.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def transaction; end

  # Sets the attribute transaction
  #
  # @param value the value to set the attribute transaction to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def transaction=(_arg0); end

  # Returns the value of attribute user.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def user; end

  # Sets the attribute user
  #
  # @param value the value to set the attribute user to.
  #
  # source://sentry-raven//lib/raven/event.rb#15
  def user=(_arg0); end

  private

  # source://sentry-raven//lib/raven/event.rb#224
  def add_rack_context; end

  # source://sentry-raven//lib/raven/event.rb#246
  def async_json_processors; end

  # When behind a proxy (or if the user is using a proxy), we can't use
  # REMOTE_ADDR to determine the Event IP, and must use other headers instead.
  #
  # source://sentry-raven//lib/raven/event.rb#237
  def calculate_real_ip_from_rack; end

  # source://sentry-raven//lib/raven/event.rb#250
  def list_gem_specs; end

  # source://sentry-raven//lib/raven/event.rb#205
  def set_core_attributes_from_configuration; end

  # source://sentry-raven//lib/raven/event.rb#212
  def set_core_attributes_from_context; end

  class << self
    # source://sentry-raven//lib/raven/event.rb#56
    def captureException(exc, options = T.unsafe(nil), &block); end

    # source://sentry-raven//lib/raven/event.rb#74
    def captureMessage(message, options = T.unsafe(nil)); end

    # source://sentry-raven//lib/raven/event.rb#56
    def capture_exception(exc, options = T.unsafe(nil), &block); end

    # source://sentry-raven//lib/raven/event.rb#74
    def capture_message(message, options = T.unsafe(nil)); end

    # source://sentry-raven//lib/raven/event.rb#56
    def from_exception(exc, options = T.unsafe(nil), &block); end

    # source://sentry-raven//lib/raven/event.rb#74
    def from_message(message, options = T.unsafe(nil)); end
  end
end

# See Sentry server default limits at
# https://github.com/getsentry/sentry/blob/master/src/sentry/conf/server.py
#
# source://sentry-raven//lib/raven/event.rb#10
Raven::Event::MAX_MESSAGE_SIZE_IN_BYTES = T.let(T.unsafe(nil), Integer)

# source://sentry-raven//lib/raven/event.rb#11
Raven::Event::REQUIRED_OPTION_KEYS = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/event.rb#13
Raven::Event::SDK = T.let(T.unsafe(nil), Hash)

# source://sentry-raven//lib/raven/interfaces/exception.rb#2
class Raven::ExceptionInterface < ::Raven::Interface
  # source://sentry-raven//lib/raven/interfaces/exception.rb#9
  def to_hash(*args); end

  # Returns the value of attribute values.
  #
  # source://sentry-raven//lib/raven/interfaces/exception.rb#3
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://sentry-raven//lib/raven/interfaces/exception.rb#3
  def values=(_arg0); end

  class << self
    # source://sentry-raven//lib/raven/interfaces/exception.rb#5
    def sentry_alias; end
  end
end

# source://sentry-raven//lib/raven/interfaces/http.rb#2
class Raven::HttpInterface < ::Raven::Interface
  include ::Raven::RackInterface

  # @return [HttpInterface] a new instance of HttpInterface
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#5
  def initialize(*arguments); end

  # Returns the value of attribute cookies.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def cookies; end

  # Sets the attribute cookies
  #
  # @param value the value to set the attribute cookies to.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def cookies=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def data=(_arg0); end

  # Returns the value of attribute env.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def env; end

  # Sets the attribute env
  #
  # @param value the value to set the attribute env to.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def env=(_arg0); end

  # Returns the value of attribute headers.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def headers=(_arg0); end

  # Returns the value of attribute method.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def method; end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def method=(_arg0); end

  # Returns the value of attribute query_string.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def query_string; end

  # Sets the attribute query_string
  #
  # @param value the value to set the attribute query_string to.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def query_string=(_arg0); end

  # Returns the value of attribute url.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def url; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  #
  # source://sentry-raven//lib/raven/interfaces/http.rb#3
  def url=(_arg0); end

  class << self
    # source://sentry-raven//lib/raven/interfaces/http.rb#12
    def sentry_alias; end
  end
end

# A copy of Raven's base module class methods, minus some of the integration
# and global hooks since it's meant to be used explicitly. Useful for
# sending errors to multiple sentry projects in a large application.
#
# @example
#   class Foo
#   def initialize
#   @other_raven = Raven::Instance.new
#   @other_raven.configure do |config|
#   config.server = 'http://...'
#   end
#   end
#
#   def foo
#   # ...
#   rescue => e
#   @other_raven.capture_exception(e)
#   end
#   end
#
# source://sentry-raven//lib/raven/instance.rb#21
class Raven::Instance
  # @return [Instance] a new instance of Instance
  #
  # source://sentry-raven//lib/raven/instance.rb#28
  def initialize(context = T.unsafe(nil), config = T.unsafe(nil)); end

  # Provides extra context to the exception prior to it being handled by
  # Raven. An exception can have multiple annotations, which are merged
  # together.
  #
  # The options (annotation) is treated the same as the ``options``
  # parameter to ``capture_exception`` or ``Event.from_exception``, and
  # can contain the same ``:user``, ``:tags``, etc. options as these
  # methods.
  #
  # These will be merged with the ``options`` parameter to
  # ``Event.from_exception`` at the top of execution.
  #
  # @example
  #   begin
  #   raise "Hello"
  #   rescue => exc
  #   Raven.annotate_exception(exc, :user => { 'id' => 1,
  #   'email' => 'foo@example.com' })
  #   end
  #
  # source://sentry-raven//lib/raven/instance.rb#164
  def annotate_exception(exc, options = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/instance.rb#229
  def breadcrumbs; end

  # Capture and process any exceptions from the given block.
  #
  # @example
  #   Raven.capture do
  #   MyApp.run
  #   end
  #
  # source://sentry-raven//lib/raven/instance.rb#92
  def capture(options = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/instance.rb#107
  def capture_exception(obj, options = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/instance.rb#107
  def capture_message(obj, options = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/instance.rb#107
  def capture_type(obj, options = T.unsafe(nil)); end

  # The client object is responsible for delivering formatted data to the
  # Sentry server.
  #
  # source://sentry-raven//lib/raven/instance.rb#47
  def client; end

  # See Raven::Client.
  #
  # source://sentry-raven//lib/raven/instance.rb#23
  def client=(_arg0); end

  # See Raven::Configuration.
  #
  # source://sentry-raven//lib/raven/instance.rb#26
  def configuration; end

  # See Raven::Configuration.
  #
  # source://sentry-raven//lib/raven/instance.rb#26
  def configuration=(_arg0); end

  # Call this method to modify defaults in your initializers.
  #
  # @example
  #   Raven.configure do |config|
  #   config.server = 'http://...'
  #   end
  # @yield [configuration]
  #
  # source://sentry-raven//lib/raven/instance.rb#69
  def configure; end

  # source://sentry-raven//lib/raven/instance.rb#33
  def context; end

  # Bind extra context. Merges with existing context (if any).
  #
  # Extra context shows up as Additional Data within Sentry, and is
  # completely arbitrary.
  #
  # @example
  #   Raven.extra_context('my_custom_data' => 'value')
  #
  # source://sentry-raven//lib/raven/instance.rb#215
  def extra_context(options = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/instance.rb#141
  def last_event_id; end

  # source://sentry-raven//lib/raven/instance.rb#41
  def logger; end

  # source://sentry-raven//lib/raven/instance.rb#223
  def rack_context(env); end

  # Tell the log that the client is good to go
  #
  # source://sentry-raven//lib/raven/instance.rb#52
  def report_status; end

  # Send an event to the configured Sentry server
  #
  # @example
  #   evt = Raven::Event.new(:message => "An errore)
  #   Raven.send_event(evt)
  #
  # source://sentry-raven//lib/raven/instance.rb#82
  def send_event(event, hint = T.unsafe(nil)); end

  # Bind tags context. Merges with existing context (if any).
  #
  # Tags are key / value pairs which generally represent things like
  # application version, environment, role, and server names.
  #
  # @example
  #   Raven.tags_context('my_custom_tag' => 'tag_value')
  #
  # source://sentry-raven//lib/raven/instance.rb#200
  def tags_context(options = T.unsafe(nil)); end

  # Bind user context. Merges with existing context (if any).
  #
  # It is recommending that you send at least the ``id`` and ``email``
  # values. All other values are arbitrary.
  #
  # @example
  #   Raven.user_context('id' => 1, 'email' => 'foo@example.com')
  #
  # source://sentry-raven//lib/raven/instance.rb#178
  def user_context(options = T.unsafe(nil)); end

  private

  # source://sentry-raven//lib/raven/instance.rb#235
  def install_at_exit_hook(options); end

  # source://sentry-raven//lib/raven/instance.rb#245
  def make_hint(obj); end
end

# source://sentry-raven//lib/raven/interface.rb#2
class Raven::Interface
  # @return [Interface] a new instance of Interface
  # @yield [_self]
  # @yieldparam _self [Raven::Interface] the object that the method was called on
  #
  # source://sentry-raven//lib/raven/interface.rb#3
  def initialize(attributes = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/interface.rb#21
  def to_hash; end

  class << self
    # @private
    #
    # source://sentry-raven//lib/raven/interface.rb#11
    def inherited(klass); end

    # source://sentry-raven//lib/raven/interface.rb#17
    def registered; end
  end
end

# source://sentry-raven//lib/raven/linecache.rb#2
class Raven::LineCache
  # @return [LineCache] a new instance of LineCache
  #
  # source://sentry-raven//lib/raven/linecache.rb#3
  def initialize; end

  # Any linecache you provide to Raven must implement this method.
  # Returns an Array of Strings representing the lines in the source
  # file. The number of lines retrieved is (2 * context) + 1, the middle
  # line should be the line requested by lineno. See specs for more information.
  #
  # source://sentry-raven//lib/raven/linecache.rb#11
  def get_file_context(filename, lineno, context); end

  private

  # source://sentry-raven//lib/raven/linecache.rb#35
  def getline(path, n); end

  # source://sentry-raven//lib/raven/linecache.rb#27
  def getlines(path); end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/linecache.rb#22
  def valid_path?(path); end
end

# source://sentry-raven//lib/raven/logger.rb#6
class Raven::Logger < ::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://sentry-raven//lib/raven/logger.rb#10
  def initialize(*_arg0); end
end

# source://sentry-raven//lib/raven/logger.rb#7
Raven::Logger::LOG_PREFIX = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/logger.rb#8
Raven::Logger::PROGNAME = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/interfaces/message.rb#4
class Raven::MessageInterface < ::Raven::Interface
  # @return [MessageInterface] a new instance of MessageInterface
  #
  # source://sentry-raven//lib/raven/interfaces/message.rb#7
  def initialize(*arguments); end

  # Returns the value of attribute message.
  #
  # source://sentry-raven//lib/raven/interfaces/message.rb#5
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://sentry-raven//lib/raven/interfaces/message.rb#5
  def message=(_arg0); end

  # Returns the value of attribute params.
  #
  # source://sentry-raven//lib/raven/interfaces/message.rb#5
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://sentry-raven//lib/raven/interfaces/message.rb#5
  def params=(_arg0); end

  # source://sentry-raven//lib/raven/interfaces/message.rb#12
  def unformatted_message; end

  class << self
    # source://sentry-raven//lib/raven/interfaces/message.rb#16
    def sentry_alias; end
  end
end

# source://sentry-raven//lib/raven/processor.rb#2
class Raven::Processor
  # @return [Processor] a new instance of Processor
  #
  # source://sentry-raven//lib/raven/processor.rb#7
  def initialize(client = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://sentry-raven//lib/raven/processor.rb#11
  def process(_data); end
end

# source://sentry-raven//lib/raven/processor/cookies.rb#2
class Raven::Processor::Cookies < ::Raven::Processor
  # source://sentry-raven//lib/raven/processor/cookies.rb#3
  def process(data); end

  private

  # source://sentry-raven//lib/raven/processor/cookies.rb#32
  def generate_masked_cookies(cookies); end

  # source://sentry-raven//lib/raven/processor/cookies.rb#22
  def process_if_string_keys(data); end

  # source://sentry-raven//lib/raven/processor/cookies.rb#12
  def process_if_symbol_keys(data); end
end

# source://sentry-raven//lib/raven/processor/http_headers.rb#2
class Raven::Processor::HTTPHeaders < ::Raven::Processor
  # source://sentry-raven//lib/raven/processor/http_headers.rb#7
  def initialize(client); end

  # source://sentry-raven//lib/raven/processor/http_headers.rb#12
  def process(data); end

  # source://sentry-raven//lib/raven/processor/http_headers.rb#5
  def sanitize_http_headers; end

  # source://sentry-raven//lib/raven/processor/http_headers.rb#5
  def sanitize_http_headers=(_arg0); end

  private

  # source://sentry-raven//lib/raven/processor/http_headers.rb#41
  def fields_re; end

  # source://sentry-raven//lib/raven/processor/http_headers.rb#37
  def matches_regexes?(k); end

  # source://sentry-raven//lib/raven/processor/http_headers.rb#29
  def process_if_string_keys(data); end

  # source://sentry-raven//lib/raven/processor/http_headers.rb#21
  def process_if_symbol_keys(data); end

  # source://sentry-raven//lib/raven/processor/http_headers.rb#51
  def special_characters?(string); end

  # source://sentry-raven//lib/raven/processor/http_headers.rb#47
  def use_boundary?(string); end
end

# source://sentry-raven//lib/raven/processor/http_headers.rb#3
Raven::Processor::HTTPHeaders::DEFAULT_FIELDS = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/processor.rb#4
Raven::Processor::INT_MASK = T.let(T.unsafe(nil), Integer)

# source://sentry-raven//lib/raven/processor/post_data.rb#2
class Raven::Processor::PostData < ::Raven::Processor
  # source://sentry-raven//lib/raven/processor/post_data.rb#3
  def process(data); end

  private

  # source://sentry-raven//lib/raven/processor/post_data.rb#18
  def process_if_string_keys(data); end

  # source://sentry-raven//lib/raven/processor/post_data.rb#12
  def process_if_symbol_keys(data); end
end

# source://sentry-raven//lib/raven/processor.rb#5
Raven::Processor::REGEX_SPECIAL_CHARACTERS = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/processor/removecircularreferences.rb#2
class Raven::Processor::RemoveCircularReferences < ::Raven::Processor
  # source://sentry-raven//lib/raven/processor/removecircularreferences.rb#4
  def process(value, visited = T.unsafe(nil)); end
end

# source://sentry-raven//lib/raven/processor/removecircularreferences.rb#3
Raven::Processor::RemoveCircularReferences::ELISION_STRING = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/processor.rb#3
Raven::Processor::STRING_MASK = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/processor/sanitizedata.rb#6
class Raven::Processor::SanitizeData < ::Raven::Processor
  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#14
  def initialize(client); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#21
  def process(value, key = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#12
  def sanitize_credit_cards; end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#12
  def sanitize_credit_cards=(_arg0); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#12
  def sanitize_fields; end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#12
  def sanitize_fields=(_arg0); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#12
  def sanitize_fields_excluded; end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#12
  def sanitize_fields_excluded=(_arg0); end

  private

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#105
  def matches_regexes?(k, v); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#128
  def parse_json_or_nil(string); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#54
  def sanitize_array_value(key, value); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#44
  def sanitize_hash_value(key, value); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#77
  def sanitize_query_string(query_string); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#101
  def sanitize_sensitive_string_content(value); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#62
  def sanitize_string_value(key, value); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#110
  def sensitive_fields; end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#124
  def special_characters?(string); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#120
  def use_boundary?(string); end

  # source://sentry-raven//lib/raven/processor/sanitizedata.rb#40
  def utf8_processor; end
end

# source://sentry-raven//lib/raven/processor/sanitizedata.rb#8
Raven::Processor::SanitizeData::CREDIT_CARD_RE = T.let(T.unsafe(nil), Regexp)

# source://sentry-raven//lib/raven/processor/sanitizedata.rb#7
Raven::Processor::SanitizeData::DEFAULT_FIELDS = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/processor/sanitizedata.rb#10
Raven::Processor::SanitizeData::JSON_STARTS_WITH = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/processor/sanitizedata.rb#9
Raven::Processor::SanitizeData::QUERY_STRING = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/processor/utf8conversion.rb#2
class Raven::Processor::UTF8Conversion < ::Raven::Processor
  # source://sentry-raven//lib/raven/processor/utf8conversion.rb#9
  def process(value); end

  private

  # source://sentry-raven//lib/raven/processor/utf8conversion.rb#43
  def remove_invalid_bytes(string); end
end

# source://sentry-raven//lib/raven/processor/utf8conversion.rb#7
Raven::Processor::UTF8Conversion::REPLACE = T.let(T.unsafe(nil), String)

# Middleware for Rack applications. Any errors raised by the upstream
# application will be delivered to Sentry and re-raised.
#
# Synopsis:
#
#   require 'rack'
#   require 'raven'
#
#   Raven.configure do |config|
#     config.server = 'http://my_dsn'
#   end
#
#   app = Rack::Builder.app do
#     use Raven::Rack
#     run lambda { |env| raise "Rack down" }
#   end
#
# Use a standard Raven.configure call to configure your server credentials.
#
# source://sentry-raven//lib/raven/integrations/rack.rb#23
class Raven::Rack
  # @return [Rack] a new instance of Rack
  #
  # source://sentry-raven//lib/raven/integrations/rack.rb#39
  def initialize(app); end

  # source://sentry-raven//lib/raven/integrations/rack.rb#43
  def call(env); end

  class << self
    # source://sentry-raven//lib/raven/integrations/rack.rb#24
    def capture_exception(exception, env, options = T.unsafe(nil)); end

    # source://sentry-raven//lib/raven/integrations/rack.rb#24
    def capture_message(exception, env, options = T.unsafe(nil)); end

    # source://sentry-raven//lib/raven/integrations/rack.rb#24
    def capture_type(exception, env, options = T.unsafe(nil)); end
  end
end

# source://sentry-raven//lib/raven/integrations/rack.rb#69
module Raven::RackInterface
  # source://sentry-raven//lib/raven/integrations/rack.rb#70
  def from_rack(env_hash); end

  private

  # source://sentry-raven//lib/raven/integrations/rack.rb#129
  def format_env_for_sentry(env_hash); end

  # source://sentry-raven//lib/raven/integrations/rack.rb#99
  def format_headers_for_sentry(env_hash); end

  # See Sentry server default limits at
  # https://github.com/getsentry/sentry/blob/master/src/sentry/conf/server.py
  #
  # source://sentry-raven//lib/raven/integrations/rack.rb#87
  def read_data_from(request); end
end

# source://sentry-raven//lib/raven/integrations/rails.rb#4
class Raven::Rails < ::Rails::Railtie; end

# source://sentry-raven//lib/raven/integrations/rails/backtrace_cleaner.rb#6
class Raven::Rails::BacktraceCleaner < ::ActiveSupport::BacktraceCleaner
  # @return [BacktraceCleaner] a new instance of BacktraceCleaner
  #
  # source://sentry-raven//lib/raven/integrations/rails/backtrace_cleaner.rb#10
  def initialize; end
end

# source://sentry-raven//lib/raven/integrations/rails/backtrace_cleaner.rb#7
Raven::Rails::BacktraceCleaner::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sentry-raven//lib/raven/integrations/rails/backtrace_cleaner.rb#8
Raven::Rails::BacktraceCleaner::RENDER_TEMPLATE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sentry-raven//lib/raven/integrations/rails/controller_methods.rb#3
module Raven::Rails::ControllerMethods
  # source://sentry-raven//lib/raven/integrations/rails/controller_methods.rb#8
  def capture_exception(exception, options = T.unsafe(nil)); end

  # source://sentry-raven//lib/raven/integrations/rails/controller_methods.rb#4
  def capture_message(message, options = T.unsafe(nil)); end
end

# source://sentry-raven//lib/raven/integrations/rails/controller_transaction.rb#3
module Raven::Rails::ControllerTransaction
  class << self
    # @private
    #
    # source://sentry-raven//lib/raven/integrations/rails/controller_transaction.rb#4
    def included(base); end
  end
end

# source://sentry-raven//lib/raven/integrations/rails/overrides/streaming_reporter.rb#3
module Raven::Rails::Overrides; end

# source://sentry-raven//lib/raven/integrations/rails/overrides/streaming_reporter.rb#11
module Raven::Rails::Overrides::OldStreamingReporter
  # source://sentry-raven//lib/raven/integrations/rails/overrides/streaming_reporter.rb#16
  def log_error_with_raven(exception); end

  class << self
    # @private
    #
    # source://sentry-raven//lib/raven/integrations/rails/overrides/streaming_reporter.rb#12
    def included(base); end
  end
end

# source://sentry-raven//lib/raven/integrations/rails/overrides/streaming_reporter.rb#4
module Raven::Rails::Overrides::StreamingReporter
  # source://sentry-raven//lib/raven/integrations/rails/overrides/streaming_reporter.rb#5
  def log_error(exception); end
end

# source://sentry-raven//lib/raven/integrations/sidekiq/cleanup_middleware.rb#2
module Raven::Sidekiq; end

# source://sentry-raven//lib/raven/integrations/sidekiq/cleanup_middleware.rb#3
class Raven::Sidekiq::CleanupMiddleware
  # source://sentry-raven//lib/raven/integrations/sidekiq/cleanup_middleware.rb#4
  def call(_worker, job, queue); end
end

# source://sentry-raven//lib/raven/integrations/sidekiq/error_handler.rb#5
class Raven::Sidekiq::ErrorHandler
  # source://sentry-raven//lib/raven/integrations/sidekiq/error_handler.rb#8
  def call(ex, context); end

  private

  # this will change in the future:
  # https://github.com/mperham/sidekiq/pull/3161
  #
  # source://sentry-raven//lib/raven/integrations/sidekiq/error_handler.rb#24
  def transaction_from_context(context); end
end

# source://sentry-raven//lib/raven/integrations/sidekiq/error_handler.rb#6
Raven::Sidekiq::ErrorHandler::SIDEKIQ_NAME = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/interfaces/single_exception.rb#2
class Raven::SingleExceptionInterface < ::Raven::Interface
  # Returns the value of attribute module.
  #
  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#5
  def module; end

  # Sets the attribute module
  #
  # @param value the value to set the attribute module to.
  #
  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#5
  def module=(_arg0); end

  # Returns the value of attribute stacktrace.
  #
  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#6
  def stacktrace; end

  # Sets the attribute stacktrace
  #
  # @param value the value to set the attribute stacktrace to.
  #
  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#6
  def stacktrace=(_arg0); end

  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#8
  def to_hash(*args); end

  # Returns the value of attribute type.
  #
  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#3
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#3
  def type=(_arg0); end

  # Returns the value of attribute value.
  #
  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#4
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://sentry-raven//lib/raven/interfaces/single_exception.rb#4
  def value=(_arg0); end
end

# source://sentry-raven//lib/raven/interfaces/stack_trace.rb#2
class Raven::StacktraceInterface < ::Raven::Interface
  # @return [StacktraceInterface] a new instance of StacktraceInterface
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#5
  def initialize(*arguments); end

  # Returns the value of attribute frames.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#3
  def frames; end

  # Sets the attribute frames
  #
  # @param value the value to set the attribute frames to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#3
  def frames=(_arg0); end

  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#13
  def to_hash(*args); end

  class << self
    # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#9
    def sentry_alias; end
  end
end

# Not actually an interface, but I want to use the same style
#
# source://sentry-raven//lib/raven/interfaces/stack_trace.rb#20
class Raven::StacktraceInterface::Frame < ::Raven::Interface
  # @return [Frame] a new instance of Frame
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#24
  def initialize(*arguments); end

  # Returns the value of attribute abs_path.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def abs_path; end

  # Sets the attribute abs_path
  #
  # @param value the value to set the attribute abs_path to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def abs_path=(_arg0); end

  # Returns the value of attribute context_line.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def context_line; end

  # Sets the attribute context_line
  #
  # @param value the value to set the attribute context_line to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def context_line=(_arg0); end

  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#28
  def filename; end

  # Returns the value of attribute function.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def function; end

  # Sets the attribute function
  #
  # @param value the value to set the attribute function to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def function=(_arg0); end

  # Returns the value of attribute in_app.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def in_app; end

  # Sets the attribute in_app
  #
  # @param value the value to set the attribute in_app to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def in_app=(_arg0); end

  # Returns the value of attribute lineno.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def lineno; end

  # Sets the attribute lineno
  #
  # @param value the value to set the attribute lineno to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def lineno=(_arg0); end

  # Returns the value of attribute module.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def module; end

  # Sets the attribute module
  #
  # @param value the value to set the attribute module to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def module=(_arg0); end

  # Returns the value of attribute post_context.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def post_context; end

  # Sets the attribute post_context
  #
  # @param value the value to set the attribute post_context to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def post_context=(_arg0); end

  # Returns the value of attribute pre_context.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def pre_context; end

  # Sets the attribute pre_context
  #
  # @param value the value to set the attribute pre_context to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def pre_context=(_arg0); end

  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#44
  def to_hash(*args); end

  # Returns the value of attribute vars.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def vars; end

  # Sets the attribute vars
  #
  # @param value the value to set the attribute vars to.
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#21
  def vars=(_arg0); end

  private

  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#64
  def longest_load_path; end

  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#60
  def project_root; end

  # @return [Boolean]
  #
  # source://sentry-raven//lib/raven/interfaces/stack_trace.rb#56
  def under_project_root?; end
end

# source://sentry-raven//lib/raven/transports.rb#2
module Raven::Transports; end

# source://sentry-raven//lib/raven/transports/dummy.rb#3
class Raven::Transports::Dummy < ::Raven::Transports::Transport
  # @return [Dummy] a new instance of Dummy
  #
  # source://sentry-raven//lib/raven/transports/dummy.rb#6
  def initialize(*_arg0); end

  # Returns the value of attribute events.
  #
  # source://sentry-raven//lib/raven/transports/dummy.rb#4
  def events; end

  # Sets the attribute events
  #
  # @param value the value to set the attribute events to.
  #
  # source://sentry-raven//lib/raven/transports/dummy.rb#4
  def events=(_arg0); end

  # source://sentry-raven//lib/raven/transports/dummy.rb#11
  def send_event(auth_header, data, options = T.unsafe(nil)); end
end

# source://sentry-raven//lib/raven/transports/http.rb#5
class Raven::Transports::HTTP < ::Raven::Transports::Transport
  # @return [HTTP] a new instance of HTTP
  #
  # source://sentry-raven//lib/raven/transports/http.rb#8
  def initialize(*args); end

  # Returns the value of attribute adapter.
  #
  # source://sentry-raven//lib/raven/transports/http.rb#6
  def adapter; end

  # Sets the attribute adapter
  #
  # @param value the value to set the attribute adapter to.
  #
  # source://sentry-raven//lib/raven/transports/http.rb#6
  def adapter=(_arg0); end

  # Returns the value of attribute conn.
  #
  # source://sentry-raven//lib/raven/transports/http.rb#6
  def conn; end

  # Sets the attribute conn
  #
  # @param value the value to set the attribute conn to.
  #
  # source://sentry-raven//lib/raven/transports/http.rb#6
  def conn=(_arg0); end

  # source://sentry-raven//lib/raven/transports/http.rb#14
  def send_event(auth_header, data, options = T.unsafe(nil)); end

  private

  # TODO: deprecate and replace where possible w/Faraday Builder
  #
  # source://sentry-raven//lib/raven/transports/http.rb#53
  def faraday_opts; end

  # source://sentry-raven//lib/raven/transports/http.rb#38
  def set_conn; end

  # source://sentry-raven//lib/raven/transports/http.rb#59
  def ssl_configuration; end
end

# source://sentry-raven//lib/raven/transports/stdout.rb#3
class Raven::Transports::Stdout < ::Raven::Transports::Transport
  # @return [Stdout] a new instance of Stdout
  #
  # source://sentry-raven//lib/raven/transports/stdout.rb#6
  def initialize(*_arg0); end

  # Returns the value of attribute events.
  #
  # source://sentry-raven//lib/raven/transports/stdout.rb#4
  def events; end

  # Sets the attribute events
  #
  # @param value the value to set the attribute events to.
  #
  # source://sentry-raven//lib/raven/transports/stdout.rb#4
  def events=(_arg0); end

  # source://sentry-raven//lib/raven/transports/stdout.rb#10
  def send_event(_auth_header, data, _options = T.unsafe(nil)); end
end

# source://sentry-raven//lib/raven/transports.rb#3
class Raven::Transports::Transport
  # @return [Transport] a new instance of Transport
  #
  # source://sentry-raven//lib/raven/transports.rb#6
  def initialize(configuration); end

  # Returns the value of attribute configuration.
  #
  # source://sentry-raven//lib/raven/transports.rb#4
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  #
  # source://sentry-raven//lib/raven/transports.rb#4
  def configuration=(_arg0); end

  # (auth_header, data, options = {})
  #
  # @raise [NotImplementedError]
  #
  # source://sentry-raven//lib/raven/transports.rb#10
  def send_event; end
end

# source://sentry-raven//lib/raven/utils/deep_merge.rb#2
module Raven::Utils; end

# source://sentry-raven//lib/raven/utils/context_filter.rb#3
module Raven::Utils::ContextFilter
  class << self
    # Once an ActiveJob is queued, ActiveRecord references get serialized into
    # some internal reserved keys, such as _aj_globalid.
    #
    # The problem is, if this job in turn gets queued back into ActiveJob with
    # these magic reserved keys, ActiveJob will throw up and error. We want to
    # capture these and mutate the keys so we can sanely report it.
    #
    # source://sentry-raven//lib/raven/utils/context_filter.rb#14
    def filter_context(context); end

    private

    # source://sentry-raven//lib/raven/utils/context_filter.rb#27
    def filter_context_hash(key, value); end

    # source://sentry-raven//lib/raven/utils/context_filter.rb#32
    def format_globalid(context); end
  end
end

# ported from ActiveSupport
#
# source://sentry-raven//lib/raven/utils/deep_merge.rb#4
module Raven::Utils::DeepMergeHash
  class << self
    # source://sentry-raven//lib/raven/utils/deep_merge.rb#5
    def deep_merge(hash, other_hash, &block); end

    # source://sentry-raven//lib/raven/utils/deep_merge.rb#9
    def deep_merge!(hash, other_hash, &block); end
  end
end

# source://sentry-raven//lib/raven/utils/exception_cause_chain.rb#3
module Raven::Utils::ExceptionCauseChain
  class << self
    # source://sentry-raven//lib/raven/utils/exception_cause_chain.rb#4
    def exception_to_array(exception); end
  end
end

# source://sentry-raven//lib/raven/utils/real_ip.rb#9
class Raven::Utils::RealIp
  # @return [RealIp] a new instance of RealIp
  #
  # source://sentry-raven//lib/raven/utils/real_ip.rb#21
  def initialize(ip_addresses); end

  # source://sentry-raven//lib/raven/utils/real_ip.rb#25
  def calculate_ip; end

  # Returns the value of attribute ip.
  #
  # source://sentry-raven//lib/raven/utils/real_ip.rb#19
  def ip; end

  # Sets the attribute ip
  #
  # @param value the value to set the attribute ip to.
  #
  # source://sentry-raven//lib/raven/utils/real_ip.rb#19
  def ip=(_arg0); end

  # Returns the value of attribute ip_addresses.
  #
  # source://sentry-raven//lib/raven/utils/real_ip.rb#19
  def ip_addresses; end

  # Sets the attribute ip_addresses
  #
  # @param value the value to set the attribute ip_addresses to.
  #
  # source://sentry-raven//lib/raven/utils/real_ip.rb#19
  def ip_addresses=(_arg0); end

  protected

  # source://sentry-raven//lib/raven/utils/real_ip.rb#57
  def filter_local_addresses(ips); end

  # source://sentry-raven//lib/raven/utils/real_ip.rb#42
  def ips_from(header); end
end

# source://sentry-raven//lib/raven/utils/real_ip.rb#10
Raven::Utils::RealIp::LOCAL_ADDRESSES = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/utils/request_id.rb#3
module Raven::Utils::RequestId
  class << self
    # Request ID based on ActionDispatch::RequestId
    #
    # source://sentry-raven//lib/raven/utils/request_id.rb#7
    def read_from(env_hash); end
  end
end

# source://sentry-raven//lib/raven/utils/request_id.rb#4
Raven::Utils::RequestId::REQUEST_ID_HEADERS = T.let(T.unsafe(nil), Array)

# source://sentry-raven//lib/raven/version.rb#4
Raven::VERSION = T.let(T.unsafe(nil), String)

# source://sentry-raven//lib/raven/core_ext/object/duplicable.rb#77
class Symbol
  include ::Comparable
end
