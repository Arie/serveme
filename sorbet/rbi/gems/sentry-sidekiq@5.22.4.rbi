# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-sidekiq` gem.
# Please instead update this file by running `bin/tapioca gem sentry-sidekiq`.


# source://sentry-sidekiq//lib/sentry/sidekiq/version.rb#3
module Sentry
  class << self
    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#219
    def add_attachment(**opts); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#320
    def add_breadcrumb(breadcrumb, **options); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#539
    def add_global_event_processor(&block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#107
    def apply_patches(config); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#75
    def background_worker; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#75
    def background_worker=(_arg0); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#83
    def backpressure_monitor; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#479
    def capture_check_in(slug, status, **options); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#463
    def capture_event(event); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#427
    def capture_exception(exception, **options, &block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#455
    def capture_message(message, **options, &block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#357
    def clone_hub_to_current_thread; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#253
    def close; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#159
    def configuration; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#373
    def configure_scope(&block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#583
    def continue_trace(env, **options); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#302
    def csp_report_uri; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#614
    def dependency_installed?(name); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#521
    def exception_captured?(exc); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#57
    def exception_locals_tp; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#556
    def get_baggage; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#341
    def get_current_client; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#330
    def get_current_hub; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#349
    def get_current_scope; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#310
    def get_main_hub; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#565
    def get_trace_propagation_headers; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#574
    def get_trace_propagation_meta; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#547
    def get_traceparent; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#230
    def init(&block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#290
    def initialized?; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#123
    def integrations; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#513
    def last_event_id; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#599
    def logger; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#87
    def metrics_aggregator; end

    # source://railties/8.0.1/lib/rails/engine.rb#413
    def railtie_helpers_paths; end

    # source://railties/8.0.1/lib/rails/engine.rb#396
    def railtie_namespace; end

    # source://railties/8.0.1/lib/rails/engine.rb#417
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#131
    def register_integration(name, version); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#92
    def register_patch(key, patch = T.unsafe(nil), target = T.unsafe(nil), &block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#114
    def registered_patches; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#604
    def sdk_meta; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#166
    def send_event(*args); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#79
    def session_flusher; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#212
    def set_context(*args); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#198
    def set_extras(*args); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#191
    def set_tags(*args); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#205
    def set_user(*args); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#487
    def start_transaction(**options); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#591
    def sys_command(command); end

    # source://railties/8.0.1/lib/rails/engine.rb#402
    def table_name_prefix; end

    # source://railties/8.0.1/lib/rails/engine.rb#409
    def use_relative_model_naming?; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#609
    def utc_now; end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#505
    def with_child_span(**attributes, &block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#444
    def with_exception_captured(**options, &block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#398
    def with_scope(&block); end

    # source://sentry-ruby/5.22.4/lib/sentry-ruby.rb#418
    def with_session_tracking(&block); end
  end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/configuration.rb#4
class Sentry::Configuration
  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#404
  def initialize; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#29
  def app_dirs_pattern; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#29
  def app_dirs_pattern=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#36
  def async; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#489
  def async=(value); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#277
  def auto_session_tracking; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#277
  def auto_session_tracking=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#53
  def background_worker_max_queue; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#53
  def background_worker_max_queue=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#46
  def background_worker_threads; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#46
  def background_worker_threads=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#64
  def backtrace_cleanup_callback; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#64
  def backtrace_cleanup_callback=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#73
  def before_breadcrumb; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#530
  def before_breadcrumb=(value); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#87
  def before_send; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#518
  def before_send=(value); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#100
  def before_send_transaction; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#524
  def before_send_transaction=(value); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#112
  def breadcrumbs_logger; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#505
  def breadcrumbs_logger=(logger); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#155
  def capture_exception_frame_locals; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#169
  def capture_exception_frame_locals=(value); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#120
  def context_lines; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#120
  def context_lines=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#245
  def cron; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#623
  def csp_report_uri; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#129
  def debug; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#129
  def debug=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#645
  def detect_release; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#133
  def dsn; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#477
  def dsn=(value); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#283
  def enable_backpressure_handling; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#283
  def enable_backpressure_handling=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#268
  def enable_tracing; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#544
  def enable_tracing=(enable_tracing); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#137
  def enabled_environments; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#137
  def enabled_environments=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#601
  def enabled_in_current_env?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#307
  def enabled_patches; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#307
  def enabled_patches=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#124
  def environment; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#536
  def environment=(environment); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#658
  def error_messages; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#311
  def errors; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#588
  def exception_class_allowed?(exc); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#141
  def exclude_loggers; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#141
  def exclude_loggers=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#146
  def excluded_exceptions; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#146
  def excluded_exceptions=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#311
  def gem_specs; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#155
  def include_local_variables; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#155
  def include_local_variables=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#150
  def inspect_exception_causes_for_exclusion; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#150
  def inspect_exception_causes_for_exclusion=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#150
  def inspect_exception_causes_for_exclusion?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#292
  def instrumenter; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#540
  def instrumenter=(instrumenter); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#181
  def linecache; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#181
  def linecache=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#186
  def logger; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#186
  def logger=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#116
  def max_breadcrumbs; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#116
  def max_breadcrumbs=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#249
  def metrics; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#296
  def profiler_class; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#557
  def profiler_class=(profiler_class); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#302
  def profiles_sample_rate; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#553
  def profiles_sample_rate=(profiles_sample_rate); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#616
  def profiling_enabled?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#191
  def project_root; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#191
  def project_root=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#200
  def propagate_traces; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#200
  def propagate_traces=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#204
  def rack_env_whitelist; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#204
  def rack_env_whitelist=(_arg0); end

  # source://sentry-rails/5.22.4/lib/sentry/rails/configuration.rb#11
  def rails; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#209
  def release; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#483
  def release=(value); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#578
  def sample_allowed?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#214
  def sample_rate; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#214
  def sample_rate=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#273
  def send_client_reports; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#273
  def send_client_reports=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#227
  def send_default_pii; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#227
  def send_default_pii=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#218
  def send_modules; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#218
  def send_modules=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#568
  def sending_allowed?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#572
  def sending_to_dsn_allowed?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#477
  def server=(value); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#237
  def server_name; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#237
  def server_name=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#584
  def session_tracking?; end

  # Returns the value of attribute sidekiq.
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/configuration.rb#5
  def sidekiq; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#231
  def skip_rake_integration; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#231
  def skip_rake_integration=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#163
  def spotlight; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#163
  def spotlight=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#633
  def stacktrace_builder; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#196
  def strip_backtrace_load_path; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#196
  def strip_backtrace_load_path=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#288
  def trace_propagation_targets; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#288
  def trace_propagation_targets=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#253
  def traces_sample_rate; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#549
  def traces_sample_rate=(traces_sample_rate); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#263
  def traces_sampler; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#263
  def traces_sampler=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#610
  def tracing_enabled?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#241
  def transport; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#234
  def trusted_proxies; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#234
  def trusted_proxies=(_arg0); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#605
  def valid_sample_rate?(sample_rate); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#459
  def validate; end

  private

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#700
  def capture_in_environment?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#716
  def environment_from_env; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#671
  def excluded_exception?(incoming_exception); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#677
  def excluded_exception_classes; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#681
  def get_exception_class(x); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#665
  def init_dsn(dsn_string); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#685
  def matches_exception?(excluded_exception_class, incoming_exception); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#740
  def processor_count; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#734
  def run_post_initialization_callbacks; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#730
  def running_on_heroku?; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#693
  def safe_const_get(x); end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#720
  def server_name_from_env; end

  # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#707
  def valid?; end

  class << self
    # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#360
    def add_post_initialization_callback(&block); end

    # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#355
    def post_initialization_callbacks; end

    # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#368
    def validate(attribute, optional: T.unsafe(nil), type: T.unsafe(nil)); end

    # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#364
    def validations; end

    private

    # source://sentry-ruby/5.22.4/lib/sentry/configuration.rb#378
    def build_validation_proc(optional, type); end
  end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/version.rb#4
module Sentry::Sidekiq
  extend ::Sentry::Integrable
end

# source://sentry-sidekiq//lib/sentry/sidekiq/configuration.rb#19
class Sentry::Sidekiq::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/configuration.rb#24
  def initialize; end

  # Set this option to true if you want Sentry to only capture the last job
  # retry if it fails.
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/configuration.rb#22
  def report_after_job_retries; end

  # Set this option to true if you want Sentry to only capture the last job
  # retry if it fails.
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/configuration.rb#22
  def report_after_job_retries=(_arg0); end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#5
class Sentry::Sidekiq::ContextFilter
  # @return [ContextFilter] a new instance of ContextFilter
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#11
  def initialize(context); end

  # Returns the value of attribute context.
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#9
  def context; end

  # Once an ActiveJob is queued, ActiveRecord references get serialized into
  # some internal reserved keys, such as _aj_globalid.
  #
  # The problem is, if this job in turn gets queued back into ActiveJob with
  # these magic reserved keys, ActiveJob will throw up and error. We want to
  # capture these and mutate the keys so we can sanely report it.
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#22
  def filtered; end

  # source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#37
  def transaction_name; end

  private

  # source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#53
  def filter_context(hash); end

  # source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#68
  def filter_context_hash(key, value); end

  # @return [Boolean]
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#73
  def has_global_id?; end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#6
Sentry::Sidekiq::ContextFilter::ACTIVEJOB_RESERVED_PREFIX_REGEX = T.let(T.unsafe(nil), Regexp)

# source://sentry-sidekiq//lib/sentry/sidekiq/context_filter.rb#7
Sentry::Sidekiq::ContextFilter::SIDEKIQ_NAME = T.let(T.unsafe(nil), String)

# source://sentry-sidekiq//lib/sentry/sidekiq/cron/helpers.rb#5
module Sentry::Sidekiq::Cron; end

# source://sentry-sidekiq//lib/sentry/sidekiq/cron/helpers.rb#6
module Sentry::Sidekiq::Cron::Helpers
  class << self
    # This is used by Cron::Job and Scheduler
    #
    # source://sentry-sidekiq//lib/sentry/sidekiq/cron/helpers.rb#8
    def monitor_config(cron); end
  end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/cron/job.rb#14
module Sentry::Sidekiq::Cron::Job
  # source://sentry-sidekiq//lib/sentry/sidekiq/cron/job.rb#19
  def enqueue!(*args); end

  # source://sentry-sidekiq//lib/sentry/sidekiq/cron/job.rb#73
  def finish_transaction(transaction, status_code); end

  # source://sentry-sidekiq//lib/sentry/sidekiq/cron/job.rb#41
  def save; end

  # source://sentry-sidekiq//lib/sentry/sidekiq/cron/job.rb#64
  def start_transaction(scope); end

  class << self
    # source://sentry-sidekiq//lib/sentry/sidekiq/cron/job.rb#15
    def enqueueing_method; end
  end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/error_handler.rb#7
class Sentry::Sidekiq::ErrorHandler
  # @param ex [Exception] the exception / error that occured
  # @param context [Hash or Array] Sidekiq error context
  # @param sidekiq_config [Sidekiq::Config, Hash] Sidekiq configuration,
  #   Defaults to nil.
  #   Sidekiq will pass the config in starting Sidekiq 7.1.5, see
  #   https://github.com/sidekiq/sidekiq/pull/6051
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/error_handler.rb#16
  def call(ex, context, sidekiq_config = T.unsafe(nil)); end

  private

  # Tries to fetch the retry limit from the job config first,
  # then falls back to Sidekiq's configuration.
  #
  # @return [Integer] the number of retries allowed for the job
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/error_handler.rb#67
  def retry_limit(context, sidekiq_config); end

  # @return [Boolean]
  #
  # source://sentry-sidekiq//lib/sentry/sidekiq/error_handler.rb#58
  def retryable?(context); end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/error_handler.rb#8
Sentry::Sidekiq::ErrorHandler::WITH_SIDEKIQ_7 = T.let(T.unsafe(nil), TrueClass)

# source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#7
module Sentry::Sidekiq::Helpers
  # source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#8
  def set_span_data(span, id:, queue:, latency: T.unsafe(nil), retry_count: T.unsafe(nil)); end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/configuration.rb#14
Sentry::Sidekiq::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

# source://sentry-sidekiq//lib/sentry-sidekiq.rb#18
class Sentry::Sidekiq::Railtie < ::Rails::Railtie; end

# source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#90
class Sentry::Sidekiq::SentryContextClientMiddleware
  include ::Sentry::Sidekiq::Helpers

  # source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#93
  def call(worker_class, job, queue, _redis_pool); end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#18
class Sentry::Sidekiq::SentryContextServerMiddleware
  include ::Sentry::Sidekiq::Helpers

  # source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#66
  def build_tags(tags); end

  # source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#24
  def call(worker, job, queue); end

  # source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#82
  def finish_transaction(transaction, status); end

  # source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#70
  def start_transaction(scope, env); end
end

# source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#21
Sentry::Sidekiq::SentryContextServerMiddleware::OP_NAME = T.let(T.unsafe(nil), String)

# source://sentry-sidekiq//lib/sentry/sidekiq/sentry_context_middleware.rb#22
Sentry::Sidekiq::SentryContextServerMiddleware::SPAN_ORIGIN = T.let(T.unsafe(nil), String)

# source://sentry-sidekiq//lib/sentry/sidekiq/version.rb#5
Sentry::Sidekiq::VERSION = T.let(T.unsafe(nil), String)
