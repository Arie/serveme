# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ssrf_filter` gem.
# Please instead update this file by running `bin/tapioca gem ssrf_filter`.


# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#8
class SsrfFilter
  class << self
    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#106
    def delete(url, options = T.unsafe(nil), &block); end

    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#106
    def get(url, options = T.unsafe(nil), &block); end

    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#106
    def head(url, options = T.unsafe(nil), &block); end

    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#106
    def patch(url, options = T.unsafe(nil), &block); end

    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#106
    def post(url, options = T.unsafe(nil), &block); end

    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#106
    def put(url, options = T.unsafe(nil), &block); end

    private

    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#166
    def fetch_once(uri, ip, verb, options, &block); end

    # @return [Boolean]
    #
    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#149
    def ipaddr_has_mask?(ipaddr); end

    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#155
    def normalized_hostname(uri); end

    # @raise [ArgumentError]
    #
    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#9
    def prefixlen_from_ipaddr(ipaddr); end

    # @return [Boolean]
    #
    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#139
    def unsafe_ip_address?(ip_address); end

    # source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#207
    def validate_request(request); end
  end
end

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#102
class SsrfFilter::CRLFInjection < ::SsrfFilter::Error; end

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#75
SsrfFilter::DEFAULT_ALLOW_UNFOLLOWED_REDIRECTS = T.let(T.unsafe(nil), FalseClass)

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#76
SsrfFilter::DEFAULT_MAX_REDIRECTS = T.let(T.unsafe(nil), Integer)

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#71
SsrfFilter::DEFAULT_RESOLVER = T.let(T.unsafe(nil), Proc)

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#69
SsrfFilter::DEFAULT_SCHEME_WHITELIST = T.let(T.unsafe(nil), Array)

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#87
class SsrfFilter::Error < ::StandardError; end

# https://en.wikipedia.org/wiki/Reserved_IP_addresses
#
# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#28
SsrfFilter::IPV4_BLACKLIST = T.let(T.unsafe(nil), Array)

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#47
SsrfFilter::IPV6_BLACKLIST = T.let(T.unsafe(nil), Array)

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#90
class SsrfFilter::InvalidUriScheme < ::SsrfFilter::Error; end

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#93
class SsrfFilter::PrivateIPAddress < ::SsrfFilter::Error; end

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#99
class SsrfFilter::TooManyRedirects < ::SsrfFilter::Error; end

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#96
class SsrfFilter::UnresolvedHostname < ::SsrfFilter::Error; end

# source://ssrf_filter//lib/ssrf_filter/ssrf_filter.rb#78
SsrfFilter::VERB_MAP = T.let(T.unsafe(nil), Hash)

# source://ssrf_filter//lib/ssrf_filter/version.rb#4
SsrfFilter::VERSION = T.let(T.unsafe(nil), String)
