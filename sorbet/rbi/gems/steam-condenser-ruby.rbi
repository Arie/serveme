# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/steam-condenser-ruby/all/steam-condenser-ruby.rbi
#
# steam-condenser-ruby-2d1a1acc2e76

module SteamCondenser::Logging
  def log; end
  def self.formatter=(formatter); end
  def self.included(klass); end
  def self.level=(level); end
  def self.logdev=(logdev); end
end
module SteamCondenser
end
module SteamCondenser::Community
end
module SteamCondenser::Community::URI
  def self.open(*args); end
end
class SteamCondenser::Error < StandardError
  def cause; end
  def initialize(message, cause = nil); end
end
class SteamCondenser::Error::WebApi < SteamCondenser::Error
  def initialize(cause, status_code = nil, status_message = nil); end
end
module SteamCondenser::Community::WebApi
  def self.api_key; end
  def self.api_key=(api_key); end
  def self.get(format, interface, method, version = nil, params = nil); end
  def self.interfaces; end
  def self.json!(interface, method, version = nil, params = nil); end
  def self.json(interface, method, version = nil, params = nil); end
  def self.log; end
  def self.secure=(secure); end
  include SteamCondenser::Logging
end
class SteamCondenser::Community::AppNews
  def app_id; end
  def author; end
  def contents; end
  def date; end
  def external?; end
  def feed_label; end
  def feed_name; end
  def gid; end
  def initialize(app_id, news_data); end
  def self.news_for_app(app_id, count = nil, max_length = nil); end
  def title; end
  def to_s; end
  def url; end
end
module SteamCondenser::Community::Cacheable
  def cache; end
  def cache_id_value(id); end
  def cache_ids; end
  def cached_instance; end
  def fetch; end
  def fetch_time; end
  def fetched?; end
  def self.included(base); end
end
module SteamCondenser::Community::Cacheable::ClassMethods
  def cache; end
  def cache_ids; end
  def cacheable_with_ids(*ids); end
  def cached?(id); end
  def clear_cache; end
  def new(*args); end
end
class SteamCondenser::Community::GameItem
  def attributes; end
  def backpack_position; end
  def count; end
  def craftable?; end
  def defindex; end
  def id; end
  def initialize(inventory, item_data); end
  def inventory; end
  def item_class; end
  def item_set; end
  def level; end
  def name; end
  def origin; end
  def original_id; end
  def preliminary?; end
  def quality; end
  def schema_data; end
  def tradeable?; end
  def type; end
end
class SteamCondenser::Community::Dota2Item < SteamCondenser::Community::GameItem
  def equipped?; end
  def initialize(inventory, item_data); end
end
class SteamCondenser::Community::GameItemSchema
  def self.method_added(name); end
  extend SteamCondenser::Community::Cacheable::ClassMethods
  include SteamCondenser::Community::Cacheable
end
class SteamCondenser::Community::GameAchievement
  def api_name; end
  def description(language = nil); end
  def hidden; end
  def icon_closed_url; end
  def icon_open_url; end
  def initialize(schema, data); end
  def inspect; end
  def instance(user, unlocked); end
  def name(language = nil); end
  def schema; end
  def self.global_percentages(app_id); end
end
class SteamCondenser::Community::GameAchievement::Instance
  def achievement; end
  def initialize(achievement, user, unlocked); end
  def inspect; end
  def unlocked?; end
  def user; end
end
class SteamCondenser::Community::GameLeaderboardEntry
  def initialize(entry_data, leaderboard); end
  def leaderboard; end
  def rank; end
  def score; end
  def steam_id; end
end
module SteamCondenser::Community::XMLData
  def parse(url); end
end
class SteamCondenser::Community::GameLeaderboard
  def display_type; end
  def entry_count; end
  def entry_for_steam_id(steam_id); end
  def entry_for_steam_id_friends(steam_id); end
  def entry_range(first, last); end
  def id; end
  def initialize(board_data); end
  def name; end
  def parse_entries; end
  def self.leaderboard(app_id, id); end
  def self.leaderboards(app_id); end
  def self.load_leaderboards(app_id); end
  def sort_method; end
  include SteamCondenser::Community::XMLData
end
class SteamCondenser::Community::GameStatsDatum
  def api_name; end
  def default_value; end
  def initialize(schema, data); end
  def inspect; end
  def instance(user, value); end
  def name(language = nil); end
  def schema; end
end
class SteamCondenser::Community::GameStatsDatum::Instance
  def datum; end
  def initialize(user, datum, value); end
  def inspect; end
  def user; end
  def value; end
end
class SteamCondenser::Community::GameStatsSchema
  def self.default_language; end
  def self.default_language=(language); end
  def self.method_added(name); end
  extend SteamCondenser::Community::Cacheable::ClassMethods
  include SteamCondenser::Community::Cacheable
end
class SteamCondenser::Community::GameStats
  def self.method_added(name); end
  extend SteamCondenser::Community::Cacheable::ClassMethods
  include SteamCondenser::Community::Cacheable
end
class SteamCondenser::Community::SteamGame
  def self.check_steam_inf(path); end
  def self.method_added(name); end
  def self.new(app_id, game_data = nil); end
  def self.uptodate?(app_id, version); end
  extend SteamCondenser::Community::Cacheable::ClassMethods
  include SteamCondenser::Community::Cacheable
end
class SteamCondenser::Community::SteamGroup
  def self.method_added(name); end
  extend SteamCondenser::Community::Cacheable::ClassMethods
  include SteamCondenser::Community::Cacheable
  include SteamCondenser::Community::XMLData
end
class SteamCondenser::Community::SteamId
  def self.community_id_to_steam_id(community_id); end
  def self.community_id_to_steam_id3(community_id); end
  def self.from_steam_id(steam_id); end
  def self.method_added(name); end
  def self.resolve_vanity_url(vanity_url); end
  def self.steam_id_to_community_id(steam_id); end
  extend SteamCondenser::Community::Cacheable::ClassMethods
  include SteamCondenser::Community::Cacheable
  include SteamCondenser::Community::XMLData
end
class SteamCondenser::Community::Dota2TestInventory < SteamCondenser::Community::GameInventory
  def initialize(steam_id64); end
end
class SteamCondenser::Community::Portal2Item < SteamCondenser::Community::GameItem
  def bots_equipped?; end
  def equipped?; end
  def initialize(inventory, item_data); end
  def slot; end
end
class SteamCondenser::Community::Portal2Inventory < SteamCondenser::Community::GameInventory
  def initialize(steam_id64); end
end
class SteamCondenser::Community::TF2Item < SteamCondenser::Community::GameItem
  def classes_equipped?; end
  def equipped?; end
  def initialize(inventory, item_data); end
  def slot; end
end
class SteamCondenser::Community::TF2BetaInventory < SteamCondenser::Community::GameInventory
  def initialize(steam_id64); end
end
class SteamCondenser::Community::TF2Inventory < SteamCondenser::Community::GameInventory
  def initialize(steam_id64); end
end
class SteamCondenser::Community::GameInventory
  def self.method_added(name); end
  def self.new(app_id, steam_id = nil, *args); end
  def self.schema_language=(language); end
  extend SteamCondenser::Community::Cacheable::ClassMethods
  include SteamCondenser::Community::Cacheable
end
class SteamCondenser::Community::Dota2Inventory < SteamCondenser::Community::GameInventory
end
class SteamCondenser::Community::TF2GoldenWrench
  def date; end
  def id; end
  def initialize(wrench_data); end
  def number; end
  def owner; end
  def self.golden_wrenches; end
end
module SteamCondenser::Servers
end
module SteamCondenser::Servers::BaseServer
  def disconnect; end
  def failsafe(&proc); end
  def host_names; end
  def init_socket; end
  def initialize(address, port = nil); end
  def ip_addresses; end
  def rotate_ip; end
end
class SteamCondenser::Error::Timeout < SteamCondenser::Error
  def initialize; end
end
class SteamCondenser::Servers::SteamPlayer
  def add_info(player_data); end
  def bot?; end
  def client_port; end
  def connect_time; end
  def connection_id; end
  def extended?; end
  def id; end
  def initialize(id, name, score, connect_time); end
  def ip_address; end
  def loss; end
  def name; end
  def ping; end
  def rate; end
  def score; end
  def state; end
  def steam_id; end
  def to_s; end
end
class StringIO
  def cstring; end
  def float; end
  def get; end
  def long; end
  def remaining; end
  def self.alloc(size); end
  def short; end
  def signed_long; end
end
module SteamCondenser::Servers::Packets
end
module SteamCondenser::Servers::Packets::BasePacket
  def initialize(header_data, content_data = nil); end
  def to_s; end
end
class SteamCondenser::Servers::Packets::A2S_INFO_Packet
  def initialize; end
  include SteamCondenser::Servers::Packets::BasePacket
end
module SteamCondenser::Servers::Packets::RequestWithChallenge
  def to_s; end
end
class SteamCondenser::Servers::Packets::A2S_PLAYER_Packet
  def initialize(challenge_number = nil); end
  include SteamCondenser::Servers::Packets::BasePacket
  include SteamCondenser::Servers::Packets::RequestWithChallenge
end
class SteamCondenser::Servers::Packets::A2S_RULES_Packet
  def initialize(challenge_number = nil); end
  include SteamCondenser::Servers::Packets::BasePacket
  include SteamCondenser::Servers::Packets::RequestWithChallenge
end
class SteamCondenser::Servers::Packets::A2S_SERVERQUERY_GETCHALLENGE_Packet
  def initialize; end
  include SteamCondenser::Servers::Packets::BasePacket
end
module SteamCondenser::Servers::Packets::S2A_INFO_BasePacket
  def info; end
  include SteamCondenser::Servers::Packets::BasePacket
end
class SteamCondenser::Error::PacketFormat < SteamCondenser::Error
end
class SteamCondenser::Servers::Packets::S2A_PLAYER_Packet
  def initialize(content_data); end
  def player_hash; end
  include SteamCondenser::Servers::Packets::BasePacket
end
class SteamCondenser::Servers::Packets::S2A_RULES_Packet
  def initialize(content_data); end
  def rules_hash; end
  include SteamCondenser::Servers::Packets::BasePacket
end
class SteamCondenser::Servers::Packets::S2C_CHALLENGE_Packet
  def challenge_number; end
  def initialize(challenge_number); end
  include SteamCondenser::Servers::Packets::BasePacket
end
module SteamCondenser::Servers::GameServer
  def handle_response_for_request(request_type, repeat_on_failure = nil); end
  def init; end
  def initialize(address, port = nil); end
  def ping; end
  def players(rcon_password = nil); end
  def rcon_auth(password); end
  def rcon_authenticated?; end
  def rcon_exec(command); end
  def rules; end
  def self.player_status_attributes(status_header); end
  def self.split_player_status(attributes, player_status); end
  def server_info; end
  def to_s; end
  def update_challenge_number; end
  def update_ping; end
  def update_players(rcon_password = nil); end
  def update_rules; end
  def update_server_info; end
  include SteamCondenser::Servers::BaseServer
end
class SteamCondenser::Servers::Packets::A2M_GET_SERVERS_BATCH2_Packet
  def initialize(region_code = nil, start_ip = nil, filter = nil); end
  def to_s; end
  include SteamCondenser::Servers::Packets::BasePacket
end
module SteamCondenser::Servers::Sockets
end
module SteamCondenser::Servers::Sockets::BaseSocket
  def close; end
  def initialize(ip_address, port = nil); end
  def receive_packet(buffer_length = nil); end
  def self.timeout=(timeout); end
  def send_packet(data_packet); end
end
class SteamCondenser::Servers::Sockets::MasterServerSocket
  def reply; end
  def self.log; end
  include SteamCondenser::Logging
  include SteamCondenser::Servers::Sockets::BaseSocket
end
class SteamCondenser::Servers::MasterServer
  def init_socket; end
  def self.log; end
  def self.retries=(retries); end
  def servers(region_code = nil, filters = nil, force = nil); end
  include SteamCondenser::Logging
  include SteamCondenser::Servers::BaseServer
end
module SteamCondenser::Servers::Packets::RCON
end
class SteamCondenser::Servers::Packets::RCON::RCONGoldSrcRequest
  def initialize(request); end
  def to_s; end
  include SteamCondenser::Servers::Packets::BasePacket
end
class SteamCondenser::Servers::Packets::S2A_INFO_DETAILED_Packet
  def initialize(data); end
  include SteamCondenser::Servers::Packets::S2A_INFO_BasePacket
end
class SteamCondenser::Servers::Packets::S2A_INFO2_Packet
  def initialize(data); end
  include SteamCondenser::Servers::Packets::S2A_INFO_BasePacket
end
class SteamCondenser::Servers::Packets::M2A_SERVER_BATCH_Packet
  def initialize(data); end
  def servers; end
  include SteamCondenser::Servers::Packets::BasePacket
end
class SteamCondenser::Servers::Packets::S2A_LOGSTRING_Packet
  def initialize(data); end
  def message; end
  include SteamCondenser::Servers::Packets::BasePacket
end
class SteamCondenser::Servers::Packets::RCON::RCONGoldSrcResponse
  def initialize(command_response); end
  def response; end
  include SteamCondenser::Servers::Packets::BasePacket
end
module SteamCondenser::Servers::Packets::SteamPacketFactory
  def self.packet_from_data(raw_data); end
  def self.reassemble_packet(split_packets, is_compressed = nil, packet_checksum = nil); end
end
class SteamCondenser::Error::RCONBan < SteamCondenser::Error
  def initialize; end
end
class SteamCondenser::Error::RCONNoAuth < SteamCondenser::Error
  def initialize; end
end
class SteamCondenser::Servers::Sockets::GoldSrcSocket
  def initialize(ipaddress, port_number = nil, is_hltv = nil); end
  def rcon_challenge; end
  def rcon_exec(password, command); end
  def rcon_send(command); end
  def reply; end
  def self.log; end
  include SteamCondenser::Logging
  include SteamCondenser::Servers::Sockets::BaseSocket
end
class SteamCondenser::Servers::GoldSrcServer
  def init_socket; end
  def initialize(address, port = nil, is_hltv = nil); end
  def rcon_auth(password); end
  def rcon_exec(command); end
  def self.log; end
  def self.master; end
  include SteamCondenser::Logging
  include SteamCondenser::Servers::GameServer
end
module SteamCondenser::Servers::Packets::RCON::BasePacket
  def initialize(request_id, rcon_header, rcon_data); end
  def request_id; end
  def to_s; end
  include SteamCondenser::Servers::Packets::BasePacket
end
class SteamCondenser::Servers::Packets::RCON::RCONAuthRequest
  def initialize(request_id, rcon_password); end
  include SteamCondenser::Servers::Packets::RCON::BasePacket
end
class SteamCondenser::Servers::Packets::RCON::RCONAuthResponse
  def initialize(request_id); end
  include SteamCondenser::Servers::Packets::RCON::BasePacket
end
class SteamCondenser::Servers::Packets::RCON::RCONExecRequest
  def initialize(request_id, rcon_command); end
  include SteamCondenser::Servers::Packets::RCON::BasePacket
end
class SteamCondenser::Servers::Packets::RCON::RCONExecResponse
  def initialize(request_id, command_response); end
  def response; end
  include SteamCondenser::Servers::Packets::RCON::BasePacket
end
module SteamCondenser::Servers::Packets::RCON::RCONPacketFactory
  def self.packet_from_data(raw_data); end
end
class SteamCondenser::Servers::Packets::RCON::RCONTerminator
  def initialize(request_id); end
  include SteamCondenser::Servers::Packets::RCON::BasePacket
end
class SteamCondenser::Servers::Sockets::RCONSocket
  def close; end
  def connect; end
  def initialize(ip, port); end
  def reply; end
  def self.log; end
  def send_packet(data_packet); end
  include SteamCondenser::Logging
  include SteamCondenser::Servers::Sockets::BaseSocket
end
class SteamCondenser::Servers::Sockets::SourceSocket
  def reply; end
  def self.log; end
  include SteamCondenser::Logging
  include SteamCondenser::Servers::Sockets::BaseSocket
end
class SteamCondenser::Servers::SourceServer
  def disconnect; end
  def init_socket; end
  def initialize(address, port = nil); end
  def rcon_auth(password); end
  def rcon_exec(command); end
  def self.log; end
  def self.master; end
  include SteamCondenser::Logging
  include SteamCondenser::Servers::GameServer
end
