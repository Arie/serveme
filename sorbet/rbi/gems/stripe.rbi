# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/stripe/all/stripe.rbi
#
# stripe-12.5.0

module Stripe
  def self.api_base(*args, **, &block); end
  def self.api_base=(*args, **, &block); end
  def self.api_key(*args, **, &block); end
  def self.api_key=(*args, **, &block); end
  def self.api_version(*args, **, &block); end
  def self.api_version=(*args, **, &block); end
  def self.app_info; end
  def self.app_info=(info); end
  def self.ca_bundle_path(*args, **, &block); end
  def self.ca_bundle_path=(*args, **, &block); end
  def self.ca_store(*args, **, &block); end
  def self.client_id(*args, **, &block); end
  def self.client_id=(*args, **, &block); end
  def self.config; end
  def self.connect_base(*args, **, &block); end
  def self.connect_base=(*args, **, &block); end
  def self.deserialize(data); end
  def self.enable_telemetry=(*args, **, &block); end
  def self.enable_telemetry?(*args, **, &block); end
  def self.initial_network_retry_delay(*args, **, &block); end
  def self.log_level(*args, **, &block); end
  def self.log_level=(*args, **, &block); end
  def self.logger(*args, **, &block); end
  def self.logger=(*args, **, &block); end
  def self.max_network_retries(*args, **, &block); end
  def self.max_network_retries=(*args, **, &block); end
  def self.max_network_retry_delay(*args, **, &block); end
  def self.open_timeout(*args, **, &block); end
  def self.open_timeout=(*args, **, &block); end
  def self.proxy(*args, **, &block); end
  def self.proxy=(*args, **, &block); end
  def self.raw_request(method, url, params = nil, opts = nil); end
  def self.read_timeout(*args, **, &block); end
  def self.read_timeout=(*args, **, &block); end
  def self.set_app_info(name, partner_id: nil, url: nil, version: nil); end
  def self.stripe_account(*args, **, &block); end
  def self.stripe_account=(*args, **, &block); end
  def self.uploads_base(*args, **, &block); end
  def self.uploads_base=(*args, **, &block); end
  def self.verify_ssl_certs(*args, **, &block); end
  def self.verify_ssl_certs=(*args, **, &block); end
  def self.write_timeout(*args, **, &block); end
  def self.write_timeout=(*args, **, &block); end
end
module Stripe::ApiVersion
end
module Stripe::APIOperations
end
module Stripe::APIOperations::Create
  def create(params = nil, opts = nil); end
end
module Stripe::APIOperations::Delete
  def delete(params = nil, opts = nil); end
  def self.included(base); end
end
module Stripe::APIOperations::Delete::ClassMethods
  def delete(id, params = nil, opts = nil); end
end
module Stripe::APIOperations::List
  def list(filters = nil, opts = nil); end
end
module Stripe::APIOperations::NestedResource
  def define_operation(resource, operation, resource_url_method, resource_plural); end
  def nested_resource_class_methods(resource, path: nil, operations: nil, resource_plural: nil); end
end
module Stripe::APIOperations::Request
  def _deprecated_request(method, url, params = nil, opts = nil, usage = nil); end
  def execute_resource_request(method, url, params = nil, opts = nil, usage = nil); end
  def execute_resource_request_stream(method, url, params = nil, opts = nil, &read_body_chunk_block); end
  def request(*args, **, &block); end
  def request_stripe_object(method:, path:, params:, opts: nil, usage: nil); end
  def self.included(base); end
  extend Gem::Deprecate
end
module Stripe::APIOperations::Request::ClassMethods
  def _deprecated_request(method, url, params = nil, opts = nil, usage = nil); end
  def error_on_invalid_params(params); end
  def error_on_non_string_user_opts(opts); end
  def execute_resource_request(method, url, params = nil, opts = nil, usage = nil); end
  def execute_resource_request_internal(client_request_method_sym, method, url, params, opts, usage, &read_body_chunk_block); end
  def execute_resource_request_stream(method, url, params = nil, opts = nil, usage = nil, &read_body_chunk_block); end
  def request(*args, **, &block); end
  def request_stripe_object(method:, path:, params:, opts: nil, usage: nil); end
  def warn_on_opts_in_params(params); end
  extend Gem::Deprecate
end
module Stripe::APIOperations::Save
  def _deprecated_save(params = nil, opts = nil); end
  def save(*args, **, &block); end
  def save_url; end
  def self.included(base); end
  extend Gem::Deprecate
end
module Stripe::APIOperations::Save::ClassMethods
  def update(id, params = nil, opts = nil); end
end
module Stripe::APIOperations::SingletonSave
  def _deprecated_save(params = nil, opts = nil); end
  def save(*args, **, &block); end
  def self.included(base); end
  extend Gem::Deprecate
end
module Stripe::APIOperations::SingletonSave::ClassMethods
  def update(params = nil, opts = nil); end
end
module Stripe::APIOperations::Search
  def _deprecated__search(search_url, filters = nil, opts = nil); end
  def _search(*args, **, &block); end
  extend Gem::Deprecate
end
class Stripe::StripeError < StandardError
  def code; end
  def construct_error_object; end
  def error; end
  def http_body; end
  def http_headers; end
  def http_status; end
  def idempotent_replayed?; end
  def initialize(message = nil, http_status: nil, http_body: nil, json_body: nil, http_headers: nil, code: nil); end
  def json_body; end
  def message; end
  def request_id; end
  def response; end
  def response=(arg0); end
  def to_s; end
end
class Stripe::AuthenticationError < Stripe::StripeError
end
class Stripe::APIConnectionError < Stripe::StripeError
end
class Stripe::APIError < Stripe::StripeError
end
class Stripe::CardError < Stripe::StripeError
  def initialize(message, param, code: nil, http_status: nil, http_body: nil, json_body: nil, http_headers: nil); end
  def param; end
end
class Stripe::IdempotencyError < Stripe::StripeError
end
class Stripe::InvalidRequestError < Stripe::StripeError
  def initialize(message, param, http_status: nil, http_body: nil, json_body: nil, http_headers: nil, code: nil); end
  def param; end
  def param=(arg0); end
end
class Stripe::PermissionError < Stripe::StripeError
end
class Stripe::RateLimitError < Stripe::StripeError
end
class Stripe::SignatureVerificationError < Stripe::StripeError
  def initialize(message, sig_header, http_body: nil); end
  def sig_header; end
  def sig_header=(arg0); end
end
module Stripe::OAuth
  def self.authorize_url(params = nil, opts = nil); end
  def self.deauthorize(params = nil, opts = nil); end
  def self.get_client_id(params = nil); end
  def self.token(params = nil, opts = nil); end
end
class Stripe::OAuth::OAuthError < Stripe::StripeError
  def construct_error_object; end
  def initialize(code, description, http_status: nil, http_body: nil, json_body: nil, http_headers: nil); end
end
class Stripe::OAuth::InvalidClientError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::InvalidGrantError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::InvalidRequestError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::InvalidScopeError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::UnsupportedGrantTypeError < Stripe::OAuth::OAuthError
end
class Stripe::OAuth::UnsupportedResponseTypeError < Stripe::OAuth::OAuthError
end
module Stripe::ObjectTypes
  def self.object_names_to_classes; end
end
module Stripe::Util
  def self.check_api_key!(key); end
  def self.check_string_argument!(key); end
  def self.colorize(val, color, isatty); end
  def self.convert_to_stripe_object(data, opts = nil); end
  def self.convert_to_stripe_object_with_params(data, params, opts = nil, last_response = nil); end
  def self.custom_method(resource, target, name, http_verb, http_path); end
  def self.encode_parameters(params); end
  def self.flatten_params(params, parent_key = nil); end
  def self.flatten_params_array(value, calculated_key); end
  def self.level_name(level); end
  def self.log_debug(message, data = nil); end
  def self.log_error(message, data = nil); end
  def self.log_info(message, data = nil); end
  def self.log_internal(message, data = nil, color:, level:, logger:, out:); end
  def self.monotonic_time; end
  def self.normalize_headers(headers); end
  def self.normalize_id(id); end
  def self.normalize_opts(opts); end
  def self.object_classes; end
  def self.object_name_matches_class?(object_name, klass); end
  def self.objects_to_ids(obj); end
  def self.request_id_dashboard_url(request_id, api_key); end
  def self.secure_compare(str_a, str_b); end
  def self.symbolize_names(object); end
  def self.url_encode(key); end
  def self.wrap_logfmt_value(val); end
end
class Stripe::ConnectionManager
  def clear; end
  def config; end
  def connection_for(uri); end
  def create_connection(uri); end
  def execute_request(method, uri, body: nil, headers: nil, query: nil, &block); end
  def initialize(config = nil); end
  def last_used; end
  def proxy_parts; end
  def warn_ssl_verify_none; end
end
class Stripe::MultipartEncoder
  def body; end
  def boundary; end
  def close; end
  def content_type; end
  def encode(params); end
  def escape(str); end
  def initialize; end
  def self.encode(params); end
  def write_field(name, data, filename:); end
end
class Stripe::Instrumentation
  def self.any_subscribers?(topic); end
  def self.notify(topic, event); end
  def self.subscribe(topic, name = nil, &block); end
  def self.subscribers; end
  def self.unsubscribe(topic, name); end
end
class Stripe::Instrumentation::RequestBeginEvent
  def initialize(method:, path:, user_data:); end
  def method; end
  def path; end
  def user_data; end
end
class Stripe::Instrumentation::RequestEndEvent
  def duration; end
  def http_status; end
  def initialize(request_context:, response_context:, num_retries:, user_data: nil); end
  def method; end
  def num_retries; end
  def path; end
  def request_body; end
  def request_header; end
  def request_id; end
  def response_body; end
  def response_header; end
  def user_data; end
end
class Stripe::Instrumentation::RequestContext
  def body; end
  def duration; end
  def header; end
  def initialize(duration:, context:, header:); end
  def method; end
  def path; end
  def request_id; end
end
class Stripe::Instrumentation::ResponseContext
  def body; end
  def header; end
  def http_status; end
  def initialize(http_status:, response:); end
end
class Stripe::StripeClient
  def _deprecated_connection_manager; end
  def _deprecated_request; end
  def api_url(url = nil, api_base = nil); end
  def check_api_key!(api_key); end
  def config; end
  def connection_manager(*args, **, &block); end
  def encode_body(body_params, headers); end
  def execute_request(method, path, api_base: nil, api_key: nil, headers: nil, params: nil, usage: nil); end
  def execute_request_internal(method, path, api_base, api_key, headers, params, usage, &read_body_chunk_block); end
  def execute_request_stream(method, path, api_base: nil, api_key: nil, usage: nil, headers: nil, params: nil, &read_body_chunk_block); end
  def execute_request_with_rescues(api_base, headers, usage, context); end
  def format_app_info(info); end
  def general_api_error(status, body); end
  def handle_error_response(http_resp, context); end
  def handle_network_error(error, context, num_retries, api_base = nil); end
  def initialize(config_arg = nil); end
  def last_response_has_key?(object_id); end
  def log_request(context, num_retries); end
  def log_response(context, request_start, status, body, resp); end
  def log_response_error(context, request_start, error); end
  def merge_query_params(query_params, path); end
  def notify_request_begin(context); end
  def notify_request_end(context, duration, http_status, num_retries, user_data, resp, headers); end
  def options; end
  def request(*args, **, &block); end
  def request_headers(api_key, method); end
  def self.active_client; end
  def self.clear_all_connection_managers(config: nil); end
  def self.current_thread_context; end
  def self.default_client; end
  def self.default_connection_manager(config = nil); end
  def self.maybe_gc_connection_managers; end
  def self.should_retry?(error, num_retries:, config: nil); end
  def self.sleep_time(num_retries, config: nil); end
  def should_handle_as_error(http_status); end
  def specific_api_error(resp, error_data, context); end
  def specific_oauth_error(resp, error_code, context); end
  def store_last_response(object_id, resp); end
  extend Gem::Deprecate
end
class Stripe::StripeClient::ThreadContext
  def active_client; end
  def active_client=(arg0); end
  def default_client; end
  def default_client=(arg0); end
  def default_connection_managers; end
  def last_responses; end
  def last_responses=(arg0); end
  def reset_connection_managers; end
end
class Stripe::StripeClient::RequestLogContext
  def account; end
  def account=(arg0); end
  def api_key; end
  def api_key=(arg0); end
  def api_version; end
  def api_version=(arg0); end
  def body; end
  def body=(arg0); end
  def dup_from_response_headers(headers); end
  def idempotency_key; end
  def idempotency_key=(arg0); end
  def method; end
  def method=(arg0); end
  def path; end
  def path=(arg0); end
  def query; end
  def query=(arg0); end
  def request_id; end
  def request_id=(arg0); end
end
class Stripe::StripeClient::SystemProfiler
  def initialize; end
  def self.uname; end
  def self.uname_from_system; end
  def self.uname_from_system_ver; end
  def user_agent; end
end
class Stripe::StripeClient::StripeRequestMetrics
  def initialize(request_id, request_duration_ms, usage: nil); end
  def payload; end
  def request_duration_ms; end
  def request_duration_ms=(arg0); end
  def request_id; end
  def request_id=(arg0); end
  def usage; end
  def usage=(arg0); end
end
class Stripe::StripeObject
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def add_accessors(keys, values); end
  def as_json(*opts); end
  def deleted?; end
  def dirty!; end
  def dirty_value!(value); end
  def each(&blk); end
  def empty_values(obj); end
  def eql?(other); end
  def hash; end
  def initialize(id = nil, opts = nil); end
  def initialize_from(values, opts, last_response = nil); end
  def inspect; end
  def keys; end
  def last_response; end
  def marshal_dump; end
  def marshal_load(data); end
  def metaclass; end
  def method_missing(name, *args); end
  def remove_accessors(keys); end
  def respond_to_missing?(symbol, include_private = nil); end
  def self.additive_object_param(name); end
  def self.additive_object_param?(name); end
  def self.construct_from(values, opts = nil, last_response = nil); end
  def self.deep_copy(obj); end
  def self.protected_fields; end
  def serialize_params(options = nil); end
  def serialize_params_value(value, original, unsaved, force, key: nil); end
  def to_hash; end
  def to_json(*_opts); end
  def to_s(*_args); end
  def update_attributes(values, opts = nil, dirty: nil); end
  def values; end
  include Enumerable
end
class Stripe::StripeResponseHeaders
  def [](name); end
  def initialize(hash); end
  def self.from_net_http(resp); end
end
module Stripe::StripeResponseBase
  def http_headers; end
  def http_headers=(arg0); end
  def http_status; end
  def http_status=(arg0); end
  def request_id; end
  def request_id=(arg0); end
  def self.populate_for_net_http(resp, http_resp); end
end
class Stripe::StripeResponse
  def data; end
  def data=(arg0); end
  def http_body; end
  def http_body=(arg0); end
  def self.from_net_http(http_resp); end
  include Stripe::StripeResponseBase
end
class Stripe::StripeHeadersOnlyResponse
  def self.from_net_http(http_resp); end
  include Stripe::StripeResponseBase
end
class Stripe::ListObject < Stripe::StripeObject
  def [](key); end
  def auto_paging_each(&blk); end
  def each(&blk); end
  def empty?; end
  def filters; end
  def filters=(arg0); end
  def initialize(*args); end
  def next_page(params = nil, opts = nil); end
  def previous_page(params = nil, opts = nil); end
  def resource_url; end
  def retrieve(id, opts = nil); end
  def reverse_each(&blk); end
  def self.empty_list(opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Request::ClassMethods
  include Enumerable
  include Stripe::APIOperations::Create
  include Stripe::APIOperations::List
  include Stripe::APIOperations::Request
end
class Stripe::SearchResultObject < Stripe::StripeObject
  def [](key); end
  def auto_paging_each(&blk); end
  def each(&blk); end
  def empty?; end
  def filters; end
  def filters=(arg0); end
  def initialize(*args); end
  def next_search_result_page(params = nil, opts = nil); end
  def self.empty_search_result(opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Request::ClassMethods
  include Enumerable
  include Stripe::APIOperations::Request
  include Stripe::APIOperations::Search
end
class Stripe::ErrorObject < Stripe::StripeObject
  def charge; end
  def code; end
  def decline_code; end
  def doc_url; end
  def message; end
  def param; end
  def payment_intent; end
  def payment_method; end
  def setup_intent; end
  def source; end
  def type; end
end
class Stripe::OAuthErrorObject < Stripe::StripeObject
  def error; end
  def error_description; end
end
class Stripe::APIResource < Stripe::StripeObject
  def refresh; end
  def request_stream(method:, path:, params:, opts: nil, &read_body_chunk_block); end
  def request_stripe_object(method:, path:, params:, opts: nil); end
  def resource_url; end
  def save_with_parent; end
  def save_with_parent=(arg0); end
  def self.class_name; end
  def self.custom_method(name, http_verb:, http_path: nil); end
  def self.object_name; end
  def self.resource_url; end
  def self.retrieve(id, opts = nil); end
  def self.save_nested_resource(name); end
  extend Stripe::APIOperations::Request::ClassMethods
  include Stripe::APIOperations::Request
end
class Stripe::APIResourceTestHelpers
  def initialize(resource); end
  def resource_url; end
  def self.custom_method(name, http_verb:, http_path: nil); end
  def self.resource_class; end
  def self.resource_url; end
  extend Stripe::APIOperations::Request::ClassMethods
  include Stripe::APIOperations::Request
end
class Stripe::SingletonAPIResource < Stripe::APIResource
  def resource_url; end
  def self.resource_url; end
  def self.retrieve(params_or_opts = nil, definitely_opts = nil); end
end
module Stripe::Webhook
  def self.construct_event(payload, sig_header, secret, tolerance: nil); end
end
module Stripe::Webhook::Signature
  def self.compute_signature(timestamp, payload, secret); end
  def self.generate_header(timestamp, signature, scheme: nil); end
  def self.get_timestamp_and_signatures(header, scheme); end
  def self.verify_header(payload, header, secret, tolerance: nil); end
end
class Stripe::StripeConfiguration
  def api_base; end
  def api_base=(api_base); end
  def api_key; end
  def api_key=(arg0); end
  def api_version; end
  def api_version=(arg0); end
  def ca_bundle_path; end
  def ca_bundle_path=(path); end
  def ca_store; end
  def client_id; end
  def client_id=(arg0); end
  def connect_base; end
  def connect_base=(connect_base); end
  def enable_telemetry; end
  def enable_telemetry=(arg0); end
  def enable_telemetry?; end
  def initial_network_retry_delay; end
  def initial_network_retry_delay=(val); end
  def initialize; end
  def key; end
  def log_level; end
  def log_level=(val); end
  def logger; end
  def logger=(arg0); end
  def max_network_retries; end
  def max_network_retries=(val); end
  def max_network_retry_delay; end
  def max_network_retry_delay=(val); end
  def open_timeout; end
  def open_timeout=(open_timeout); end
  def proxy; end
  def proxy=(proxy); end
  def read_timeout; end
  def read_timeout=(read_timeout); end
  def reverse_duplicate_merge(hash); end
  def self.setup; end
  def stripe_account; end
  def stripe_account=(arg0); end
  def uploads_base; end
  def uploads_base=(uploads_base); end
  def verify_ssl_certs; end
  def verify_ssl_certs=(verify_ssl_certs); end
  def write_timeout; end
  def write_timeout=(write_timeout); end
end
class Stripe::Account < Stripe::APIResource
  def deauthorize(client_id = nil, opts = nil); end
  def delete(params = nil, opts = nil); end
  def external_account=(value); end
  def legal_entity; end
  def legal_entity=(_legal_entity); end
  def persons(params = nil, opts = nil); end
  def reject(params = nil, opts = nil); end
  def resource_url; end
  def self.capabilitys_url(id, nested_id = nil); end
  def self.create(params = nil, opts = nil); end
  def self.create_external_account(id, params = nil, opts = nil); end
  def self.create_login_link(id, params = nil, opts = nil); end
  def self.create_person(id, params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.delete_external_account(id, nested_id, params = nil, opts = nil); end
  def self.delete_person(id, nested_id, params = nil, opts = nil); end
  def self.external_accounts_url(id, nested_id = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_capabilities(id, params = nil, opts = nil); end
  def self.list_external_accounts(id, params = nil, opts = nil); end
  def self.list_persons(id, params = nil, opts = nil); end
  def self.login_links_url(id, nested_id = nil); end
  def self.object_name; end
  def self.persons(account, params = nil, opts = nil); end
  def self.persons_url(id, nested_id = nil); end
  def self.protected_fields; end
  def self.reject(account, params = nil, opts = nil); end
  def self.retrieve(id = nil, opts = nil); end
  def self.retrieve_capability(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.retrieve_external_account(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.retrieve_person(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def self.update_capability(id, nested_id, params = nil, opts = nil); end
  def self.update_external_account(id, nested_id, params = nil, opts = nil); end
  def self.update_person(id, nested_id, params = nil, opts = nil); end
  def serialize_additional_owners(legal_entity, additional_owners); end
  def serialize_params(options = nil); end
  def serialize_params_account(_obj, update_hash, options = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::AccountLink < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::AccountSession < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::ApplePayDomain < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.resource_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  include Stripe::APIOperations::Delete
end
class Stripe::ApplicationFee < Stripe::APIResource
  def self.create_refund(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_refunds(id, params = nil, opts = nil); end
  def self.object_name; end
  def self.refunds_url(id, nested_id = nil); end
  def self.retrieve_refund(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.update_refund(id, nested_id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
end
class Stripe::ApplicationFeeRefund < Stripe::APIResource
  def resource_url; end
  def self.object_name; end
  def self.retrieve(_id, _api_key = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Apps
end
class Stripe::Apps::Secret < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.delete_where(params = nil, opts = nil); end
  def self.find(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Balance < Stripe::SingletonAPIResource
  def self.object_name; end
end
class Stripe::BalanceTransaction < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::BankAccount < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def resource_url; end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  def self.verify(customer, id, params = nil, opts = nil); end
  def verify(params = nil, opts = nil); end
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
module Stripe::Billing
end
class Stripe::Billing::Alert < Stripe::APIResource
  def activate(params = nil, opts = nil); end
  def archive(params = nil, opts = nil); end
  def deactivate(params = nil, opts = nil); end
  def self.activate(id, params = nil, opts = nil); end
  def self.archive(id, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.deactivate(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Billing::Meter < Stripe::APIResource
  def deactivate(params = nil, opts = nil); end
  def reactivate(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.deactivate(id, params = nil, opts = nil); end
  def self.event_summarys_url(id, nested_id = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_event_summaries(id, params = nil, opts = nil); end
  def self.object_name; end
  def self.reactivate(id, params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Billing::MeterEvent < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::Billing::MeterEventAdjustment < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::Billing::MeterEventSummary < Stripe::APIResource
  def self.object_name; end
end
module Stripe::BillingPortal
end
class Stripe::BillingPortal::Configuration < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::BillingPortal::Session < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::Capability < Stripe::APIResource
  def resource_url; end
  def self.object_name; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Card < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def resource_url; end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::CashBalance < Stripe::APIResource
  def resource_url; end
  def self.object_name; end
  def self.retrieve(_id, _opts = nil); end
end
class Stripe::Charge < Stripe::APIResource
  def capture(params = nil, opts = nil); end
  def self.capture(charge, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_refunds(id, params = nil, opts = nil); end
  def self.object_name; end
  def self.refunds_url(id, nested_id = nil); end
  def self.retrieve_refund(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.search(params = nil, opts = nil); end
  def self.search_auto_paging_each(params = nil, opts = nil, &blk); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  extend Stripe::APIOperations::Search
  include Stripe::APIOperations::Save
end
module Stripe::Checkout
end
class Stripe::Checkout::Session < Stripe::APIResource
  def expire(params = nil, opts = nil); end
  def list_line_items(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.expire(session, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_line_items(session, params = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Climate
end
class Stripe::Climate::Order < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def self.cancel(order, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Climate::Product < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::Climate::Supplier < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::ConfirmationToken < Stripe::APIResource
  def self.object_name; end
  def test_helpers; end
end
class Stripe::ConfirmationToken::TestHelpers < Stripe::APIResourceTestHelpers
  def self.create(params = nil, opts = nil); end
  def self.resource_class; end
end
class Stripe::CountrySpec < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::Coupon < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::CreditNote < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_preview_line_items(params = nil, opts = nil); end
  def self.object_name; end
  def self.preview(params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def self.void_credit_note(id, params = nil, opts = nil); end
  def void_credit_note(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::CreditNoteLineItem < Stripe::StripeObject
  def self.object_name; end
end
class Stripe::Customer < Stripe::APIResource
  def create_funding_instructions(params = nil, opts = nil); end
  def delete(params = nil, opts = nil); end
  def delete_discount(params = nil, opts = nil); end
  def list_payment_methods(params = nil, opts = nil); end
  def retrieve_payment_method(payment_method, params = nil, opts = nil); end
  def self.balance_transactions_url(id, nested_id = nil); end
  def self.cash_balance_transactions_url(id, nested_id = nil); end
  def self.create(params = nil, opts = nil); end
  def self.create_balance_transaction(id, params = nil, opts = nil); end
  def self.create_funding_instructions(customer, params = nil, opts = nil); end
  def self.create_source(id, params = nil, opts = nil); end
  def self.create_tax_id(id, params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.delete_discount(customer, params = nil, opts = nil); end
  def self.delete_source(id, nested_id, params = nil, opts = nil); end
  def self.delete_tax_id(id, nested_id, params = nil, opts = nil); end
  def self.detach_source(id, nested_id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_balance_transactions(id, params = nil, opts = nil); end
  def self.list_cash_balance_transactions(id, params = nil, opts = nil); end
  def self.list_payment_methods(customer, params = nil, opts = nil); end
  def self.list_sources(id, params = nil, opts = nil); end
  def self.list_tax_ids(id, params = nil, opts = nil); end
  def self.object_name; end
  def self.retrieve_balance_transaction(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.retrieve_cash_balance(customer, params = nil, opts = nil); end
  def self.retrieve_cash_balance_transaction(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.retrieve_payment_method(customer, payment_method, params = nil, opts = nil); end
  def self.retrieve_source(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.retrieve_tax_id(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.search(params = nil, opts = nil); end
  def self.search_auto_paging_each(params = nil, opts = nil, &blk); end
  def self.sources_url(id, nested_id = nil); end
  def self.tax_ids_url(id, nested_id = nil); end
  def self.update(id, params = nil, opts = nil); end
  def self.update_balance_transaction(id, nested_id, params = nil, opts = nil); end
  def self.update_cash_balance(customer, params = nil, opts = nil); end
  def self.update_source(id, nested_id, params = nil, opts = nil); end
  def source=(value); end
  def test_helpers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  extend Stripe::APIOperations::Search
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Customer::TestHelpers < Stripe::APIResourceTestHelpers
  def fund_cash_balance(params = nil, opts = nil); end
  def self.fund_cash_balance(customer, params = nil, opts = nil); end
  def self.resource_class; end
end
class Stripe::CustomerBalanceTransaction < Stripe::APIResource
  def resource_url; end
  def self.object_name; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::CustomerCashBalanceTransaction < Stripe::APIResource
  def self.object_name; end
end
class Stripe::CustomerSession < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::Discount < Stripe::StripeObject
  def self.object_name; end
end
class Stripe::Dispute < Stripe::APIResource
  def close(params = nil, opts = nil); end
  def self.close(dispute, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Entitlements
end
class Stripe::Entitlements::ActiveEntitlement < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::Entitlements::Feature < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::EphemeralKey < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  include Stripe::APIOperations::Delete
end
class Stripe::Event < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::ExchangeRate < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::File < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.object_name_alt; end
  def self.resource_url; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::FileLink < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::FinancialConnections
end
class Stripe::FinancialConnections::Account < Stripe::APIResource
  def disconnect(params = nil, opts = nil); end
  def list_owners(params = nil, opts = nil); end
  def refresh_account(params = nil, opts = nil); end
  def self.disconnect(account, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_owners(account, params = nil, opts = nil); end
  def self.object_name; end
  def self.refresh_account(account, params = nil, opts = nil); end
  def self.subscribe(account, params = nil, opts = nil); end
  def self.unsubscribe(account, params = nil, opts = nil); end
  def subscribe(params = nil, opts = nil); end
  def unsubscribe(params = nil, opts = nil); end
  extend Stripe::APIOperations::List
end
class Stripe::FinancialConnections::AccountOwner < Stripe::StripeObject
  def self.object_name; end
end
class Stripe::FinancialConnections::AccountOwnership < Stripe::StripeObject
  def self.object_name; end
end
class Stripe::FinancialConnections::Session < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::FinancialConnections::Transaction < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
module Stripe::Forwarding
end
class Stripe::Forwarding::Request < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::FundingInstructions < Stripe::APIResource
  def resource_url; end
  def self.object_name; end
end
module Stripe::Identity
end
class Stripe::Identity::VerificationReport < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::Identity::VerificationSession < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def redact(params = nil, opts = nil); end
  def self.cancel(session, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.redact(session, params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Invoice < Stripe::APIResource
  def add_lines(params = nil, opts = nil); end
  def delete(params = nil, opts = nil); end
  def finalize_invoice(params = nil, opts = nil); end
  def mark_uncollectible(params = nil, opts = nil); end
  def pay(params = nil, opts = nil); end
  def remove_lines(params = nil, opts = nil); end
  def self.add_lines(invoice, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.create_preview(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.finalize_invoice(invoice, params = nil, opts = nil); end
  def self.lines_url(id, nested_id = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_lines(id, params = nil, opts = nil); end
  def self.list_upcoming_line_items(params = nil, opts = nil); end
  def self.mark_uncollectible(invoice, params = nil, opts = nil); end
  def self.object_name; end
  def self.pay(invoice, params = nil, opts = nil); end
  def self.remove_lines(invoice, params = nil, opts = nil); end
  def self.search(params = nil, opts = nil); end
  def self.search_auto_paging_each(params = nil, opts = nil, &blk); end
  def self.send_invoice(invoice, params = nil, opts = nil); end
  def self.upcoming(params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def self.update_lines(invoice, params = nil, opts = nil); end
  def self.void_invoice(invoice, params = nil, opts = nil); end
  def send_invoice(params = nil, opts = nil); end
  def update_lines(params = nil, opts = nil); end
  def void_invoice(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  extend Stripe::APIOperations::Search
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::InvoiceItem < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::InvoiceLineItem < Stripe::StripeObject
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Issuing
end
class Stripe::Issuing::Authorization < Stripe::APIResource
  def _deprecated_approve(params = nil, opts = nil); end
  def _deprecated_decline(params = nil, opts = nil); end
  def approve(*args, **, &block); end
  def decline(*args, **, &block); end
  def self._deprecated_approve(authorization, params = nil, opts = nil); end
  def self._deprecated_decline(authorization, params = nil, opts = nil); end
  def self.approve(*args, **, &block); end
  def self.decline(*args, **, &block); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  def test_helpers; end
  extend Gem::Deprecate
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::Authorization::TestHelpers < Stripe::APIResourceTestHelpers
  def capture(params = nil, opts = nil); end
  def expire(params = nil, opts = nil); end
  def finalize_amount(params = nil, opts = nil); end
  def increment(params = nil, opts = nil); end
  def reverse(params = nil, opts = nil); end
  def self.capture(authorization, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.expire(authorization, params = nil, opts = nil); end
  def self.finalize_amount(authorization, params = nil, opts = nil); end
  def self.increment(authorization, params = nil, opts = nil); end
  def self.resource_class; end
  def self.reverse(authorization, params = nil, opts = nil); end
end
class Stripe::Issuing::Card < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  def test_helpers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::Card::TestHelpers < Stripe::APIResourceTestHelpers
  def deliver_card(params = nil, opts = nil); end
  def fail_card(params = nil, opts = nil); end
  def return_card(params = nil, opts = nil); end
  def self.deliver_card(card, params = nil, opts = nil); end
  def self.fail_card(card, params = nil, opts = nil); end
  def self.resource_class; end
  def self.return_card(card, params = nil, opts = nil); end
  def self.ship_card(card, params = nil, opts = nil); end
  def ship_card(params = nil, opts = nil); end
end
class Stripe::Issuing::Cardholder < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::Dispute < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.submit(dispute, params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def submit(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::PersonalizationDesign < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  def test_helpers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::PersonalizationDesign::TestHelpers < Stripe::APIResourceTestHelpers
  def activate(params = nil, opts = nil); end
  def deactivate(params = nil, opts = nil); end
  def reject(params = nil, opts = nil); end
  def self.activate(personalization_design, params = nil, opts = nil); end
  def self.deactivate(personalization_design, params = nil, opts = nil); end
  def self.reject(personalization_design, params = nil, opts = nil); end
  def self.resource_class; end
end
class Stripe::Issuing::PhysicalBundle < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::Issuing::Token < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::Transaction < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  def test_helpers; end
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Issuing::Transaction::TestHelpers < Stripe::APIResourceTestHelpers
  def refund(params = nil, opts = nil); end
  def self.create_force_capture(params = nil, opts = nil); end
  def self.create_unlinked_refund(params = nil, opts = nil); end
  def self.refund(transaction, params = nil, opts = nil); end
  def self.resource_class; end
end
class Stripe::LineItem < Stripe::APIResource
  def self.object_name; end
end
class Stripe::LoginLink < Stripe::APIResource
  def self.object_name; end
  def self.retrieve(_id, _opts = nil); end
end
class Stripe::Mandate < Stripe::APIResource
  def self.object_name; end
end
class Stripe::PaymentIntent < Stripe::APIResource
  def apply_customer_balance(params = nil, opts = nil); end
  def cancel(params = nil, opts = nil); end
  def capture(params = nil, opts = nil); end
  def confirm(params = nil, opts = nil); end
  def increment_authorization(params = nil, opts = nil); end
  def self.apply_customer_balance(intent, params = nil, opts = nil); end
  def self.cancel(intent, params = nil, opts = nil); end
  def self.capture(intent, params = nil, opts = nil); end
  def self.confirm(intent, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.increment_authorization(intent, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.search(params = nil, opts = nil); end
  def self.search_auto_paging_each(params = nil, opts = nil, &blk); end
  def self.update(id, params = nil, opts = nil); end
  def self.verify_microdeposits(intent, params = nil, opts = nil); end
  def verify_microdeposits(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  extend Stripe::APIOperations::Search
  include Stripe::APIOperations::Save
end
class Stripe::PaymentLink < Stripe::APIResource
  def list_line_items(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_line_items(payment_link, params = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::PaymentMethod < Stripe::APIResource
  def attach(params = nil, opts = nil); end
  def detach(params = nil, opts = nil); end
  def self.attach(payment_method, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.detach(payment_method, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::PaymentMethodConfiguration < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::PaymentMethodDomain < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  def self.validate(payment_method_domain, params = nil, opts = nil); end
  def validate(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Payout < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def reverse(params = nil, opts = nil); end
  def self.cancel(payout, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.reverse(payout, params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Person < Stripe::APIResource
  def resource_url; end
  def self.object_name; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Plan < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Price < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.search(params = nil, opts = nil); end
  def self.search_auto_paging_each(params = nil, opts = nil, &blk); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  extend Stripe::APIOperations::Search
  include Stripe::APIOperations::Save
end
class Stripe::Product < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.create_feature(id, params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.delete_feature(id, nested_id, params = nil, opts = nil); end
  def self.features_url(id, nested_id = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_features(id, params = nil, opts = nil); end
  def self.object_name; end
  def self.retrieve_feature(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.search(params = nil, opts = nil); end
  def self.search_auto_paging_each(params = nil, opts = nil, &blk); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  extend Stripe::APIOperations::Search
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::ProductFeature < Stripe::APIResource
  def self.object_name; end
end
class Stripe::PromotionCode < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Quote < Stripe::APIResource
  def accept(params = nil, opts = nil); end
  def cancel(params = nil, opts = nil); end
  def finalize_quote(params = nil, opts = nil); end
  def list_computed_upfront_line_items(params = nil, opts = nil); end
  def list_line_items(params = nil, opts = nil); end
  def pdf(params = nil, opts = nil, &read_body_chunk_block); end
  def self.accept(quote, params = nil, opts = nil); end
  def self.cancel(quote, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.finalize_quote(quote, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_computed_upfront_line_items(quote, params = nil, opts = nil); end
  def self.list_line_items(quote, params = nil, opts = nil); end
  def self.object_name; end
  def self.pdf(quote, params = nil, opts = nil, &read_body_chunk_block); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Radar
end
class Stripe::Radar::EarlyFraudWarning < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::Radar::ValueList < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Radar::ValueListItem < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  include Stripe::APIOperations::Delete
end
class Stripe::Refund < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def self.cancel(refund, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  def test_helpers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Refund::TestHelpers < Stripe::APIResourceTestHelpers
  def expire(params = nil, opts = nil); end
  def self.expire(refund, params = nil, opts = nil); end
  def self.resource_class; end
end
module Stripe::Reporting
end
class Stripe::Reporting::ReportRun < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Reporting::ReportType < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::Reversal < Stripe::APIResource
  def resource_url; end
  def self.object_name; end
  def self.retrieve(_id, _opts = nil); end
  def self.update(_id, _params = nil, _opts = nil); end
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Review < Stripe::APIResource
  def approve(params = nil, opts = nil); end
  def self.approve(review, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::SetupAttempt < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::SetupIntent < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def confirm(params = nil, opts = nil); end
  def self.cancel(intent, params = nil, opts = nil); end
  def self.confirm(intent, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  def self.verify_microdeposits(intent, params = nil, opts = nil); end
  def verify_microdeposits(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::ShippingRate < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Sigma
end
class Stripe::Sigma::ScheduledQueryRun < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::Source < Stripe::APIResource
  def _deprecated_source_transactions(params = nil, opts = nil); end
  def detach(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list_source_transactions(id, params = nil, opts = nil); end
  def self.object_name; end
  def self.retrieve_source_transaction(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.source_transactions_url(id, nested_id = nil); end
  def self.update(id, params = nil, opts = nil); end
  def self.verify(source, params = nil, opts = nil); end
  def source_transactions(*args, **, &block); end
  def verify(params = nil, opts = nil); end
  extend Gem::Deprecate
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::SourceTransaction < Stripe::StripeObject
  def self.object_name; end
end
class Stripe::Subscription < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def delete_discount(params = nil, opts = nil); end
  def resume(params = nil, opts = nil); end
  def self.cancel(subscription_exposed_id, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete_discount(subscription_exposed_id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.resume(subscription, params = nil, opts = nil); end
  def self.search(params = nil, opts = nil); end
  def self.search_auto_paging_each(params = nil, opts = nil, &blk); end
  def self.update(id, params = nil, opts = nil); end
  def source=(value); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  extend Stripe::APIOperations::Search
  include Stripe::APIOperations::Save
end
class Stripe::SubscriptionItem < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.create_usage_record(id, params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_usage_record_summaries(id, params = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  def self.usage_record_summarys_url(id, nested_id = nil); end
  def self.usage_records_url(id, nested_id = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::SubscriptionSchedule < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def release(params = nil, opts = nil); end
  def self.cancel(schedule, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.release(schedule, params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Tax
end
class Stripe::Tax::Calculation < Stripe::APIResource
  def list_line_items(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list_line_items(calculation, params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::Tax::CalculationLineItem < Stripe::APIResource
  def self.object_name; end
end
class Stripe::Tax::Registration < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Tax::Settings < Stripe::SingletonAPIResource
  def self.object_name; end
  extend Stripe::APIOperations::SingletonSave::ClassMethods
  include Stripe::APIOperations::SingletonSave
end
class Stripe::Tax::Transaction < Stripe::APIResource
  def list_line_items(params = nil, opts = nil); end
  def self.create_from_calculation(params = nil, opts = nil); end
  def self.create_reversal(params = nil, opts = nil); end
  def self.list_line_items(transaction, params = nil, opts = nil); end
  def self.object_name; end
end
class Stripe::Tax::TransactionLineItem < Stripe::APIResource
  def self.object_name; end
end
class Stripe::TaxCode < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::TaxId < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  include Stripe::APIOperations::Delete
end
class Stripe::TaxRate < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Terminal
end
class Stripe::Terminal::Configuration < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Terminal::ConnectionToken < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::Terminal::Location < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Terminal::Reader < Stripe::APIResource
  def cancel_action(params = nil, opts = nil); end
  def delete(params = nil, opts = nil); end
  def process_payment_intent(params = nil, opts = nil); end
  def process_setup_intent(params = nil, opts = nil); end
  def refund_payment(params = nil, opts = nil); end
  def self.cancel_action(reader, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.process_payment_intent(reader, params = nil, opts = nil); end
  def self.process_setup_intent(reader, params = nil, opts = nil); end
  def self.refund_payment(reader, params = nil, opts = nil); end
  def self.set_reader_display(reader, params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def set_reader_display(params = nil, opts = nil); end
  def test_helpers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
class Stripe::Terminal::Reader::TestHelpers < Stripe::APIResourceTestHelpers
  def present_payment_method(params = nil, opts = nil); end
  def self.present_payment_method(reader, params = nil, opts = nil); end
  def self.resource_class; end
end
module Stripe::TestHelpers
end
class Stripe::TestHelpers::TestClock < Stripe::APIResource
  def advance(params = nil, opts = nil); end
  def delete(params = nil, opts = nil); end
  def self.advance(test_clock, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  include Stripe::APIOperations::Delete
end
class Stripe::Token < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
end
class Stripe::Topup < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def self.cancel(topup, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Transfer < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.create_reversal(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.list_reversals(id, params = nil, opts = nil); end
  def self.object_name; end
  def self.retrieve_reversal(id, nested_id, params_or_opts = nil, definitely_opts = nil); end
  def self.reversals_url(id, nested_id = nil); end
  def self.update(id, params = nil, opts = nil); end
  def self.update_reversal(id, nested_id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::NestedResource
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
module Stripe::Treasury
end
class Stripe::Treasury::CreditReversal < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Treasury::DebitReversal < Stripe::APIResource
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Treasury::FinancialAccount < Stripe::APIResource
  def retrieve_features(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.retrieve_features(financial_account, params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def self.update_features(financial_account, params = nil, opts = nil); end
  def update_features(params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Save
end
class Stripe::Treasury::FinancialAccountFeatures < Stripe::APIResource
  def self.object_name; end
end
class Stripe::Treasury::InboundTransfer < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def self.cancel(inbound_transfer, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def test_helpers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Treasury::InboundTransfer::TestHelpers < Stripe::APIResourceTestHelpers
  def fail(params = nil, opts = nil); end
  def return_inbound_transfer(params = nil, opts = nil); end
  def self.fail(id, params = nil, opts = nil); end
  def self.resource_class; end
  def self.return_inbound_transfer(id, params = nil, opts = nil); end
  def self.succeed(id, params = nil, opts = nil); end
  def succeed(params = nil, opts = nil); end
end
class Stripe::Treasury::OutboundPayment < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def self.cancel(id, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def test_helpers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Treasury::OutboundPayment::TestHelpers < Stripe::APIResourceTestHelpers
  def fail(params = nil, opts = nil); end
  def post(params = nil, opts = nil); end
  def return_outbound_payment(params = nil, opts = nil); end
  def self.fail(id, params = nil, opts = nil); end
  def self.post(id, params = nil, opts = nil); end
  def self.resource_class; end
  def self.return_outbound_payment(id, params = nil, opts = nil); end
  def self.update(id, params = nil, opts = nil); end
  def update(params = nil, opts = nil); end
end
class Stripe::Treasury::OutboundTransfer < Stripe::APIResource
  def cancel(params = nil, opts = nil); end
  def self.cancel(outbound_transfer, params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def test_helpers; end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::List
end
class Stripe::Treasury::OutboundTransfer::TestHelpers < Stripe::APIResourceTestHelpers
  def fail(params = nil, opts = nil); end
  def post(params = nil, opts = nil); end
  def return_outbound_transfer(params = nil, opts = nil); end
  def self.fail(outbound_transfer, params = nil, opts = nil); end
  def self.post(outbound_transfer, params = nil, opts = nil); end
  def self.resource_class; end
  def self.return_outbound_transfer(outbound_transfer, params = nil, opts = nil); end
  def self.update(outbound_transfer, params = nil, opts = nil); end
  def update(params = nil, opts = nil); end
end
class Stripe::Treasury::ReceivedCredit < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def test_helpers; end
  extend Stripe::APIOperations::List
end
class Stripe::Treasury::ReceivedCredit::TestHelpers < Stripe::APIResourceTestHelpers
  def self.create(params = nil, opts = nil); end
  def self.resource_class; end
end
class Stripe::Treasury::ReceivedDebit < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def test_helpers; end
  extend Stripe::APIOperations::List
end
class Stripe::Treasury::ReceivedDebit::TestHelpers < Stripe::APIResourceTestHelpers
  def self.create(params = nil, opts = nil); end
  def self.resource_class; end
end
class Stripe::Treasury::Transaction < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  extend Stripe::APIOperations::List
end
class Stripe::Treasury::TransactionEntry < Stripe::APIResource
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.resource_url; end
  extend Stripe::APIOperations::List
end
class Stripe::UsageRecord < Stripe::APIResource
  def self.object_name; end
end
class Stripe::UsageRecordSummary < Stripe::StripeObject
  def self.object_name; end
end
class Stripe::WebhookEndpoint < Stripe::APIResource
  def delete(params = nil, opts = nil); end
  def self.create(params = nil, opts = nil); end
  def self.delete(id, params = nil, opts = nil); end
  def self.list(filters = nil, opts = nil); end
  def self.object_name; end
  def self.update(id, params = nil, opts = nil); end
  extend Stripe::APIOperations::Create
  extend Stripe::APIOperations::Delete::ClassMethods
  extend Stripe::APIOperations::List
  extend Stripe::APIOperations::Save::ClassMethods
  include Stripe::APIOperations::Delete
  include Stripe::APIOperations::Save
end
module Stripe::OAuth::OAuthOperations
  def self.execute_resource_request(method, url, params, opts); end
  extend Stripe::APIOperations::Request::ClassMethods
end
class Stripe::RawRequest
  def execute(method, url, params = nil, opts = nil, usage = nil); end
  def initialize; end
  extend Stripe::APIOperations::Request::ClassMethods
  include Stripe::APIOperations::Request
end
