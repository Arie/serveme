# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `stripe` gem.
# Please instead update this file by running `bin/tapioca gem stripe`.


# source://stripe//lib/stripe/api_version.rb#4
module Stripe
  class << self
    def api_base(*args, **_arg1, &block); end
    def api_base=(*args, **_arg1, &block); end
    def api_key(*args, **_arg1, &block); end
    def api_key=(*args, **_arg1, &block); end
    def api_version(*args, **_arg1, &block); end
    def api_version=(*args, **_arg1, &block); end

    # Gets the application for a plugin that's identified some. See
    # #set_app_info.
    #
    # source://stripe//lib/stripe.rb#136
    def app_info; end

    # source://stripe//lib/stripe.rb#140
    def app_info=(info); end

    def ca_bundle_path(*args, **_arg1, &block); end
    def ca_bundle_path=(*args, **_arg1, &block); end
    def ca_store(*args, **_arg1, &block); end
    def client_id(*args, **_arg1, &block); end
    def client_id=(*args, **_arg1, &block); end

    # Returns the value of attribute config.
    #
    # source://stripe//lib/stripe.rb#106
    def config; end

    def connect_base(*args, **_arg1, &block); end
    def connect_base=(*args, **_arg1, &block); end
    def enable_telemetry=(*args, **_arg1, &block); end
    def enable_telemetry?(*args, **_arg1, &block); end
    def initial_network_retry_delay(*args, **_arg1, &block); end
    def log_level(*args, **_arg1, &block); end
    def log_level=(*args, **_arg1, &block); end
    def logger(*args, **_arg1, &block); end
    def logger=(*args, **_arg1, &block); end
    def max_network_retries(*args, **_arg1, &block); end
    def max_network_retries=(*args, **_arg1, &block); end
    def max_network_retry_delay(*args, **_arg1, &block); end
    def meter_events_base(*args, **_arg1, &block); end
    def meter_events_base=(*args, **_arg1, &block); end
    def open_timeout(*args, **_arg1, &block); end
    def open_timeout=(*args, **_arg1, &block); end
    def proxy(*args, **_arg1, &block); end
    def proxy=(*args, **_arg1, &block); end
    def read_timeout(*args, **_arg1, &block); end
    def read_timeout=(*args, **_arg1, &block); end

    # Sets some basic information about the running application that's sent along
    # with API requests. Useful for plugin authors to identify their plugin when
    # communicating with Stripe.
    #
    # Takes a name and optional partner program ID, plugin URL, and version.
    #
    # source://stripe//lib/stripe.rb#149
    def set_app_info(name, partner_id: T.unsafe(nil), url: T.unsafe(nil), version: T.unsafe(nil)); end

    def stripe_account(*args, **_arg1, &block); end
    def stripe_account=(*args, **_arg1, &block); end
    def uploads_base(*args, **_arg1, &block); end
    def uploads_base=(*args, **_arg1, &block); end
    def verify_ssl_certs(*args, **_arg1, &block); end
    def verify_ssl_certs=(*args, **_arg1, &block); end
    def write_timeout(*args, **_arg1, &block); end
    def write_timeout=(*args, **_arg1, &block); end
  end
end

# APIConnectionError is raised in the event that the SDK can't connect to
# Stripe's servers. That can be for a variety of different reasons from a
# downed network to a bad TLS certificate.
#
# source://stripe//lib/stripe/errors.rb#56
class Stripe::APIConnectionError < ::Stripe::StripeError; end

# APIError is a generic error that may be raised in cases where none of the
# other named errors cover the problem. It could also be raised in the case
# that a new error has been introduced in the API, but this version of the
# Ruby SDK doesn't know how to handle it.
#
# source://stripe//lib/stripe/errors.rb#63
class Stripe::APIError < ::Stripe::StripeError; end

# source://stripe//lib/stripe/api_operations/create.rb#4
module Stripe::APIOperations; end

# source://stripe//lib/stripe/api_operations/create.rb#5
module Stripe::APIOperations::Create
  # source://stripe//lib/stripe/api_operations/create.rb#6
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/api_operations/delete.rb#5
module Stripe::APIOperations::Delete
  mixes_in_class_methods ::Stripe::APIOperations::Delete::ClassMethods

  # source://stripe//lib/stripe/api_operations/delete.rb#30
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://stripe//lib/stripe/api_operations/delete.rb#39
    def included(base); end
  end
end

# source://stripe//lib/stripe/api_operations/delete.rb#6
module Stripe::APIOperations::Delete::ClassMethods
  # Deletes an API resource
  #
  # Deletes the identified resource with the passed in parameters.
  #
  # ==== Attributes
  #
  # * +id+ - ID of the resource to delete.
  # * +params+ - A hash of parameters to pass to the API
  # * +opts+ - A Hash of additional options (separate from the params /
  #   object values) to be added to the request. E.g. to allow for an
  #   idempotency_key to be passed in the request headers, or for the
  #   api_key to be overwritten. See
  #   {APIOperations::Request.execute_resource_request}.
  #
  # source://stripe//lib/stripe/api_operations/delete.rb#20
  def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/api_operations/list.rb#5
module Stripe::APIOperations::List
  # source://stripe//lib/stripe/api_operations/list.rb#6
  def list(filters = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Adds methods to help manipulate a subresource from its parent resource so
# that it's possible to do so from a static context (i.e. without a
# pre-existing collection of subresources on the parent).
#
# For example, a transfer gains the static methods for reversals so that the
# methods `.create_reversal`, `.retrieve_reversal`, `.update_reversal`,
# etc. all become available.
#
# source://stripe//lib/stripe/api_operations/nested_resource.rb#12
module Stripe::APIOperations::NestedResource
  # @raise [ArgumentError]
  #
  # source://stripe//lib/stripe/api_operations/nested_resource.rb#13
  def nested_resource_class_methods(resource, path: T.unsafe(nil), operations: T.unsafe(nil), resource_plural: T.unsafe(nil)); end

  private

  # source://stripe//lib/stripe/api_operations/nested_resource.rb#38
  def define_operation(resource, operation, resource_url_method, resource_plural); end
end

# source://stripe//lib/stripe/api_operations/request.rb#5
module Stripe::APIOperations::Request
  mixes_in_class_methods ::Stripe::APIOperations::Request::ClassMethods

  protected

  # source://stripe//lib/stripe/api_operations/request.rb#73
  def execute_resource_request(method, url, base_address = T.unsafe(nil), params = T.unsafe(nil), opts = T.unsafe(nil), usage = T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_operations/request.rb#79
  def execute_resource_request_stream(method, url, base_address = T.unsafe(nil), params = T.unsafe(nil), opts = T.unsafe(nil), usage = T.unsafe(nil), &read_body_chunk_block); end

  private

  # source://stripe//lib/stripe/api_operations/request.rb#88
  def request_stripe_object(method:, path:, params:, base_address: T.unsafe(nil), opts: T.unsafe(nil), usage: T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://stripe//lib/stripe/api_operations/request.rb#69
    def included(base); end
  end
end

# source://stripe//lib/stripe/api_operations/request.rb#6
module Stripe::APIOperations::Request::ClassMethods
  # source://stripe//lib/stripe/api_operations/request.rb#7
  def execute_resource_request(method, url, base_address = T.unsafe(nil), params = T.unsafe(nil), opts = T.unsafe(nil), usage = T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_operations/request.rb#14
  def execute_resource_request_stream(method, url, base_address = T.unsafe(nil), params = T.unsafe(nil), opts = T.unsafe(nil), usage = T.unsafe(nil), &read_body_chunk_block); end

  private

  # @raise [ArgumentError]
  #
  # source://stripe//lib/stripe/api_operations/request.rb#54
  def error_on_invalid_params(params); end

  # source://stripe//lib/stripe/api_operations/request.rb#33
  def execute_resource_request_internal(client_request_method_sym, method, url, base_address, params, opts, usage, &read_body_chunk_block); end

  # source://stripe//lib/stripe/api_operations/request.rb#29
  def request_stripe_object(method:, path:, base_address: T.unsafe(nil), params: T.unsafe(nil), opts: T.unsafe(nil), usage: T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_operations/request.rb#62
  def warn_on_opts_in_params(params); end
end

# source://stripe//lib/stripe/api_operations/save.rb#5
module Stripe::APIOperations::Save
  extend ::Gem::Deprecate

  mixes_in_class_methods ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/api_operations/save.rb#54
  def _deprecated_save(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # The `save` method is DEPRECATED and will be removed in a future major
  # version of the library. Use the `update` method on the resource instead.
  #
  # Creates or updates an API resource.
  #
  # If the resource doesn't yet have an assigned ID and the resource is one
  # that can be created, then the method attempts to create the resource.
  # The resource is updated otherwise.
  #
  # ==== Attributes
  #
  # * +params+ - Overrides any parameters in the resource's serialized data
  #   and includes them in the create or update. If +:req_url:+ is included
  #   in the list, it overrides the update URL used for the create or
  #   update.
  # * +opts+ - A Hash of additional options (separate from the params /
  #   object values) to be added to the request. E.g. to allow for an
  #   idempotency_key to be passed in the request headers, or for the
  #   api_key to be overwritten. See
  #   {APIOperations::Request.execute_resource_request}.
  def save(*args, **_arg1, &block); end

  private

  # source://stripe//lib/stripe/api_operations/save.rb#91
  def save_url; end

  class << self
    # @private
    #
    # source://stripe//lib/stripe/api_operations/save.rb#78
    def included(base); end
  end
end

# source://stripe//lib/stripe/api_operations/save.rb#6
module Stripe::APIOperations::Save::ClassMethods
  # Updates an API resource
  #
  # Updates the identified resource with the passed in parameters.
  #
  # ==== Attributes
  #
  # * +id+ - ID of the resource to update.
  # * +params+ - A hash of parameters to pass to the API
  # * +opts+ - A Hash of additional options (separate from the params /
  #   object values) to be added to the request. E.g. to allow for an
  #   idempotency_key to be passed in the request headers, or for the
  #   api_key to be overwritten. See
  #   {APIOperations::Request.execute_resource_request}.
  #
  # source://stripe//lib/stripe/api_operations/save.rb#20
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# The _search method via API Operations is deprecated.
# Please use the search method from within the resource instead.
#
# source://stripe//lib/stripe/api_operations/search.rb#7
module Stripe::APIOperations::Search
  extend ::Gem::Deprecate

  # source://stripe//lib/stripe/api_operations/search.rb#8
  def _deprecated__search(search_url, filters = T.unsafe(nil), opts = T.unsafe(nil)); end

  def _search(*args, **_arg1, &block); end
end

# source://stripe//lib/stripe/api_operations/singleton_save.rb#5
module Stripe::APIOperations::SingletonSave
  extend ::Gem::Deprecate

  mixes_in_class_methods ::Stripe::APIOperations::SingletonSave::ClassMethods

  # source://stripe//lib/stripe/api_operations/singleton_save.rb#53
  def _deprecated_save(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # The `save` method is DEPRECATED and will be removed in a future major
  # version of the library. Use the `update` method on the resource instead.
  #
  # Updates a singleton API resource.
  #
  # If the resource doesn't yet have an assigned ID and the resource is one
  # that can be created, then the method attempts to create the resource.
  # The resource is updated otherwise.
  #
  # ==== Attributes
  #
  # * +params+ - Overrides any parameters in the resource's serialized data
  #   and includes them in the create or update. If +:req_url:+ is included
  #   in the list, it overrides the update URL used for the create or
  #   update.
  # * +opts+ - A Hash of additional options (separate from the params /
  #   object values) to be added to the request. E.g. to allow for an
  #   idempotency_key to be passed in the request headers, or for the
  #   api_key to be overwritten. See
  #   {APIOperations::Request.execute_resource_request}.
  def save(*args, **_arg1, &block); end

  class << self
    # @private
    #
    # source://stripe//lib/stripe/api_operations/singleton_save.rb#75
    def included(base); end
  end
end

# source://stripe//lib/stripe/api_operations/singleton_save.rb#6
module Stripe::APIOperations::SingletonSave::ClassMethods
  # Updates a singleton API resource
  #
  # Updates the identified resource with the passed in parameters.
  #
  # ==== Attributes
  #
  # * +params+ - A hash of parameters to pass to the API
  # * +opts+ - A Hash of additional options (separate from the params /
  #   object values) to be added to the request. E.g. to allow for an
  #   idempotency_key to be passed in the request headers, or for the
  #   api_key to be overwritten. See
  #   {APIOperations::Request.execute_resource_request}.
  #
  # source://stripe//lib/stripe/api_operations/singleton_save.rb#19
  def update(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# APIRequestor executes requests against the Stripe API and allows a user to
# recover both a resource a call returns as well as a response object that
# contains information on the HTTP call.
#
# source://stripe//lib/stripe/api_requestor.rb#9
class Stripe::APIRequestor
  extend ::Gem::Deprecate

  # Initializes a new APIRequestor
  #
  # @return [APIRequestor] a new instance of APIRequestor
  #
  # source://stripe//lib/stripe/api_requestor.rb#17
  def initialize(config_arg = T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_requestor.rb#175
  def _deprecated_request; end

  # Returns the value of attribute config.
  #
  # source://stripe//lib/stripe/api_requestor.rb#35
  def config; end

  # source://stripe//lib/stripe/api_requestor.rb#197
  def execute_request(method, path, base_address, params: T.unsafe(nil), opts: T.unsafe(nil), usage: T.unsafe(nil)); end

  # Execute request without instantiating a new object if the relevant object's name matches the class
  #
  # For internal use only. Does not provide a stable API and may be broken
  # with future non-major changes.
  #
  # source://stripe//lib/stripe/api_requestor.rb#220
  def execute_request_initialize_from(method, path, base_address, object, params: T.unsafe(nil), opts: T.unsafe(nil), usage: T.unsafe(nil)); end

  # Executes a request and returns the body as a stream instead of converting
  # it to a StripeObject. This should be used for any request where we expect
  # an arbitrary binary response.
  #
  # A `read_body_chunk` block can be passed, which will be called repeatedly
  # with the body chunks read from the socket.
  #
  # If a block is passed, a StripeHeadersOnlyResponse is returned as the
  # block is expected to do all the necessary body processing. If no block is
  # passed, then a StripeStreamResponse is returned containing an IO stream
  # with the response body.
  #
  # source://stripe//lib/stripe/api_requestor.rb#264
  def execute_request_stream(method, path, base_address, params: T.unsafe(nil), opts: T.unsafe(nil), usage: T.unsafe(nil), &read_body_chunk_block); end

  # source://stripe//lib/stripe/api_requestor.rb#247
  def interpret_response(http_resp); end

  # @return [Boolean]
  #
  # source://stripe//lib/stripe/api_requestor.rb#291
  def last_response_has_key?(object_id); end

  # Returns the value of attribute options.
  #
  # source://stripe//lib/stripe/api_requestor.rb#35
  def options; end

  # Executes the API call within the given block. Usage looks like:
  #
  #     client = APIRequestor.new
  #     charge, resp = client.request { Charge.create }
  def request(*args, **_arg1, &block); end

  # source://stripe//lib/stripe/api_requestor.rb#285
  def store_last_response(object_id, resp); end

  private

  # source://stripe//lib/stripe/api_requestor.rb#533
  def api_url(url, base_url); end

  # @raise [AuthenticationError]
  #
  # source://stripe//lib/stripe/api_requestor.rb#537
  def check_api_key!(api_key); end

  # Encodes a set of body parameters using multipart if `Content-Type` is set
  # for that, or standard form-encoding otherwise. Returns the encoded body
  # and a version of the encoded body that's safe to be logged.
  #
  # source://stripe//lib/stripe/api_requestor.rb#557
  def encode_body(body_params, headers, api_mode); end

  # @raise [ArgumentError]
  #
  # source://stripe//lib/stripe/api_requestor.rb#452
  def execute_request_internal(method, path, base_address, params, opts, usage, &read_body_chunk_block); end

  # source://stripe//lib/stripe/api_requestor.rb#598
  def execute_request_with_rescues(base_url, headers, api_mode, usage, context); end

  # Formats a plugin "app info" hash into a string that we can tack onto the
  # end of a User-Agent string where it'll be fairly prominent in places like
  # the Dashboard. Note that this formatting has been implemented to match
  # other libraries, and shouldn't be changed without universal consensus.
  #
  # source://stripe//lib/stripe/api_requestor.rb#724
  def format_app_info(info); end

  # source://stripe//lib/stripe/api_requestor.rb#714
  def general_api_error(status, body); end

  # source://stripe//lib/stripe/api_requestor.rb#731
  def handle_error_response(http_resp, context, api_mode); end

  # @raise [APIConnectionError]
  #
  # source://stripe//lib/stripe/api_requestor.rb#894
  def handle_network_error(error, context, num_retries, base_url); end

  # source://stripe//lib/stripe/api_requestor.rb#966
  def log_request(context, num_retries); end

  # source://stripe//lib/stripe/api_requestor.rb#985
  def log_response(context, request_start, status, body, resp); end

  # source://stripe//lib/stripe/api_requestor.rb#1016
  def log_response_error(context, request_start, error); end

  # Works around an edge case where we end up with both query parameters from
  # parameteers and query parameters that were appended onto the end of the
  # given path.
  #
  # Decode any parameters that were added onto the end of a path and add them
  # to a unified query parameter hash so that all parameters end up in one
  # place and all of them are correctly included in the final request.
  #
  # source://stripe//lib/stripe/api_requestor.rb#760
  def merge_query_params(query_params, path); end

  # source://stripe//lib/stripe/api_requestor.rb#671
  def notify_request_begin(context); end

  # source://stripe//lib/stripe/api_requestor.rb#686
  def notify_request_end(context, duration, http_status, num_retries, user_data, resp, headers); end

  # source://stripe//lib/stripe/api_requestor.rb#919
  def request_headers(method, api_mode, req_opts); end

  # source://stripe//lib/stripe/api_requestor.rb#594
  def should_handle_as_error(http_status); end

  # source://stripe//lib/stripe/api_requestor.rb#775
  def specific_api_error(resp, error_data, context); end

  # Attempts to look at a response's error code and return an OAuth error if
  # one matches. Will return `nil` if the code isn't recognized.
  #
  # source://stripe//lib/stripe/api_requestor.rb#858
  def specific_oauth_error(resp, error_code, context); end

  # source://stripe//lib/stripe/api_requestor.rb#823
  def specific_v2_api_error(resp, error_data, context); end

  class << self
    # Gets a currently active `APIRequestor`. Set for the current thread when
    # `APIRequestor#request` is being run so that API operations being executed
    # inside of that block can find the currently active requestor. It's reset to
    # the original value (hopefully `nil`) after the block ends.
    #
    # For internal use only. Does not provide a stable API and may be broken
    # with future non-major changes.
    #
    # source://stripe//lib/stripe/api_requestor.rb#44
    def active_requestor; end

    # Finishes any active connections by closing their TCP connection and
    # clears them from internal tracking in all connection managers across all
    # threads.
    #
    # If passed a `config` object, only clear connection managers for that
    # particular configuration.
    #
    # For internal use only. Does not provide a stable API and may be broken
    # with future non-major changes.
    #
    # source://stripe//lib/stripe/api_requestor.rb#57
    def clear_all_connection_managers(config: T.unsafe(nil)); end

    # Access data stored for `APIRequestor` within the thread's current
    # context. Returns `ThreadContext`.
    #
    # For internal use only. Does not provide a stable API and may be broken
    # with future non-major changes.
    #
    # source://stripe//lib/stripe/api_requestor.rb#400
    def current_thread_context; end

    # A default connection manager for the current thread scoped to the
    # configuration object that may be provided.
    #
    # source://stripe//lib/stripe/api_requestor.rb#92
    def default_connection_manager(config = T.unsafe(nil)); end

    # A default requestor for the current thread.
    #
    # source://stripe//lib/stripe/api_requestor.rb#86
    def default_requestor; end

    # Garbage collects connection managers that haven't been used in some time,
    # with the idea being that we want to remove old connection managers that
    # belong to dead threads and the like.
    #
    # Prefixed with `maybe_` because garbage collection will only run
    # periodically so that we're not constantly engaged in busy work. If
    # connection managers live a little passed their useful age it's not
    # harmful, so it's not necessary to get them right away.
    #
    # For testability, returns `nil` if it didn't run and the number of
    # connection managers that were garbage collected otherwise.
    #
    # IMPORTANT: This method is not thread-safe and expects to be called inside
    # a lock on `@thread_contexts_with_connection_managers_mutex`.
    #
    # For internal use only. Does not provide a stable API and may be broken
    # with future non-major changes.
    #
    # source://stripe//lib/stripe/api_requestor.rb#421
    def maybe_gc_connection_managers; end

    # Checks if an error is a problem that we should retry on. This includes
    # both socket errors that may represent an intermittent problem and some
    # special HTTP statuses.
    #
    # @return [Boolean]
    #
    # source://stripe//lib/stripe/api_requestor.rb#108
    def should_retry?(error, num_retries:, config: T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_requestor.rb#153
    def sleep_time(num_retries, config: T.unsafe(nil)); end
  end
end

# Time (in seconds) that a connection manager has not been used before it's
# eligible for garbage collection.
#
# source://stripe//lib/stripe/api_requestor.rb#301
Stripe::APIRequestor::CONNECTION_MANAGER_GC_LAST_USED_EXPIRY = T.let(T.unsafe(nil), Integer)

# How often to check (in seconds) for connection managers that haven't been
# used in a long time and which should be garbage collected.
#
# source://stripe//lib/stripe/api_requestor.rb#305
Stripe::APIRequestor::CONNECTION_MANAGER_GC_PERIOD = T.let(T.unsafe(nil), Integer)

# source://stripe//lib/stripe/api_requestor.rb#307
Stripe::APIRequestor::ERROR_MESSAGE_CONNECTION = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/api_requestor.rb#312
Stripe::APIRequestor::ERROR_MESSAGE_SSL = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/api_requestor.rb#325
Stripe::APIRequestor::ERROR_MESSAGE_TIMEOUT_CONNECT = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/api_requestor.rb#330
Stripe::APIRequestor::ERROR_MESSAGE_TIMEOUT_READ = T.let(T.unsafe(nil), String)

# Common error suffix sared by both connect and read timeout messages.
#
# source://stripe//lib/stripe/api_requestor.rb#319
Stripe::APIRequestor::ERROR_MESSAGE_TIMEOUT_SUFFIX = T.let(T.unsafe(nil), String)

# Maps types of exceptions that we're likely to see during a network
# request to more user-friendly messages that we put in front of people.
# The original error message is also appended onto the final exception for
# full transparency.
#
# source://stripe//lib/stripe/api_requestor.rb#339
Stripe::APIRequestor::NETWORK_ERROR_MESSAGES_MAP = T.let(T.unsafe(nil), Hash)

# RequestLogContext stores information about a request that's begin made so
# that we can log certain information. It's useful because it means that we
# don't have to pass around as many parameters.
#
# source://stripe//lib/stripe/api_requestor.rb#1030
class Stripe::APIRequestor::RequestLogContext
  # Returns the value of attribute account.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def account; end

  # Sets the attribute account
  #
  # @param value the value to set the attribute account to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def account=(_arg0); end

  # Returns the value of attribute api_key.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def api_key; end

  # Sets the attribute api_key
  #
  # @param value the value to set the attribute api_key to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def api_key=(_arg0); end

  # Returns the value of attribute api_version.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def api_version; end

  # Sets the attribute api_version
  #
  # @param value the value to set the attribute api_version to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def api_version=(_arg0); end

  # Returns the value of attribute body.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def body; end

  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def body=(_arg0); end

  # The idea with this method is that we might want to update some of
  # context information because a response that we've received from the API
  # contains information that's more authoritative than what we started
  # with for a request. For example, we should trust whatever came back in
  # a `Stripe-Version` header beyond what configuration information that we
  # might have had available.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1039
  def dup_from_response_headers(headers); end

  # Returns the value of attribute idempotency_key.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def idempotency_key; end

  # Sets the attribute idempotency_key
  #
  # @param value the value to set the attribute idempotency_key to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def idempotency_key=(_arg0); end

  # Returns the value of attribute method.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def method; end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def method=(_arg0); end

  # Returns the value of attribute path.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def path=(_arg0); end

  # Returns the value of attribute query.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def query; end

  # Sets the attribute query
  #
  # @param value the value to set the attribute query to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def query=(_arg0); end

  # Returns the value of attribute request_id.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def request_id; end

  # Sets the attribute request_id
  #
  # @param value the value to set the attribute request_id to.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1031
  def request_id=(_arg0); end
end

# StripeRequestMetrics tracks metadata to be reported to stripe for metrics
# collection
#
# source://stripe//lib/stripe/api_requestor.rb#1108
class Stripe::APIRequestor::StripeRequestMetrics
  # @return [StripeRequestMetrics] a new instance of StripeRequestMetrics
  #
  # source://stripe//lib/stripe/api_requestor.rb#1118
  def initialize(request_id, request_duration_ms, usage: T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_requestor.rb#1124
  def payload; end

  # Request duration in milliseconds
  #
  # source://stripe//lib/stripe/api_requestor.rb#1113
  def request_duration_ms; end

  # Request duration in milliseconds
  #
  # source://stripe//lib/stripe/api_requestor.rb#1113
  def request_duration_ms=(_arg0); end

  # The Stripe request ID of the response.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1110
  def request_id; end

  # The Stripe request ID of the response.
  #
  # source://stripe//lib/stripe/api_requestor.rb#1110
  def request_id=(_arg0); end

  # list of names of tracked behaviors associated with this request
  #
  # source://stripe//lib/stripe/api_requestor.rb#1116
  def usage; end

  # list of names of tracked behaviors associated with this request
  #
  # source://stripe//lib/stripe/api_requestor.rb#1116
  def usage=(_arg0); end
end

# SystemProfiler extracts information about the system that we're running
# in so that we can generate a rich user agent header to help debug
# integrations.
#
# source://stripe//lib/stripe/api_requestor.rb#1052
class Stripe::APIRequestor::SystemProfiler
  # @return [SystemProfiler] a new instance of SystemProfiler
  #
  # source://stripe//lib/stripe/api_requestor.rb#1084
  def initialize; end

  # source://stripe//lib/stripe/api_requestor.rb#1088
  def user_agent; end

  class << self
    # source://stripe//lib/stripe/api_requestor.rb#1053
    def uname; end

    # source://stripe//lib/stripe/api_requestor.rb#1068
    def uname_from_system; end

    # source://stripe//lib/stripe/api_requestor.rb#1076
    def uname_from_system_ver; end
  end
end

# A record representing any data that `APIRequestor` puts into
# `Thread.current`. Making it a class likes this gives us a little extra
# type safety and lets us document what each field does.
#
# For internal use only. Does not provide a stable API and may be broken
# with future non-major changes.
#
# source://stripe//lib/stripe/api_requestor.rb#360
class Stripe::APIRequestor::ThreadContext
  # A `APIRequestor` that's been flagged as currently active within a
  # thread by `APIRequestor#request`. A requestor stays active until the
  # completion of the request block.
  #
  # source://stripe//lib/stripe/api_requestor.rb#364
  def active_requestor; end

  # A `APIRequestor` that's been flagged as currently active within a
  # thread by `APIRequestor#request`. A requestor stays active until the
  # completion of the request block.
  #
  # source://stripe//lib/stripe/api_requestor.rb#364
  def active_requestor=(_arg0); end

  # A map of connection mangers for the thread. Normally shared between
  # all `APIRequestor` objects on a particular thread, and created so as to
  # minimize the number of open connections that an application needs.
  #
  # source://stripe//lib/stripe/api_requestor.rb#386
  def default_connection_managers; end

  # A default `APIRequestor` object for the thread. Used in all cases where
  # the user hasn't specified their own.
  #
  # source://stripe//lib/stripe/api_requestor.rb#368
  def default_requestor; end

  # A default `APIRequestor` object for the thread. Used in all cases where
  # the user hasn't specified their own.
  #
  # source://stripe//lib/stripe/api_requestor.rb#368
  def default_requestor=(_arg0); end

  # A temporary map of object IDs to responses from last executed API
  # calls. Used to return a responses from calls to `APIRequestor#request`.
  #
  # Stored in the thread data to make the use of a single `APIRequestor`
  # object safe across multiple threads. Stored as a map so that multiple
  # `APIRequestor` objects can run concurrently on the same thread.
  #
  # Responses are only left in as long as they're needed, which means
  # they're removed as soon as a call leaves `APIRequestor#request`, and
  # because that's wrapped in an `ensure` block, they should never leave
  # garbage in `Thread.current`.
  #
  # source://stripe//lib/stripe/api_requestor.rb#381
  def last_responses; end

  # A temporary map of object IDs to responses from last executed API
  # calls. Used to return a responses from calls to `APIRequestor#request`.
  #
  # Stored in the thread data to make the use of a single `APIRequestor`
  # object safe across multiple threads. Stored as a map so that multiple
  # `APIRequestor` objects can run concurrently on the same thread.
  #
  # Responses are only left in as long as they're needed, which means
  # they're removed as soon as a call leaves `APIRequestor#request`, and
  # because that's wrapped in an `ensure` block, they should never leave
  # garbage in `Thread.current`.
  #
  # source://stripe//lib/stripe/api_requestor.rb#381
  def last_responses=(_arg0); end

  # source://stripe//lib/stripe/api_requestor.rb#390
  def reset_connection_managers; end
end

# source://stripe//lib/stripe/api_resource.rb#4
class Stripe::APIResource < ::Stripe::StripeObject
  include ::Stripe::APIOperations::Request
  extend ::Stripe::APIOperations::Request::ClassMethods

  # source://stripe//lib/stripe/api_resource.rb#95
  def refresh; end

  # source://stripe//lib/stripe/api_resource.rb#122
  def request_stripe_object(method:, path:, params:, base_address: T.unsafe(nil), opts: T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_resource.rb#84
  def resource_url; end

  # A flag that can be set a behavior that will cause this resource to be
  # encoded and sent up along with an update of its parent resource. This is
  # usually not desirable because resources are updated individually on their
  # own endpoints, but there are certain cases, replacing a customer's source
  # for example, where this is allowed.
  #
  # source://stripe//lib/stripe/api_resource.rb#12
  def save_with_parent; end

  # A flag that can be set a behavior that will cause this resource to be
  # encoded and sent up along with an update of its parent resource. This is
  # usually not desirable because resources are updated individually on their
  # own endpoints, but there are certain cases, replacing a customer's source
  # for example, where this is allowed.
  #
  # source://stripe//lib/stripe/api_resource.rb#12
  def save_with_parent=(_arg0); end

  protected

  # source://stripe//lib/stripe/api_resource.rb#127
  def request_stream(method:, path:, params:, base_address: T.unsafe(nil), opts: T.unsafe(nil), &read_body_chunk_block); end

  class << self
    # source://stripe//lib/stripe/api_resource.rb#23
    def class_name; end

    # Adds a custom method to a resource class. This is used to add support for
    # non-CRUDL API requests, e.g. capturing charges. custom_method takes the
    # following parameters:
    # - name: the name of the custom method to create (as a symbol)
    # - http_verb: the HTTP verb for the API request (:get, :post, or :delete)
    # - http_path: the path to append to the resource's URL. If not provided,
    #              the name is used as the path
    #
    # For example, this call:
    #     custom_method :capture, http_verb: post
    # adds a `capture` class method to the resource class that, when called,
    # will send a POST request to `/v1/<object_name>/capture`.
    #
    # source://stripe//lib/stripe/api_resource.rb#80
    def custom_method(name, http_verb:, http_path: T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_resource.rb#19
    def object_name; end

    # source://stripe//lib/stripe/api_resource.rb#27
    def resource_url; end

    # source://stripe//lib/stripe/api_resource.rb#111
    def retrieve(id, opts = T.unsafe(nil)); end

    # A metaprogramming call that specifies that a field of a resource can be
    # its own type of API resource (say a nested card under an account for
    # example), and if that resource is set, it should be transmitted to the
    # API on a create or update. Doing so is not the default behavior because
    # API resources should normally be persisted on their own RESTful
    # endpoints.
    #
    # source://stripe//lib/stripe/api_resource.rb#50
    def save_nested_resource(name); end
  end
end

# TODO: (major) Remove OBJECT_NAME and stop using const_get here
# This is a workaround to avoid breaking users who have defined their own
# APIResource subclasses with a custom OBJECT_NAME. We should never fallback
# on this case otherwise.
#
# source://stripe//lib/stripe/api_resource.rb#18
Stripe::APIResource::OBJECT_NAME = T.let(T.unsafe(nil), String)

# The base class for nested TestHelpers classes in resource objects.
# The APIResourceTestHelpers handles URL generation and custom method
# support for test-helper methods.
#
#  class MyAPIResource < APIResource
#    class TestHelpers < APIResourceTestHelpers
#
# source://stripe//lib/stripe/api_resource_test_helpers.rb#10
class Stripe::APIResourceTestHelpers
  include ::Stripe::APIOperations::Request
  extend ::Stripe::APIOperations::Request::ClassMethods

  # @return [APIResourceTestHelpers] a new instance of APIResourceTestHelpers
  #
  # source://stripe//lib/stripe/api_resource_test_helpers.rb#13
  def initialize(resource); end

  # source://stripe//lib/stripe/api_resource_test_helpers.rb#42
  def resource_url; end

  class << self
    # Adds a custom method to a test helper. This is used to add support for
    # non-CRUDL API requests, e.g. capturing charges. custom_method takes the
    # following parameters:
    # - name: the name of the custom method to create (as a symbol)
    # - http_verb: the HTTP verb for the API request (:get, :post, or :delete)
    # - http_path: the path to append to the resource's URL. If not provided,
    #              the name is used as the path
    #
    # For example, this call:
    #     custom_method :capture, http_verb: post
    # adds a `capture` class method to the resource class that, when called,
    # will send a POST request to `/v1/<object_name>/capture`.
    #
    # source://stripe//lib/stripe/api_resource_test_helpers.rb#33
    def custom_method(name, http_verb:, http_path: T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_resource_test_helpers.rb#17
    def resource_class; end

    # source://stripe//lib/stripe/api_resource_test_helpers.rb#37
    def resource_url; end
  end
end

# This is an object representing a Stripe account. You can retrieve it to see
# properties on the account like its current requirements or if the account is
# enabled to make live charges or receive payouts.
#
# For accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)
# is `application`, which includes Custom accounts, the properties below are always
# returned.
#
# For accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)
# is `stripe`, which includes Standard and Express accounts, some properties are only returned
# until you create an [Account Link](https://stripe.com/api/account_links) or [Account Session](https://stripe.com/api/account_sessions)
# to start Connect Onboarding. Learn about the [differences between accounts](https://stripe.com/connect/accounts).
#
# source://stripe//lib/stripe/resources/account.rb#17
class Stripe::Account < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/account.rb#234
  def deauthorize(client_id = T.unsafe(nil), opts = T.unsafe(nil)); end

  # With [Connect](https://stripe.com/connect), you can delete accounts you manage.
  #
  # Test-mode accounts can be deleted at any time.
  #
  # Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://stripe.com/api/balance/balance_object) are zero.
  #
  # If you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.
  #
  # source://stripe//lib/stripe/resources/account.rb#70
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_resource.rb#51
  def external_account=(value); end

  # source://stripe//lib/stripe/resources/account.rb#223
  def legal_entity; end

  # @raise [NoMethodError]
  #
  # source://stripe//lib/stripe/resources/account.rb#227
  def legal_entity=(_legal_entity); end

  # Returns a list of people associated with the account's legal entity. The people are returned sorted by creation date, with the most recent people appearing first.
  #
  # source://stripe//lib/stripe/resources/account.rb#85
  def persons(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # With [Connect](https://stripe.com/connect), you can reject accounts that you have flagged as suspicious.
  #
  # Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.
  #
  # source://stripe//lib/stripe/resources/account.rb#107
  def reject(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/account.rb#152
  def resource_url; end

  # Somewhat unfortunately, we attempt to do a special encoding trick when
  # serializing `additional_owners` under an account: when updating a value,
  # we actually send the update parameters up as an integer-indexed hash
  # rather than an array. So instead of this:
  #
  #     field[]=item1&field[]=item2&field[]=item3
  #
  # We send this:
  #
  #     field[0]=item1&field[1]=item2&field[2]=item3
  #
  # There are two major problems with this technique:
  #
  #     * Entities are addressed by array index, which is not stable and can
  #       easily result in unexpected results between two different requests.
  #
  #     * A replacement of the array's contents is ambiguous with setting a
  #       subset of the array. Because of this, the only way to shorten an
  #       array is to unset it completely by making sure it goes into the
  #       server as an empty string, then setting its contents again.
  #
  # We're trying to get this overturned on the server side, but for now,
  # patch in a special allowance.
  #
  # source://stripe//lib/stripe/resources/account.rb#203
  def serialize_params(options = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/account.rb#207
  def serialize_params_account(_obj, update_hash, options = T.unsafe(nil)); end

  private

  # source://stripe//lib/stripe/resources/account.rb#243
  def serialize_additional_owners(legal_entity, additional_owners); end

  class << self
    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def capabilitys_url(id, nested_id = T.unsafe(nil)); end

    # With [Connect](https://stripe.com/docs/connect), you can create Stripe accounts for your users.
    # To do this, you'll first need to [register your platform](https://dashboard.stripe.com/account/applications/settings).
    #
    # If you've already collected information for your connected accounts, you [can prefill that information](https://stripe.com/docs/connect/best-practices#onboarding) when
    # creating the account. Connect Onboarding won't ask for the prefilled information during account onboarding.
    # You can prefill any information on the account.
    #
    # source://stripe//lib/stripe/resources/account.rb#43
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_external_account(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_login_link(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_person(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # With [Connect](https://stripe.com/connect), you can delete accounts you manage.
    #
    # Test-mode accounts can be deleted at any time.
    #
    # Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://stripe.com/api/balance/balance_object) are zero.
    #
    # If you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.
    #
    # source://stripe//lib/stripe/resources/account.rb#54
    def delete(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#77
    def delete_external_account(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#77
    def delete_person(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def external_accounts_url(id, nested_id = T.unsafe(nil)); end

    # Returns a list of accounts connected to your platform via [Connect](https://stripe.com/docs/connect). If you're not a platform, the list is empty.
    #
    # source://stripe//lib/stripe/resources/account.rb#80
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_capabilities(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_external_accounts(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_persons(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def login_links_url(id, nested_id = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/account.rb#25
    def object_name; end

    # Returns a list of people associated with the account's legal entity. The people are returned sorted by creation date, with the most recent people appearing first.
    #
    # source://stripe//lib/stripe/resources/account.rb#95
    def persons(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def persons_url(id, nested_id = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/account.rb#219
    def protected_fields; end

    # With [Connect](https://stripe.com/connect), you can reject accounts that you have flagged as suspicious.
    #
    # Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.
    #
    # source://stripe//lib/stripe/resources/account.rb#119
    def reject(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/account.rb#161
    def retrieve(id = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_capability(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_external_account(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_person(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates a [connected account](https://stripe.com/connect/accounts) by setting the values of the parameters passed. Any parameters not provided are
    # left unchanged.
    #
    # For accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)
    # is application, which includes Custom accounts, you can update any information on the account.
    #
    # For accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)
    # is stripe, which includes Standard and Express accounts, you can update all information until you create
    # an [Account Link or <a href="/api/account_sessions">Account Session](https://stripe.com/api/account_links) to start Connect onboarding,
    # after which some properties can no longer be updated.
    #
    # To update your own account, use the [Dashboard](https://dashboard.stripe.com/settings/account). Refer to our
    # [Connect](https://stripe.com/docs/connect/updating-accounts) documentation to learn more about updating accounts.
    #
    # source://stripe//lib/stripe/resources/account.rb#141
    def update(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#67
    def update_capability(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#67
    def update_external_account(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#67
    def update_person(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/account.rb#24
Stripe::Account::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/account_capability_service.rb#5
class Stripe::AccountCapabilityService < ::Stripe::StripeService
  # Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.
  #
  # source://stripe//lib/stripe/services/account_capability_service.rb#7
  def list(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves information about the specified Account Capability.
  #
  # source://stripe//lib/stripe/services/account_capability_service.rb#18
  def retrieve(account, capability, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing Account Capability. Request or remove a capability by updating its requested parameter.
  #
  # source://stripe//lib/stripe/services/account_capability_service.rb#29
  def update(account, capability, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/account_external_account_service.rb#5
class Stripe::AccountExternalAccountService < ::Stripe::StripeService
  # Create an external account for a given account.
  #
  # source://stripe//lib/stripe/services/account_external_account_service.rb#7
  def create(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Delete a specified external account for a given account.
  #
  # source://stripe//lib/stripe/services/account_external_account_service.rb#18
  def delete(account, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # List external accounts for an account.
  #
  # source://stripe//lib/stripe/services/account_external_account_service.rb#29
  def list(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve a specified external account for a given account.
  #
  # source://stripe//lib/stripe/services/account_external_account_service.rb#40
  def retrieve(account, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the metadata, account holder name, account holder type of a bank account belonging to
  # a connected account and optionally sets it as the default for its currency. Other bank account
  # details are not editable by design.
  #
  # You can only update bank accounts when [account.controller.requirement_collection is application, which includes <a href="/connect/custom-accounts">Custom accounts](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection).
  #
  # You can re-enable a disabled bank account by performing an update call without providing any
  # arguments or changes.
  #
  # source://stripe//lib/stripe/services/account_external_account_service.rb#58
  def update(account, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Account Links are the means by which a Connect platform grants a connected account permission to access
# Stripe-hosted applications, such as Connect Onboarding.
#
# Related guide: [Connect Onboarding](https://stripe.com/docs/connect/custom/hosted-onboarding)
#
# source://stripe//lib/stripe/resources/account_link.rb#9
class Stripe::AccountLink < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.
    #
    # source://stripe//lib/stripe/resources/account_link.rb#18
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/account_link.rb#13
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/account_link.rb#12
Stripe::AccountLink::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/account_link_service.rb#5
class Stripe::AccountLinkService < ::Stripe::StripeService
  # Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.
  #
  # source://stripe//lib/stripe/services/account_link_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/account_login_link_service.rb#5
class Stripe::AccountLoginLinkService < ::Stripe::StripeService
  # Creates a login link for a connected account to access the Express Dashboard.
  #
  # You can only create login links for accounts that use the [Express Dashboard](https://stripe.com/connect/express-dashboard) and are connected to your platform.
  #
  # source://stripe//lib/stripe/services/account_login_link_service.rb#9
  def create(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/account_person_service.rb#5
class Stripe::AccountPersonService < ::Stripe::StripeService
  # Creates a new person.
  #
  # source://stripe//lib/stripe/services/account_person_service.rb#7
  def create(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes an existing person's relationship to the account's legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the account_opener. If your integration is using the executive parameter, you cannot delete the only verified executive on file.
  #
  # source://stripe//lib/stripe/services/account_person_service.rb#18
  def delete(account, person, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of people associated with the account's legal entity. The people are returned sorted by creation date, with the most recent people appearing first.
  #
  # source://stripe//lib/stripe/services/account_person_service.rb#29
  def list(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an existing person.
  #
  # source://stripe//lib/stripe/services/account_person_service.rb#40
  def retrieve(account, person, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing person.
  #
  # source://stripe//lib/stripe/services/account_person_service.rb#51
  def update(account, person, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/account_service.rb#5
class Stripe::AccountService < ::Stripe::StripeService
  # @return [AccountService] a new instance of AccountService
  #
  # source://stripe//lib/stripe/services/account_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute capabilities.
  #
  # source://stripe//lib/stripe/services/account_service.rb#6
  def capabilities; end

  # With [Connect](https://stripe.com/docs/connect), you can create Stripe accounts for your users.
  # To do this, you'll first need to [register your platform](https://dashboard.stripe.com/account/applications/settings).
  #
  # If you've already collected information for your connected accounts, you [can prefill that information](https://stripe.com/docs/connect/best-practices#onboarding) when
  # creating the account. Connect Onboarding won't ask for the prefilled information during account onboarding.
  # You can prefill any information on the account.
  #
  # source://stripe//lib/stripe/services/account_service.rb#22
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # With [Connect](https://stripe.com/connect), you can delete accounts you manage.
  #
  # Test-mode accounts can be deleted at any time.
  #
  # Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://stripe.com/api/balance/balance_object) are zero.
  #
  # If you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.
  #
  # source://stripe//lib/stripe/services/account_service.rb#33
  def delete(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute external_accounts.
  #
  # source://stripe//lib/stripe/services/account_service.rb#6
  def external_accounts; end

  # Returns a list of accounts connected to your platform via [Connect](https://stripe.com/docs/connect). If you're not a platform, the list is empty.
  #
  # source://stripe//lib/stripe/services/account_service.rb#44
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute login_links.
  #
  # source://stripe//lib/stripe/services/account_service.rb#6
  def login_links; end

  # Returns the value of attribute persons.
  #
  # source://stripe//lib/stripe/services/account_service.rb#6
  def persons; end

  # With [Connect](https://stripe.com/connect), you can reject accounts that you have flagged as suspicious.
  #
  # Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.
  #
  # source://stripe//lib/stripe/services/account_service.rb#51
  def reject(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an account.
  #
  # source://stripe//lib/stripe/services/account_service.rb#62
  def retrieve(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an account.
  #
  # source://stripe//lib/stripe/services/account_service.rb#73
  def retrieve_current(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a [connected account](https://stripe.com/connect/accounts) by setting the values of the parameters passed. Any parameters not provided are
  # left unchanged.
  #
  # For accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)
  # is application, which includes Custom accounts, you can update any information on the account.
  #
  # For accounts where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection)
  # is stripe, which includes Standard and Express accounts, you can update all information until you create
  # an [Account Link or <a href="/api/account_sessions">Account Session](https://stripe.com/api/account_links) to start Connect onboarding,
  # after which some properties can no longer be updated.
  #
  # To update your own account, use the [Dashboard](https://dashboard.stripe.com/settings/account). Refer to our
  # [Connect](https://stripe.com/docs/connect/updating-accounts) documentation to learn more about updating accounts.
  #
  # source://stripe//lib/stripe/services/account_service.rb#90
  def update(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# An AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.
#
# We recommend that you create an AccountSession each time you need to display an embedded component
# to your user. Do not save AccountSessions to your database as they expire relatively
# quickly, and cannot be used more than once.
#
# Related guide: [Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components)
#
# source://stripe//lib/stripe/resources/account_session.rb#12
class Stripe::AccountSession < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.
    #
    # source://stripe//lib/stripe/resources/account_session.rb#21
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/account_session.rb#16
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/account_session.rb#15
Stripe::AccountSession::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/account_session_service.rb#5
class Stripe::AccountSessionService < ::Stripe::StripeService
  # Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.
  #
  # source://stripe//lib/stripe/services/account_session_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/api_version.rb#5
module Stripe::ApiVersion; end

# source://stripe//lib/stripe/api_version.rb#6
Stripe::ApiVersion::CURRENT = T.let(T.unsafe(nil), String)

# Domains registered for Apple Pay on the Web
#
# source://stripe//lib/stripe/resources/apple_pay_domain.rb#6
class Stripe::ApplePayDomain < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List

  # Delete an apple pay domain.
  #
  # source://stripe//lib/stripe/resources/apple_pay_domain.rb#37
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Create an apple pay domain.
    #
    # source://stripe//lib/stripe/resources/apple_pay_domain.rb#17
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Delete an apple pay domain.
    #
    # source://stripe//lib/stripe/resources/apple_pay_domain.rb#27
    def delete(domain, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # List apple pay domains.
    #
    # source://stripe//lib/stripe/resources/apple_pay_domain.rb#47
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/apple_pay_domain.rb#12
    def object_name; end

    # source://stripe//lib/stripe/resources/apple_pay_domain.rb#51
    def resource_url; end
  end
end

# source://stripe//lib/stripe/resources/apple_pay_domain.rb#11
Stripe::ApplePayDomain::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/apple_pay_domain_service.rb#5
class Stripe::ApplePayDomainService < ::Stripe::StripeService
  # Create an apple pay domain.
  #
  # source://stripe//lib/stripe/services/apple_pay_domain_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Delete an apple pay domain.
  #
  # source://stripe//lib/stripe/services/apple_pay_domain_service.rb#18
  def delete(domain, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # List apple pay domains.
  #
  # source://stripe//lib/stripe/services/apple_pay_domain_service.rb#29
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve an apple pay domain.
  #
  # source://stripe//lib/stripe/services/apple_pay_domain_service.rb#40
  def retrieve(domain, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/application_fee.rb#5
class Stripe::ApplicationFee < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource

  class << self
    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_refund(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of application fees you've previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.
    #
    # source://stripe//lib/stripe/resources/application_fee.rb#17
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_refunds(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/application_fee.rb#10
    def object_name; end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def refunds_url(id, nested_id = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_refund(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#67
    def update_refund(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/application_fee.rb#9
Stripe::ApplicationFee::OBJECT_NAME = T.let(T.unsafe(nil), String)

# `Application Fee Refund` objects allow you to refund an application fee that
# has previously been created but not yet refunded. Funds will be refunded to
# the Stripe account from which the fee was originally collected.
#
# Related guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)
#
# source://stripe//lib/stripe/resources/application_fee_refund.rb#10
class Stripe::ApplicationFeeRefund < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/application_fee_refund.rb#18
  def resource_url; end

  class << self
    # source://stripe//lib/stripe/resources/application_fee_refund.rb#14
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/application_fee_refund.rb#31
    def retrieve(_id, _api_key = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/application_fee_refund.rb#23
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/application_fee_refund.rb#13
Stripe::ApplicationFeeRefund::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/application_fee_refund_service.rb#5
class Stripe::ApplicationFeeRefundService < ::Stripe::StripeService
  # Refunds an application fee that has previously been collected but not yet refunded.
  # Funds will be refunded to the Stripe account from which the fee was originally collected.
  #
  # You can optionally refund only part of an application fee.
  # You can do so multiple times, until the entire fee has been refunded.
  #
  # Once entirely refunded, an application fee can't be refunded again.
  # This method will raise an error when called on an already-refunded application fee,
  # or when trying to refund more money than is left on an application fee.
  #
  # source://stripe//lib/stripe/services/application_fee_refund_service.rb#15
  def create(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional refunds.
  #
  # source://stripe//lib/stripe/services/application_fee_refund_service.rb#26
  def list(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.
  #
  # source://stripe//lib/stripe/services/application_fee_refund_service.rb#37
  def retrieve(fee, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # This request only accepts metadata as an argument.
  #
  # source://stripe//lib/stripe/services/application_fee_refund_service.rb#50
  def update(fee, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/application_fee_service.rb#5
class Stripe::ApplicationFeeService < ::Stripe::StripeService
  # @return [ApplicationFeeService] a new instance of ApplicationFeeService
  #
  # source://stripe//lib/stripe/services/application_fee_service.rb#8
  def initialize(requestor); end

  # Returns a list of application fees you've previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.
  #
  # source://stripe//lib/stripe/services/application_fee_service.rb#14
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute refunds.
  #
  # source://stripe//lib/stripe/services/application_fee_service.rb#6
  def refunds; end

  # Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.
  #
  # source://stripe//lib/stripe/services/application_fee_service.rb#25
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/apps/secret.rb#5
module Stripe::Apps; end

# Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.
#
# The primary resource in Secret Store is a `secret`. Other apps can't view secrets created by an app. Additionally, secrets are scoped to provide further permission control.
#
# All Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don't change per-user, like a third-party API key.
#
# A `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.
#
# Related guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)
#
# source://stripe//lib/stripe/resources/apps/secret.rb#15
class Stripe::Apps::Secret < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  class << self
    # Create or replace a secret in the secret store.
    #
    # source://stripe//lib/stripe/resources/apps/secret.rb#25
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes a secret from the secret store by name and scope.
    #
    # source://stripe//lib/stripe/resources/apps/secret.rb#30
    def delete_where(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Finds a secret in the secret store by name and scope.
    #
    # source://stripe//lib/stripe/resources/apps/secret.rb#40
    def find(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # List all secrets stored on the given scope.
    #
    # source://stripe//lib/stripe/resources/apps/secret.rb#50
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/apps/secret.rb#20
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/apps/secret.rb#19
Stripe::Apps::Secret::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/apps/secret_service.rb#6
class Stripe::Apps::SecretService < ::Stripe::StripeService
  # Create or replace a secret in the secret store.
  #
  # source://stripe//lib/stripe/services/apps/secret_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a secret from the secret store by name and scope.
  #
  # source://stripe//lib/stripe/services/apps/secret_service.rb#19
  def delete_where(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Finds a secret in the secret store by name and scope.
  #
  # source://stripe//lib/stripe/services/apps/secret_service.rb#30
  def find(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # List all secrets stored on the given scope.
  #
  # source://stripe//lib/stripe/services/apps/secret_service.rb#41
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/apps_service.rb#5
class Stripe::AppsService < ::Stripe::StripeService
  # @return [AppsService] a new instance of AppsService
  #
  # source://stripe//lib/stripe/services/apps_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute secrets.
  #
  # source://stripe//lib/stripe/services/apps_service.rb#6
  def secrets; end
end

# AuthenticationError is raised when invalid credentials are used to connect
# to Stripe's servers.
#
# source://stripe//lib/stripe/errors.rb#50
class Stripe::AuthenticationError < ::Stripe::StripeError; end

# This is an object representing your Stripe balance. You can retrieve it to see
# the balance currently on your Stripe account.
#
# You can also retrieve the balance history, which contains a list of
# [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
# (charges, payouts, and so forth).
#
# The available and pending amounts for each currency are broken down further by
# payment source types.
#
# Related guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
#
# source://stripe//lib/stripe/resources/balance.rb#16
class Stripe::Balance < ::Stripe::SingletonAPIResource
  class << self
    # source://stripe//lib/stripe/resources/balance.rb#18
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/balance.rb#17
Stripe::Balance::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/balance_service.rb#5
class Stripe::BalanceService < ::Stripe::StripeService
  # Retrieves the current account balance, based on the authentication that was used to make the request.
  #  For a sample request, see [Accounting for negative balances](https://stripe.com/docs/connect/account-balances#accounting-for-negative-balances).
  #
  # source://stripe//lib/stripe/services/balance_service.rb#8
  def retrieve(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Balance transactions represent funds moving through your Stripe account.
# Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.
#
# Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
#
# source://stripe//lib/stripe/resources/balance_transaction.rb#9
class Stripe::BalanceTransaction < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.
    #
    # Note that this endpoint was previously called “Balance history” and used the path /v1/balance/history.
    #
    # source://stripe//lib/stripe/resources/balance_transaction.rb#20
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/balance_transaction.rb#13
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/balance_transaction.rb#12
Stripe::BalanceTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/balance_transaction_service.rb#5
class Stripe::BalanceTransactionService < ::Stripe::StripeService
  # Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.
  #
  # Note that this endpoint was previously called “Balance history” and used the path /v1/balance/history.
  #
  # source://stripe//lib/stripe/services/balance_transaction_service.rb#9
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the balance transaction with the given ID.
  #
  # Note that this endpoint previously used the path /v1/balance/history/:id.
  #
  # source://stripe//lib/stripe/services/balance_transaction_service.rb#22
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# These bank accounts are payment methods on `Customer` objects.
#
# On the other hand [External Accounts](https://stripe.com/api#external_accounts) are transfer
# destinations on `Account` objects for connected accounts.
# They can be bank accounts or debit cards as well, and are documented in the links above.
#
# Related guide: [Bank debits and transfers](https://stripe.com/payments/bank-debits-transfers)
#
# source://stripe//lib/stripe/resources/bank_account.rb#12
class Stripe::BankAccount < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/bank_account.rb#75
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/bank_account.rb#40
  def resource_url; end

  # source://stripe//lib/stripe/resources/bank_account.rb#22
  def verify(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/bank_account.rb#66
    def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/bank_account.rb#84
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/bank_account.rb#18
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/bank_account.rb#57
    def retrieve(_id, _opts = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/bank_account.rb#48
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/bank_account.rb#31
    def verify(customer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/bank_account.rb#17
Stripe::BankAccount::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/billing/alert.rb#5
module Stripe::Billing; end

# A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.
#
# source://stripe//lib/stripe/resources/billing/alert.rb#7
class Stripe::Billing::Alert < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  # Reactivates this alert, allowing it to trigger again.
  #
  # source://stripe//lib/stripe/resources/billing/alert.rb#17
  def activate(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Archives this alert, removing it from the list view and APIs. This is non-reversible.
  #
  # source://stripe//lib/stripe/resources/billing/alert.rb#37
  def archive(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deactivates this alert, preventing it from triggering.
  #
  # source://stripe//lib/stripe/resources/billing/alert.rb#62
  def deactivate(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Reactivates this alert, allowing it to trigger again.
    #
    # source://stripe//lib/stripe/resources/billing/alert.rb#27
    def activate(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Archives this alert, removing it from the list view and APIs. This is non-reversible.
    #
    # source://stripe//lib/stripe/resources/billing/alert.rb#47
    def archive(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a billing alert
    #
    # source://stripe//lib/stripe/resources/billing/alert.rb#57
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deactivates this alert, preventing it from triggering.
    #
    # source://stripe//lib/stripe/resources/billing/alert.rb#72
    def deactivate(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Lists billing active and inactive alerts
    #
    # source://stripe//lib/stripe/resources/billing/alert.rb#82
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/billing/alert.rb#12
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/billing/alert.rb#11
Stripe::Billing::Alert::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/billing/alert_service.rb#6
class Stripe::Billing::AlertService < ::Stripe::StripeService
  # Reactivates this alert, allowing it to trigger again.
  #
  # source://stripe//lib/stripe/services/billing/alert_service.rb#8
  def activate(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Archives this alert, removing it from the list view and APIs. This is non-reversible.
  #
  # source://stripe//lib/stripe/services/billing/alert_service.rb#19
  def archive(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a billing alert
  #
  # source://stripe//lib/stripe/services/billing/alert_service.rb#30
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deactivates this alert, preventing it from triggering.
  #
  # source://stripe//lib/stripe/services/billing/alert_service.rb#41
  def deactivate(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Lists billing active and inactive alerts
  #
  # source://stripe//lib/stripe/services/billing/alert_service.rb#52
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a billing alert given an ID
  #
  # source://stripe//lib/stripe/services/billing/alert_service.rb#63
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Indicates the billing credit balance for billing credits granted to a customer.
#
# source://stripe//lib/stripe/resources/billing/credit_balance_summary.rb#7
class Stripe::Billing::CreditBalanceSummary < ::Stripe::SingletonAPIResource
  class << self
    # source://stripe//lib/stripe/resources/billing/credit_balance_summary.rb#9
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/billing/credit_balance_summary.rb#8
Stripe::Billing::CreditBalanceSummary::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/billing/credit_balance_summary_service.rb#6
class Stripe::Billing::CreditBalanceSummaryService < ::Stripe::StripeService
  # Retrieves the credit balance summary for a customer.
  #
  # source://stripe//lib/stripe/services/billing/credit_balance_summary_service.rb#8
  def retrieve(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A credit balance transaction is a resource representing a transaction (either a credit or a debit) against an existing credit grant.
#
# source://stripe//lib/stripe/resources/billing/credit_balance_transaction.rb#7
class Stripe::Billing::CreditBalanceTransaction < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Retrieve a list of credit balance transactions.
    #
    # source://stripe//lib/stripe/resources/billing/credit_balance_transaction.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/billing/credit_balance_transaction.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/billing/credit_balance_transaction.rb#10
Stripe::Billing::CreditBalanceTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/billing/credit_balance_transaction_service.rb#6
class Stripe::Billing::CreditBalanceTransactionService < ::Stripe::StripeService
  # Retrieve a list of credit balance transactions.
  #
  # source://stripe//lib/stripe/services/billing/credit_balance_transaction_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a credit balance transaction.
  #
  # source://stripe//lib/stripe/services/billing/credit_balance_transaction_service.rb#19
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A credit grant is an API resource that documents the allocation of some billing credits to a customer.
#
# Related guide: [Billing credits](https://docs.stripe.com/billing/subscriptions/usage-based/billing-credits)
#
# source://stripe//lib/stripe/resources/billing/credit_grant.rb#9
class Stripe::Billing::CreditGrant < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Expires a credit grant.
  #
  # source://stripe//lib/stripe/resources/billing/credit_grant.rb#30
  def expire(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Voids a credit grant.
  #
  # source://stripe//lib/stripe/resources/billing/credit_grant.rb#70
  def void_grant(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a credit grant.
    #
    # source://stripe//lib/stripe/resources/billing/credit_grant.rb#20
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Expires a credit grant.
    #
    # source://stripe//lib/stripe/resources/billing/credit_grant.rb#40
    def expire(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Retrieve a list of credit grants.
    #
    # source://stripe//lib/stripe/resources/billing/credit_grant.rb#50
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/billing/credit_grant.rb#15
    def object_name; end

    # Updates a credit grant.
    #
    # source://stripe//lib/stripe/resources/billing/credit_grant.rb#60
    def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Voids a credit grant.
    #
    # source://stripe//lib/stripe/resources/billing/credit_grant.rb#80
    def void_grant(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/billing/credit_grant.rb#14
Stripe::Billing::CreditGrant::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/billing/credit_grant_service.rb#6
class Stripe::Billing::CreditGrantService < ::Stripe::StripeService
  # Creates a credit grant.
  #
  # source://stripe//lib/stripe/services/billing/credit_grant_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Expires a credit grant.
  #
  # source://stripe//lib/stripe/services/billing/credit_grant_service.rb#19
  def expire(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve a list of credit grants.
  #
  # source://stripe//lib/stripe/services/billing/credit_grant_service.rb#30
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a credit grant.
  #
  # source://stripe//lib/stripe/services/billing/credit_grant_service.rb#41
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a credit grant.
  #
  # source://stripe//lib/stripe/services/billing/credit_grant_service.rb#52
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Voids a credit grant.
  #
  # source://stripe//lib/stripe/services/billing/credit_grant_service.rb#63
  def void_grant(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Meters specify how to aggregate meter events over a billing period. Meter events represent the actions that customers take in your system. Meters attach to prices and form the basis of the bill.
#
# Related guide: [Usage based billing](https://docs.stripe.com/billing/subscriptions/usage-based)
#
# source://stripe//lib/stripe/resources/billing/meter.rb#9
class Stripe::Billing::Meter < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Save::ClassMethods

  # When a meter is deactivated, no more meter events will be accepted for this meter. You can't attach a deactivated meter to a price.
  #
  # source://stripe//lib/stripe/resources/billing/meter.rb#30
  def deactivate(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # When a meter is reactivated, events for this meter can be accepted and you can attach the meter to a price.
  #
  # source://stripe//lib/stripe/resources/billing/meter.rb#55
  def reactivate(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a billing meter.
    #
    # source://stripe//lib/stripe/resources/billing/meter.rb#25
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # When a meter is deactivated, no more meter events will be accepted for this meter. You can't attach a deactivated meter to a price.
    #
    # source://stripe//lib/stripe/resources/billing/meter.rb#40
    def deactivate(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def event_summarys_url(id, nested_id = T.unsafe(nil)); end

    # Retrieve a list of billing meters.
    #
    # source://stripe//lib/stripe/resources/billing/meter.rb#50
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_event_summaries(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/billing/meter.rb#16
    def object_name; end

    # When a meter is reactivated, events for this meter can be accepted and you can attach the meter to a price.
    #
    # source://stripe//lib/stripe/resources/billing/meter.rb#65
    def reactivate(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates a billing meter.
    #
    # source://stripe//lib/stripe/resources/billing/meter.rb#75
    def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/billing/meter.rb#15
Stripe::Billing::Meter::OBJECT_NAME = T.let(T.unsafe(nil), String)

# Meter events represent actions that customers take in your system. You can use meter events to bill a customer based on their usage. Meter events are associated with billing meters, which define both the contents of the event's payload and how to aggregate those events.
#
# source://stripe//lib/stripe/resources/billing/meter_event.rb#7
class Stripe::Billing::MeterEvent < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # Creates a billing meter event.
    #
    # source://stripe//lib/stripe/resources/billing/meter_event.rb#16
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/billing/meter_event.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/billing/meter_event.rb#10
Stripe::Billing::MeterEvent::OBJECT_NAME = T.let(T.unsafe(nil), String)

# A billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.
#
# source://stripe//lib/stripe/resources/billing/meter_event_adjustment.rb#7
class Stripe::Billing::MeterEventAdjustment < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # Creates a billing meter event adjustment.
    #
    # source://stripe//lib/stripe/resources/billing/meter_event_adjustment.rb#16
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/billing/meter_event_adjustment.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/billing/meter_event_adjustment.rb#10
Stripe::Billing::MeterEventAdjustment::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/billing/meter_event_adjustment_service.rb#6
class Stripe::Billing::MeterEventAdjustmentService < ::Stripe::StripeService
  # Creates a billing meter event adjustment.
  #
  # source://stripe//lib/stripe/services/billing/meter_event_adjustment_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/billing/meter_event_service.rb#6
class Stripe::Billing::MeterEventService < ::Stripe::StripeService
  # Creates a billing meter event.
  #
  # source://stripe//lib/stripe/services/billing/meter_event_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A billing meter event summary represents an aggregated view of a customer's billing meter events within a specified timeframe. It indicates how much
# usage was accrued by a customer for that period.
#
# source://stripe//lib/stripe/resources/billing/meter_event_summary.rb#8
class Stripe::Billing::MeterEventSummary < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/billing/meter_event_summary.rb#10
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/billing/meter_event_summary.rb#9
Stripe::Billing::MeterEventSummary::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/billing/meter_event_summary_service.rb#6
class Stripe::Billing::MeterEventSummaryService < ::Stripe::StripeService
  # Retrieve a list of billing meter event summaries.
  #
  # source://stripe//lib/stripe/services/billing/meter_event_summary_service.rb#8
  def list(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/billing/meter_service.rb#6
class Stripe::Billing::MeterService < ::Stripe::StripeService
  # @return [MeterService] a new instance of MeterService
  #
  # source://stripe//lib/stripe/services/billing/meter_service.rb#9
  def initialize(requestor); end

  # Creates a billing meter.
  #
  # source://stripe//lib/stripe/services/billing/meter_service.rb#15
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # When a meter is deactivated, no more meter events will be accepted for this meter. You can't attach a deactivated meter to a price.
  #
  # source://stripe//lib/stripe/services/billing/meter_service.rb#26
  def deactivate(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute event_summaries.
  #
  # source://stripe//lib/stripe/services/billing/meter_service.rb#7
  def event_summaries; end

  # Retrieve a list of billing meters.
  #
  # source://stripe//lib/stripe/services/billing/meter_service.rb#37
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # When a meter is reactivated, events for this meter can be accepted and you can attach the meter to a price.
  #
  # source://stripe//lib/stripe/services/billing/meter_service.rb#48
  def reactivate(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a billing meter given an ID.
  #
  # source://stripe//lib/stripe/services/billing/meter_service.rb#59
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a billing meter.
  #
  # source://stripe//lib/stripe/services/billing/meter_service.rb#70
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/billing_portal/configuration.rb#5
module Stripe::BillingPortal; end

# A portal configuration describes the functionality and behavior of a portal session.
#
# source://stripe//lib/stripe/resources/billing_portal/configuration.rb#7
class Stripe::BillingPortal::Configuration < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a configuration that describes the functionality and behavior of a PortalSession
    #
    # source://stripe//lib/stripe/resources/billing_portal/configuration.rb#18
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of configurations that describe the functionality of the customer portal.
    #
    # source://stripe//lib/stripe/resources/billing_portal/configuration.rb#28
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/billing_portal/configuration.rb#13
    def object_name; end

    # Updates a configuration that describes the functionality of the customer portal.
    #
    # source://stripe//lib/stripe/resources/billing_portal/configuration.rb#38
    def update(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/billing_portal/configuration.rb#12
Stripe::BillingPortal::Configuration::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/billing_portal/configuration_service.rb#6
class Stripe::BillingPortal::ConfigurationService < ::Stripe::StripeService
  # Creates a configuration that describes the functionality and behavior of a PortalSession
  #
  # source://stripe//lib/stripe/services/billing_portal/configuration_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of configurations that describe the functionality of the customer portal.
  #
  # source://stripe//lib/stripe/services/billing_portal/configuration_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a configuration that describes the functionality of the customer portal.
  #
  # source://stripe//lib/stripe/services/billing_portal/configuration_service.rb#30
  def retrieve(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a configuration that describes the functionality of the customer portal.
  #
  # source://stripe//lib/stripe/services/billing_portal/configuration_service.rb#41
  def update(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# The Billing customer portal is a Stripe-hosted UI for subscription and
# billing management.
#
# A portal configuration describes the functionality and features that you
# want to provide to your customers through the portal.
#
# A portal session describes the instantiation of the customer portal for
# a particular customer. By visiting the session's URL, the customer
# can manage their subscriptions and billing details. For security reasons,
# sessions are short-lived and will expire if the customer does not visit the URL.
# Create sessions on-demand when customers intend to manage their subscriptions
# and billing details.
#
# Related guide: [Customer management](https://stripe.com/customer-management)
#
# source://stripe//lib/stripe/resources/billing_portal/session.rb#20
class Stripe::BillingPortal::Session < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # Creates a session of the customer portal.
    #
    # source://stripe//lib/stripe/resources/billing_portal/session.rb#29
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/billing_portal/session.rb#24
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/billing_portal/session.rb#23
Stripe::BillingPortal::Session::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/billing_portal/session_service.rb#6
class Stripe::BillingPortal::SessionService < ::Stripe::StripeService
  # Creates a session of the customer portal.
  #
  # source://stripe//lib/stripe/services/billing_portal/session_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/billing_portal_service.rb#5
class Stripe::BillingPortalService < ::Stripe::StripeService
  # @return [BillingPortalService] a new instance of BillingPortalService
  #
  # source://stripe//lib/stripe/services/billing_portal_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute configurations.
  #
  # source://stripe//lib/stripe/services/billing_portal_service.rb#6
  def configurations; end

  # Returns the value of attribute sessions.
  #
  # source://stripe//lib/stripe/services/billing_portal_service.rb#6
  def sessions; end
end

# source://stripe//lib/stripe/services/billing_service.rb#5
class Stripe::BillingService < ::Stripe::StripeService
  # @return [BillingService] a new instance of BillingService
  #
  # source://stripe//lib/stripe/services/billing_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute alerts.
  #
  # source://stripe//lib/stripe/services/billing_service.rb#6
  def alerts; end

  # Returns the value of attribute credit_balance_summary.
  #
  # source://stripe//lib/stripe/services/billing_service.rb#6
  def credit_balance_summary; end

  # Returns the value of attribute credit_balance_transactions.
  #
  # source://stripe//lib/stripe/services/billing_service.rb#6
  def credit_balance_transactions; end

  # Returns the value of attribute credit_grants.
  #
  # source://stripe//lib/stripe/services/billing_service.rb#6
  def credit_grants; end

  # Returns the value of attribute meter_event_adjustments.
  #
  # source://stripe//lib/stripe/services/billing_service.rb#6
  def meter_event_adjustments; end

  # Returns the value of attribute meter_events.
  #
  # source://stripe//lib/stripe/services/billing_service.rb#6
  def meter_events; end

  # Returns the value of attribute meters.
  #
  # source://stripe//lib/stripe/services/billing_service.rb#6
  def meters; end
end

# This is an object representing a capability for a Stripe account.
#
# Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities)
#
# source://stripe//lib/stripe/resources/capability.rb#8
class Stripe::Capability < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/capability.rb#16
  def resource_url; end

  class << self
    # source://stripe//lib/stripe/resources/capability.rb#12
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/capability.rb#25
    def retrieve(_id, _opts = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/capability.rb#32
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/capability.rb#11
Stripe::Capability::OBJECT_NAME = T.let(T.unsafe(nil), String)

# You can store multiple cards on a customer in order to charge the customer
# later. You can also store multiple debit cards on a recipient in order to
# transfer to those cards later.
#
# Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
#
# source://stripe//lib/stripe/resources/card.rb#10
class Stripe::Card < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/card.rb#52
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/card.rb#20
  def resource_url; end

  class << self
    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/card.rb#44
    def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/card.rb#61
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/card.rb#16
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/card.rb#36
    def retrieve(_id, _opts = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/card.rb#28
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/card.rb#15
Stripe::Card::OBJECT_NAME = T.let(T.unsafe(nil), String)

# CardError is raised when a user enters a card that can't be charged for
# some reason.
#
# source://stripe//lib/stripe/errors.rb#68
class Stripe::CardError < ::Stripe::StripeError
  # @return [CardError] a new instance of CardError
  #
  # source://stripe//lib/stripe/errors.rb#71
  def initialize(message, param, code: T.unsafe(nil), http_status: T.unsafe(nil), http_body: T.unsafe(nil), json_body: T.unsafe(nil), http_headers: T.unsafe(nil)); end

  # Returns the value of attribute param.
  #
  # source://stripe//lib/stripe/errors.rb#69
  def param; end
end

# A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.
#
# source://stripe//lib/stripe/resources/cash_balance.rb#6
class Stripe::CashBalance < ::Stripe::APIResource
  # source://stripe//lib/stripe/resources/cash_balance.rb#12
  def resource_url; end

  class << self
    # source://stripe//lib/stripe/resources/cash_balance.rb#8
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/cash_balance.rb#20
    def retrieve(_id, _opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/cash_balance.rb#7
Stripe::CashBalance::OBJECT_NAME = T.let(T.unsafe(nil), String)

# The `Charge` object represents a single attempt to move money into your Stripe account.
# PaymentIntent confirmation is the most common way to create Charges, but transferring
# money to a different Stripe account through Connect also creates Charges.
# Some legacy payment flows create Charges directly, which is not recommended for new integrations.
#
# source://stripe//lib/stripe/resources/charge.rb#9
class Stripe::Charge < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Search
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Capture the payment of an existing, uncaptured charge that was created with the capture option set to false.
  #
  # Uncaptured payments expire a set number of days after they are created ([7 by default](https://stripe.com/docs/charges/placing-a-hold)), after which they are marked as refunded and capture attempts will fail.
  #
  # Don't use this method to capture a PaymentIntent-initiated charge. Use [Capture a PaymentIntent](https://stripe.com/docs/api/payment_intents/capture).
  #
  # source://stripe//lib/stripe/resources/charge.rb#28
  def capture(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Capture the payment of an existing, uncaptured charge that was created with the capture option set to false.
    #
    # Uncaptured payments expire a set number of days after they are created ([7 by default](https://stripe.com/docs/charges/placing-a-hold)), after which they are marked as refunded and capture attempts will fail.
    #
    # Don't use this method to capture a PaymentIntent-initiated charge. Use [Capture a PaymentIntent](https://stripe.com/docs/api/payment_intents/capture).
    #
    # source://stripe//lib/stripe/resources/charge.rb#42
    def capture(charge, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # This method is no longer recommended—use the [Payment Intents API](https://stripe.com/docs/api/payment_intents)
    # to initiate a new payment instead. Confirmation of the PaymentIntent creates the Charge
    # object used to request payment.
    #
    # source://stripe//lib/stripe/resources/charge.rb#54
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of charges you've previously created. The charges are returned in sorted order, with the most recent charges appearing first.
    #
    # source://stripe//lib/stripe/resources/charge.rb#59
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_refunds(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/charge.rb#17
    def object_name; end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def refunds_url(id, nested_id = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_refund(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/charge.rb#63
    def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/charge.rb#67
    def search_auto_paging_each(params = T.unsafe(nil), opts = T.unsafe(nil), &blk); end

    # Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # source://stripe//lib/stripe/resources/charge.rb#72
    def update(charge, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/charge.rb#16
Stripe::Charge::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/charge_service.rb#5
class Stripe::ChargeService < ::Stripe::StripeService
  # Capture the payment of an existing, uncaptured charge that was created with the capture option set to false.
  #
  # Uncaptured payments expire a set number of days after they are created ([7 by default](https://stripe.com/docs/charges/placing-a-hold)), after which they are marked as refunded and capture attempts will fail.
  #
  # Don't use this method to capture a PaymentIntent-initiated charge. Use [Capture a PaymentIntent](https://stripe.com/docs/api/payment_intents/capture).
  #
  # source://stripe//lib/stripe/services/charge_service.rb#11
  def capture(charge, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # This method is no longer recommended—use the [Payment Intents API](https://stripe.com/docs/api/payment_intents)
  # to initiate a new payment instead. Confirmation of the PaymentIntent creates the Charge
  # object used to request payment.
  #
  # source://stripe//lib/stripe/services/charge_service.rb#24
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of charges you've previously created. The charges are returned in sorted order, with the most recent charges appearing first.
  #
  # source://stripe//lib/stripe/services/charge_service.rb#29
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.
  #
  # source://stripe//lib/stripe/services/charge_service.rb#34
  def retrieve(charge, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Search for charges you've previously created using Stripe's [Search Query Language](https://stripe.com/docs/search#search-query-language).
  # Don't use search in read-after-write flows where strict consistency is necessary. Under normal operating
  # conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
  # to an hour behind during outages. Search functionality is not available to merchants in India.
  #
  # source://stripe//lib/stripe/services/charge_service.rb#48
  def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # source://stripe//lib/stripe/services/charge_service.rb#59
  def update(charge, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/checkout/session.rb#5
module Stripe::Checkout; end

# A Checkout Session represents your customer's session as they pay for
# one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
# or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
# new Session each time your customer attempts to pay.
#
# Once payment is successful, the Checkout Session will contain a reference
# to the [Customer](https://stripe.com/docs/api/customers), and either the successful
# [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
# [Subscription](https://stripe.com/docs/api/subscriptions).
#
# You can create a Checkout Session on your server and redirect to its URL
# to begin Checkout.
#
# Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
#
# source://stripe//lib/stripe/resources/checkout/session.rb#20
class Stripe::Checkout::Session < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # A Session can be expired when it is in one of these statuses: open
  #
  # After it expires, a customer can't complete a Session and customers loading the Session see a message saying the Session is expired.
  #
  # source://stripe//lib/stripe/resources/checkout/session.rb#43
  def expire(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # When retrieving a Checkout Session, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/resources/checkout/session.rb#75
  def list_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a Session object.
    #
    # source://stripe//lib/stripe/resources/checkout/session.rb#31
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # A Session can be expired when it is in one of these statuses: open
    #
    # After it expires, a customer can't complete a Session and customers loading the Session see a message saying the Session is expired.
    #
    # source://stripe//lib/stripe/resources/checkout/session.rb#55
    def expire(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Checkout Sessions.
    #
    # source://stripe//lib/stripe/resources/checkout/session.rb#65
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # When retrieving a Checkout Session, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
    #
    # source://stripe//lib/stripe/resources/checkout/session.rb#85
    def list_line_items(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/checkout/session.rb#26
    def object_name; end

    # Updates a Session object.
    #
    # source://stripe//lib/stripe/resources/checkout/session.rb#95
    def update(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/checkout/session.rb#25
Stripe::Checkout::Session::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/checkout/session_line_item_service.rb#6
class Stripe::Checkout::SessionLineItemService < ::Stripe::StripeService
  # When retrieving a Checkout Session, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/services/checkout/session_line_item_service.rb#8
  def list(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/checkout/session_service.rb#6
class Stripe::Checkout::SessionService < ::Stripe::StripeService
  # @return [SessionService] a new instance of SessionService
  #
  # source://stripe//lib/stripe/services/checkout/session_service.rb#9
  def initialize(requestor); end

  # Creates a Session object.
  #
  # source://stripe//lib/stripe/services/checkout/session_service.rb#15
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # A Session can be expired when it is in one of these statuses: open
  #
  # After it expires, a customer can't complete a Session and customers loading the Session see a message saying the Session is expired.
  #
  # source://stripe//lib/stripe/services/checkout/session_service.rb#28
  def expire(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute line_items.
  #
  # source://stripe//lib/stripe/services/checkout/session_service.rb#7
  def line_items; end

  # Returns a list of Checkout Sessions.
  #
  # source://stripe//lib/stripe/services/checkout/session_service.rb#39
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a Session object.
  #
  # source://stripe//lib/stripe/services/checkout/session_service.rb#50
  def retrieve(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a Session object.
  #
  # source://stripe//lib/stripe/services/checkout/session_service.rb#61
  def update(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/checkout_service.rb#5
class Stripe::CheckoutService < ::Stripe::StripeService
  # @return [CheckoutService] a new instance of CheckoutService
  #
  # source://stripe//lib/stripe/services/checkout_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute sessions.
  #
  # source://stripe//lib/stripe/services/checkout_service.rb#6
  def sessions; end
end

# source://stripe//lib/stripe/resources/climate/order.rb#5
module Stripe::Climate; end

# Orders represent your intent to purchase a particular Climate product. When you create an order, the
# payment is deducted from your merchant balance.
#
# source://stripe//lib/stripe/resources/climate/order.rb#8
class Stripe::Climate::Order < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the
  # reservation amount_subtotal, but not the amount_fees for user-triggered cancellations. Frontier
  # might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
  # provides 90 days advance notice and refunds the amount_total.
  #
  # source://stripe//lib/stripe/resources/climate/order.rb#22
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the
    # reservation amount_subtotal, but not the amount_fees for user-triggered cancellations. Frontier
    # might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
    # provides 90 days advance notice and refunds the amount_total.
    #
    # source://stripe//lib/stripe/resources/climate/order.rb#35
    def cancel(order, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a Climate order object for a given Climate product. The order will be processed immediately
    # after creation and payment will be deducted your Stripe balance.
    #
    # source://stripe//lib/stripe/resources/climate/order.rb#46
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Lists all Climate order objects. The orders are returned sorted by creation date, with the
    # most recently created orders appearing first.
    #
    # source://stripe//lib/stripe/resources/climate/order.rb#52
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/climate/order.rb#14
    def object_name; end

    # Updates the specified order by setting the values of the parameters passed.
    #
    # source://stripe//lib/stripe/resources/climate/order.rb#57
    def update(order, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/climate/order.rb#13
Stripe::Climate::Order::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/climate/order_service.rb#6
class Stripe::Climate::OrderService < ::Stripe::StripeService
  # Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the
  # reservation amount_subtotal, but not the amount_fees for user-triggered cancellations. Frontier
  # might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
  # provides 90 days advance notice and refunds the amount_total.
  #
  # source://stripe//lib/stripe/services/climate/order_service.rb#11
  def cancel(order, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a Climate order object for a given Climate product. The order will be processed immediately
  # after creation and payment will be deducted your Stripe balance.
  #
  # source://stripe//lib/stripe/services/climate/order_service.rb#23
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Lists all Climate order objects. The orders are returned sorted by creation date, with the
  # most recently created orders appearing first.
  #
  # source://stripe//lib/stripe/services/climate/order_service.rb#35
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a Climate order object with the given ID.
  #
  # source://stripe//lib/stripe/services/climate/order_service.rb#46
  def retrieve(order, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified order by setting the values of the parameters passed.
  #
  # source://stripe//lib/stripe/services/climate/order_service.rb#57
  def update(order, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Climate product represents a type of carbon removal unit available for reservation.
# You can retrieve it to see the current price and availability.
#
# source://stripe//lib/stripe/resources/climate/product.rb#8
class Stripe::Climate::Product < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Lists all available Climate product objects.
    #
    # source://stripe//lib/stripe/resources/climate/product.rb#17
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/climate/product.rb#12
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/climate/product.rb#11
Stripe::Climate::Product::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/climate/product_service.rb#6
class Stripe::Climate::ProductService < ::Stripe::StripeService
  # Lists all available Climate product objects.
  #
  # source://stripe//lib/stripe/services/climate/product_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a Climate product with the given ID.
  #
  # source://stripe//lib/stripe/services/climate/product_service.rb#19
  def retrieve(product, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A supplier of carbon removal.
#
# source://stripe//lib/stripe/resources/climate/supplier.rb#7
class Stripe::Climate::Supplier < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Lists all available Climate supplier objects.
    #
    # source://stripe//lib/stripe/resources/climate/supplier.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/climate/supplier.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/climate/supplier.rb#10
Stripe::Climate::Supplier::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/climate/supplier_service.rb#6
class Stripe::Climate::SupplierService < ::Stripe::StripeService
  # Lists all available Climate supplier objects.
  #
  # source://stripe//lib/stripe/services/climate/supplier_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a Climate supplier object.
  #
  # source://stripe//lib/stripe/services/climate/supplier_service.rb#19
  def retrieve(supplier, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/climate_service.rb#5
class Stripe::ClimateService < ::Stripe::StripeService
  # @return [ClimateService] a new instance of ClimateService
  #
  # source://stripe//lib/stripe/services/climate_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute orders.
  #
  # source://stripe//lib/stripe/services/climate_service.rb#6
  def orders; end

  # Returns the value of attribute products.
  #
  # source://stripe//lib/stripe/services/climate_service.rb#6
  def products; end

  # Returns the value of attribute suppliers.
  #
  # source://stripe//lib/stripe/services/climate_service.rb#6
  def suppliers; end
end

# ConfirmationTokens help transport client side data collected by Stripe JS over
# to your server for confirming a PaymentIntent or SetupIntent. If the confirmation
# is successful, values present on the ConfirmationToken are written onto the Intent.
#
# To learn more about how to use ConfirmationToken, visit the related guides:
# - [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server)
# - [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).
#
# source://stripe//lib/stripe/resources/confirmation_token.rb#12
class Stripe::ConfirmationToken < ::Stripe::APIResource
  # source://stripe//lib/stripe/resources/confirmation_token.rb#18
  def test_helpers; end

  class << self
    # source://stripe//lib/stripe/resources/confirmation_token.rb#14
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/confirmation_token.rb#13
Stripe::ConfirmationToken::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/confirmation_token.rb#22
class Stripe::ConfirmationToken::TestHelpers < ::Stripe::APIResourceTestHelpers
  class << self
    # Creates a test mode Confirmation Token server side for your integration tests.
    #
    # source://stripe//lib/stripe/resources/confirmation_token.rb#29
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/confirmation_token.rb#24
    def resource_class; end
  end
end

# source://stripe//lib/stripe/resources/confirmation_token.rb#23
Stripe::ConfirmationToken::TestHelpers::RESOURCE_CLASS = Stripe::ConfirmationToken

# source://stripe//lib/stripe/services/confirmation_token_service.rb#5
class Stripe::ConfirmationTokenService < ::Stripe::StripeService
  # Retrieves an existing ConfirmationToken object
  #
  # source://stripe//lib/stripe/services/confirmation_token_service.rb#7
  def retrieve(confirmation_token, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Manages connections across multiple hosts which is useful because the
# library may connect to multiple hosts during a typical session (main API,
# Connect, Uploads). Ruby doesn't provide an easy way to make this happen
# easily, so this class is designed to track what we're connected to and
# manage the lifecycle of those connections.
#
# Note that this class in itself is *not* thread safe. We expect it to be
# instantiated once per thread.
#
# source://stripe//lib/stripe/connection_manager.rb#12
class Stripe::ConnectionManager
  # @return [ConnectionManager] a new instance of ConnectionManager
  #
  # source://stripe//lib/stripe/connection_manager.rb#20
  def initialize(config = T.unsafe(nil)); end

  # Finishes any active connections by closing their TCP connection and
  # clears them from internal tracking.
  #
  # source://stripe//lib/stripe/connection_manager.rb#37
  def clear; end

  # Returns the value of attribute config.
  #
  # source://stripe//lib/stripe/connection_manager.rb#18
  def config; end

  # Gets a connection for a given URI. This is for internal use only as it's
  # subject to change (we've moved between HTTP client schemes in the past
  # and may do it again).
  #
  # `uri` is expected to be a string.
  #
  # source://stripe//lib/stripe/connection_manager.rb#51
  def connection_for(uri); end

  # Executes an HTTP request to the given URI with the given method. Also
  # allows a request body, headers, and query string to be specified.
  #
  # @raise [ArgumentError]
  #
  # source://stripe//lib/stripe/connection_manager.rb#69
  def execute_request(method, uri, body: T.unsafe(nil), headers: T.unsafe(nil), query: T.unsafe(nil), &block); end

  # Timestamp (in seconds procured from the system's monotonic clock)
  # indicating when the connection manager last made a request. This is used
  # by `APIRequestor` to determine whether a connection manager should be
  # garbage collected or not.
  #
  # source://stripe//lib/stripe/connection_manager.rb#17
  def last_used; end

  private

  # `uri` should be a parsed `URI` object.
  #
  # source://stripe//lib/stripe/connection_manager.rb#141
  def create_connection(uri); end

  # `Net::HTTP` somewhat awkwardly requires each component of a proxy URI
  # (host, port, etc.) rather than the URI itself. This method simply parses
  # out those pieces to make passing them into a new connection a little less
  # ugly.
  #
  # source://stripe//lib/stripe/connection_manager.rb#179
  def proxy_parts; end

  # source://stripe//lib/stripe/connection_manager.rb#188
  def warn_ssl_verify_none; end
end

# Stripe needs to collect certain pieces of information about each account
# created. These requirements can differ depending on the account's country. The
# Country Specs API makes these rules available to your integration.
#
# You can also view the information from this API call as [an online
# guide](https://stripe.com/docs/connect/required-verification-information).
#
# source://stripe//lib/stripe/resources/country_spec.rb#11
class Stripe::CountrySpec < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Lists all Country Spec objects available in the API.
    #
    # source://stripe//lib/stripe/resources/country_spec.rb#20
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/country_spec.rb#15
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/country_spec.rb#14
Stripe::CountrySpec::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/country_spec_service.rb#5
class Stripe::CountrySpecService < ::Stripe::StripeService
  # Lists all Country Spec objects available in the API.
  #
  # source://stripe//lib/stripe/services/country_spec_service.rb#7
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a Country Spec for a given Country code.
  #
  # source://stripe//lib/stripe/services/country_spec_service.rb#18
  def retrieve(country, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A coupon contains information about a percent-off or amount-off discount you
# might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
# [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
#
# source://stripe//lib/stripe/resources/coupon.rb#8
class Stripe::Coupon < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # You can delete coupons via the [coupon management](https://dashboard.stripe.com/coupons) page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can't redeem the coupon. You can also delete coupons via the API.
  #
  # source://stripe//lib/stripe/resources/coupon.rb#37
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # You can create coupons easily via the [coupon management](https://dashboard.stripe.com/coupons) page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.
    #
    # A coupon has either a percent_off or an amount_off and currency. If you set an amount_off, that amount will be subtracted from any invoice's subtotal. For example, an invoice with a subtotal of 100 will have a final total of 0 if a coupon with an amount_off of 200 is applied to it and an invoice with a subtotal of 300 will have a final total of 100 if a coupon with an amount_off of 200 is applied to it.
    #
    # source://stripe//lib/stripe/resources/coupon.rb#22
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # You can delete coupons via the [coupon management](https://dashboard.stripe.com/coupons) page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can't redeem the coupon. You can also delete coupons via the API.
    #
    # source://stripe//lib/stripe/resources/coupon.rb#27
    def delete(coupon, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your coupons.
    #
    # source://stripe//lib/stripe/resources/coupon.rb#47
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/coupon.rb#15
    def object_name; end

    # Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.
    #
    # source://stripe//lib/stripe/resources/coupon.rb#52
    def update(coupon, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/coupon.rb#14
Stripe::Coupon::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/coupon_service.rb#5
class Stripe::CouponService < ::Stripe::StripeService
  # You can create coupons easily via the [coupon management](https://dashboard.stripe.com/coupons) page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.
  #
  # A coupon has either a percent_off or an amount_off and currency. If you set an amount_off, that amount will be subtracted from any invoice's subtotal. For example, an invoice with a subtotal of 100 will have a final total of 0 if a coupon with an amount_off of 200 is applied to it and an invoice with a subtotal of 300 will have a final total of 100 if a coupon with an amount_off of 200 is applied to it.
  #
  # source://stripe//lib/stripe/services/coupon_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # You can delete coupons via the [coupon management](https://dashboard.stripe.com/coupons) page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can't redeem the coupon. You can also delete coupons via the API.
  #
  # source://stripe//lib/stripe/services/coupon_service.rb#14
  def delete(coupon, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your coupons.
  #
  # source://stripe//lib/stripe/services/coupon_service.rb#25
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the coupon with the given ID.
  #
  # source://stripe//lib/stripe/services/coupon_service.rb#30
  def retrieve(coupon, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.
  #
  # source://stripe//lib/stripe/services/coupon_service.rb#41
  def update(coupon, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Issue a credit note to adjust an invoice's amount after the invoice is finalized.
#
# Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
#
# source://stripe//lib/stripe/resources/credit_note.rb#8
class Stripe::CreditNote < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Marks a credit note as void. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
  #
  # source://stripe//lib/stripe/resources/credit_note.rb#72
  def void_credit_note(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Issue a credit note to adjust the amount of a finalized invoice. For a status=open invoice, a credit note reduces
    # its amount_due. For a status=paid invoice, a credit note does not affect its amount_due. Instead, it can result
    # in any combination of the following:
    #
    #
    # Refund: create a new refund (using refund_amount) or link an existing refund (using refund).
    # Customer balance credit: credit the customer's balance (using credit_amount) which will be automatically applied to their next invoice when it's finalized.
    # Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using out_of_band_amount).
    #
    #
    # For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.
    #
    # You may issue multiple credit notes for an invoice. Each credit note will increment the invoice's pre_payment_credit_notes_amount
    # or post_payment_credit_notes_amount depending on its status at the time of credit note creation.
    #
    # source://stripe//lib/stripe/resources/credit_note.rb#32
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of credit notes.
    #
    # source://stripe//lib/stripe/resources/credit_note.rb#37
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # When retrieving a credit note preview, you'll get a lines property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.
    #
    # source://stripe//lib/stripe/resources/credit_note.rb#42
    def list_preview_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/credit_note.rb#14
    def object_name; end

    # Get a preview of a credit note without creating it.
    #
    # source://stripe//lib/stripe/resources/credit_note.rb#52
    def preview(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates an existing credit note.
    #
    # source://stripe//lib/stripe/resources/credit_note.rb#62
    def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Marks a credit note as void. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
    #
    # source://stripe//lib/stripe/resources/credit_note.rb#82
    def void_credit_note(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/credit_note.rb#13
Stripe::CreditNote::OBJECT_NAME = T.let(T.unsafe(nil), String)

# The credit note line item object
#
# source://stripe//lib/stripe/resources/credit_note_line_item.rb#6
class Stripe::CreditNoteLineItem < ::Stripe::StripeObject
  class << self
    # source://stripe//lib/stripe/resources/credit_note_line_item.rb#8
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/credit_note_line_item.rb#7
Stripe::CreditNoteLineItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/credit_note_line_item_service.rb#5
class Stripe::CreditNoteLineItemService < ::Stripe::StripeService
  # When retrieving a credit note, you'll get a lines property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/services/credit_note_line_item_service.rb#7
  def list(credit_note, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/credit_note_preview_lines_service.rb#5
class Stripe::CreditNotePreviewLinesService < ::Stripe::StripeService
  # When retrieving a credit note preview, you'll get a lines property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/services/credit_note_preview_lines_service.rb#7
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/credit_note_service.rb#5
class Stripe::CreditNoteService < ::Stripe::StripeService
  # @return [CreditNoteService] a new instance of CreditNoteService
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#8
  def initialize(requestor); end

  # Issue a credit note to adjust the amount of a finalized invoice. For a status=open invoice, a credit note reduces
  # its amount_due. For a status=paid invoice, a credit note does not affect its amount_due. Instead, it can result
  # in any combination of the following:
  #
  #
  # Refund: create a new refund (using refund_amount) or link an existing refund (using refund).
  # Customer balance credit: credit the customer's balance (using credit_amount) which will be automatically applied to their next invoice when it's finalized.
  # Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using out_of_band_amount).
  #
  #
  # For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.
  #
  # You may issue multiple credit notes for an invoice. Each credit note will increment the invoice's pre_payment_credit_notes_amount
  # or post_payment_credit_notes_amount depending on its status at the time of credit note creation.
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#28
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute line_items.
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#6
  def line_items; end

  # Returns a list of credit notes.
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#39
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Get a preview of a credit note without creating it.
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#50
  def preview(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute preview_lines.
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#6
  def preview_lines; end

  # Retrieves the credit note object with the given identifier.
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#61
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing credit note.
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#72
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Marks a credit note as void. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
  #
  # source://stripe//lib/stripe/services/credit_note_service.rb#83
  def void_credit_note(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# This object represents a customer of your business. Use it to [create recurring charges](https://stripe.com/docs/invoicing/customer), [save payment](https://stripe.com/docs/payments/save-during-payment) and contact information,
# and track payments that belong to the same customer.
#
# source://stripe//lib/stripe/resources/customer.rb#7
class Stripe::Customer < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Search
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
  # funding instructions will be created. If funding instructions have already been created for a given customer, the same
  # funding instructions will be retrieved. In other words, we will return the same funding instructions each time.
  #
  # source://stripe//lib/stripe/resources/customer.rb#33
  def create_funding_instructions(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.
  #
  # source://stripe//lib/stripe/resources/customer.rb#65
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Removes the currently applied discount on a customer.
  #
  # source://stripe//lib/stripe/resources/customer.rb#75
  def delete_discount(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of PaymentMethods for a given Customer
  #
  # source://stripe//lib/stripe/resources/customer.rb#100
  def list_payment_methods(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a PaymentMethod object for a given Customer.
  #
  # source://stripe//lib/stripe/resources/customer.rb#130
  def retrieve_payment_method(payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_resource.rb#51
  def source=(value); end

  # source://stripe//lib/stripe/resources/customer.rb#187
  def test_helpers; end

  class << self
    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def balance_transactions_url(id, nested_id = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def cash_balance_transactions_url(id, nested_id = T.unsafe(nil)); end

    # Creates a new customer object.
    #
    # source://stripe//lib/stripe/resources/customer.rb#26
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_balance_transaction(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
    # funding instructions will be created. If funding instructions have already been created for a given customer, the same
    # funding instructions will be retrieved. In other words, we will return the same funding instructions each time.
    #
    # source://stripe//lib/stripe/resources/customer.rb#45
    def create_funding_instructions(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_source(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_tax_id(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.
    #
    # source://stripe//lib/stripe/resources/customer.rb#55
    def delete(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Removes the currently applied discount on a customer.
    #
    # source://stripe//lib/stripe/resources/customer.rb#85
    def delete_discount(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#77
    def delete_source(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#77
    def delete_tax_id(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#77
    def detach_source(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.
    #
    # source://stripe//lib/stripe/resources/customer.rb#95
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_balance_transactions(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_cash_balance_transactions(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of PaymentMethods for a given Customer
    #
    # source://stripe//lib/stripe/resources/customer.rb#110
    def list_payment_methods(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_sources(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_tax_ids(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/customer.rb#16
    def object_name; end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_balance_transaction(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Retrieves a customer's cash balance.
    #
    # source://stripe//lib/stripe/resources/customer.rb#120
    def retrieve_cash_balance(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_cash_balance_transaction(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Retrieves a PaymentMethod object for a given Customer.
    #
    # source://stripe//lib/stripe/resources/customer.rb#140
    def retrieve_payment_method(customer, payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_source(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_tax_id(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/customer.rb#149
    def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/customer.rb#153
    def search_auto_paging_each(params = T.unsafe(nil), opts = T.unsafe(nil), &blk); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def sources_url(id, nested_id = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def tax_ids_url(id, nested_id = T.unsafe(nil)); end

    # Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the source parameter, that becomes the customer's active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the source parameter: for each of the customer's current subscriptions, if the subscription bills automatically and is in the past_due state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the default_source for a customer will not trigger this behavior.
    #
    # This request accepts mostly the same arguments as the customer creation call.
    #
    # source://stripe//lib/stripe/resources/customer.rb#160
    def update(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#67
    def update_balance_transaction(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Changes the settings on a customer's cash balance.
    #
    # source://stripe//lib/stripe/resources/customer.rb#170
    def update_cash_balance(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#67
    def update_source(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/customer.rb#15
Stripe::Customer::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/customer.rb#191
class Stripe::Customer::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Create an incoming testmode bank transfer
  #
  # source://stripe//lib/stripe/resources/customer.rb#208
  def fund_cash_balance(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Create an incoming testmode bank transfer
    #
    # source://stripe//lib/stripe/resources/customer.rb#198
    def fund_cash_balance(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/customer.rb#193
    def resource_class; end
  end
end

# source://stripe//lib/stripe/resources/customer.rb#192
Stripe::Customer::TestHelpers::RESOURCE_CLASS = Stripe::Customer

# Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
# which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
# You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
# or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
#
# Related guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)
#
# source://stripe//lib/stripe/resources/customer_balance_transaction.rb#11
class Stripe::CustomerBalanceTransaction < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/customer_balance_transaction.rb#19
  def resource_url; end

  class << self
    # source://stripe//lib/stripe/resources/customer_balance_transaction.rb#15
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/customer_balance_transaction.rb#27
    def retrieve(_id, _opts = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/customer_balance_transaction.rb#33
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/customer_balance_transaction.rb#14
Stripe::CustomerBalanceTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/customer_balance_transaction_service.rb#5
class Stripe::CustomerBalanceTransactionService < ::Stripe::StripeService
  # Creates an immutable transaction that updates the customer's credit [balance](https://stripe.com/docs/billing/customer/balance).
  #
  # source://stripe//lib/stripe/services/customer_balance_transaction_service.rb#7
  def create(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of transactions that updated the customer's [balances](https://stripe.com/docs/billing/customer/balance).
  #
  # source://stripe//lib/stripe/services/customer_balance_transaction_service.rb#18
  def list(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a specific customer balance transaction that updated the customer's [balances](https://stripe.com/docs/billing/customer/balance).
  #
  # source://stripe//lib/stripe/services/customer_balance_transaction_service.rb#29
  def retrieve(customer, transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Most credit balance transaction fields are immutable, but you may update its description and metadata.
  #
  # source://stripe//lib/stripe/services/customer_balance_transaction_service.rb#40
  def update(customer, transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/customer_cash_balance_service.rb#5
class Stripe::CustomerCashBalanceService < ::Stripe::StripeService
  # Retrieves a customer's cash balance.
  #
  # source://stripe//lib/stripe/services/customer_cash_balance_service.rb#7
  def retrieve(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Changes the settings on a customer's cash balance.
  #
  # source://stripe//lib/stripe/services/customer_cash_balance_service.rb#18
  def update(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Customers with certain payments enabled have a cash balance, representing funds that were paid
# by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
# represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
# to payments, and refunds to the customer.
#
# source://stripe//lib/stripe/resources/customer_cash_balance_transaction.rb#9
class Stripe::CustomerCashBalanceTransaction < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/customer_cash_balance_transaction.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/customer_cash_balance_transaction.rb#10
Stripe::CustomerCashBalanceTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/customer_cash_balance_transaction_service.rb#5
class Stripe::CustomerCashBalanceTransactionService < ::Stripe::StripeService
  # Returns a list of transactions that modified the customer's [cash balance](https://stripe.com/docs/payments/customer-balance).
  #
  # source://stripe//lib/stripe/services/customer_cash_balance_transaction_service.rb#7
  def list(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a specific cash balance transaction, which updated the customer's [cash balance](https://stripe.com/docs/payments/customer-balance).
  #
  # source://stripe//lib/stripe/services/customer_cash_balance_transaction_service.rb#18
  def retrieve(customer, transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/customer_funding_instructions_service.rb#5
class Stripe::CustomerFundingInstructionsService < ::Stripe::StripeService
  # Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
  # funding instructions will be created. If funding instructions have already been created for a given customer, the same
  # funding instructions will be retrieved. In other words, we will return the same funding instructions each time.
  #
  # source://stripe//lib/stripe/services/customer_funding_instructions_service.rb#9
  def create(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/customer_payment_method_service.rb#5
class Stripe::CustomerPaymentMethodService < ::Stripe::StripeService
  # Returns a list of PaymentMethods for a given Customer
  #
  # source://stripe//lib/stripe/services/customer_payment_method_service.rb#7
  def list(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a PaymentMethod object for a given Customer.
  #
  # source://stripe//lib/stripe/services/customer_payment_method_service.rb#18
  def retrieve(customer, payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/customer_payment_source_service.rb#5
class Stripe::CustomerPaymentSourceService < ::Stripe::StripeService
  # When you create a new credit card, you must specify a customer or recipient on which to create it.
  #
  # If the card's owner has no default card, then the new card will become the default.
  # However, if the owner already has a default, then it will not change.
  # To change the default, you should [update the customer](https://stripe.com/docs/api#update_customer) to have a new default_source.
  #
  # source://stripe//lib/stripe/services/customer_payment_source_service.rb#11
  def create(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Delete a specified source for a given customer.
  #
  # source://stripe//lib/stripe/services/customer_payment_source_service.rb#22
  def delete(customer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # List sources for a specified customer.
  #
  # source://stripe//lib/stripe/services/customer_payment_source_service.rb#33
  def list(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve a specified source for a given customer.
  #
  # source://stripe//lib/stripe/services/customer_payment_source_service.rb#44
  def retrieve(customer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Update a specified source for a given customer.
  #
  # source://stripe//lib/stripe/services/customer_payment_source_service.rb#55
  def update(customer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Verify a specified bank account for a given customer.
  #
  # source://stripe//lib/stripe/services/customer_payment_source_service.rb#66
  def verify(customer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/customer_service.rb#5
class Stripe::CustomerService < ::Stripe::StripeService
  # @return [CustomerService] a new instance of CustomerService
  #
  # source://stripe//lib/stripe/services/customer_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute balance_transactions.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#6
  def balance_transactions; end

  # Returns the value of attribute cash_balance.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#6
  def cash_balance; end

  # Returns the value of attribute cash_balance_transactions.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#6
  def cash_balance_transactions; end

  # Creates a new customer object.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#20
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#25
  def delete(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Removes the currently applied discount on a customer.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#36
  def delete_discount(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute funding_instructions.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#6
  def funding_instructions; end

  # Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#47
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute payment_methods.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#6
  def payment_methods; end

  # Returns the value of attribute payment_sources.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#6
  def payment_sources; end

  # Retrieves a Customer object.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#52
  def retrieve(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Search for customers you've previously created using Stripe's [Search Query Language](https://stripe.com/docs/search#search-query-language).
  # Don't use search in read-after-write flows where strict consistency is necessary. Under normal operating
  # conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
  # to an hour behind during outages. Search functionality is not available to merchants in India.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#66
  def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute tax_ids.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#6
  def tax_ids; end

  # Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the source parameter, that becomes the customer's active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the source parameter: for each of the customer's current subscriptions, if the subscription bills automatically and is in the past_due state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the default_source for a customer will not trigger this behavior.
  #
  # This request accepts mostly the same arguments as the customer creation call.
  #
  # source://stripe//lib/stripe/services/customer_service.rb#79
  def update(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Customer Session allows you to grant Stripe's frontend SDKs (like Stripe.js) client-side access
# control over a Customer.
#
# Related guides: [Customer Session with the Payment Element](https://stripe.com/payments/accept-a-payment-deferred?platform=web&type=payment#save-payment-methods),
# [Customer Session with the Pricing Table](https://stripe.com/payments/checkout/pricing-table#customer-session),
# [Customer Session with the Buy Button](https://stripe.com/payment-links/buy-button#pass-an-existing-customer).
#
# source://stripe//lib/stripe/resources/customer_session.rb#11
class Stripe::CustomerSession < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.
    #
    # source://stripe//lib/stripe/resources/customer_session.rb#20
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/customer_session.rb#15
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/customer_session.rb#14
Stripe::CustomerSession::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/customer_session_service.rb#5
class Stripe::CustomerSessionService < ::Stripe::StripeService
  # Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.
  #
  # source://stripe//lib/stripe/services/customer_session_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/customer_tax_id_service.rb#5
class Stripe::CustomerTaxIdService < ::Stripe::StripeService
  # Creates a new tax_id object for a customer.
  #
  # source://stripe//lib/stripe/services/customer_tax_id_service.rb#7
  def create(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes an existing tax_id object.
  #
  # source://stripe//lib/stripe/services/customer_tax_id_service.rb#18
  def delete(customer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of tax IDs for a customer.
  #
  # source://stripe//lib/stripe/services/customer_tax_id_service.rb#29
  def list(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the tax_id object with the given identifier.
  #
  # source://stripe//lib/stripe/services/customer_tax_id_service.rb#40
  def retrieve(customer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# API base constants
#
# source://stripe//lib/stripe.rb#72
Stripe::DEFAULT_API_BASE = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe.rb#64
Stripe::DEFAULT_CA_BUNDLE_PATH = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe.rb#73
Stripe::DEFAULT_CONNECT_BASE = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe.rb#75
Stripe::DEFAULT_METER_EVENTS_BASE = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe.rb#74
Stripe::DEFAULT_UPLOAD_BASE = T.let(T.unsafe(nil), String)

# A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
# It contains information about when the discount began, when it will end, and what it is applied to.
#
# Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
#
# source://stripe//lib/stripe/resources/discount.rb#9
class Stripe::Discount < ::Stripe::StripeObject
  class << self
    # source://stripe//lib/stripe/resources/discount.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/discount.rb#10
Stripe::Discount::OBJECT_NAME = T.let(T.unsafe(nil), String)

# A dispute occurs when a customer questions your charge with their card issuer.
# When this happens, you have the opportunity to respond to the dispute with
# evidence that shows that the charge is legitimate.
#
# Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
#
# source://stripe//lib/stripe/resources/dispute.rb#10
class Stripe::Dispute < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.
  #
  # The status of the dispute will change from needs_response to lost. Closing a dispute is irreversible.
  #
  # source://stripe//lib/stripe/resources/dispute.rb#22
  def close(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.
    #
    # The status of the dispute will change from needs_response to lost. Closing a dispute is irreversible.
    #
    # source://stripe//lib/stripe/resources/dispute.rb#34
    def close(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your disputes.
    #
    # source://stripe//lib/stripe/resources/dispute.rb#44
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/dispute.rb#15
    def object_name; end

    # When you get a dispute, contacting your customer is always the best first step. If that doesn't work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your [dashboard](https://dashboard.stripe.com/disputes), but if you prefer, you can use the API to submit evidence programmatically.
    #
    # Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our [guide to dispute types](https://stripe.com/docs/disputes/categories).
    #
    # source://stripe//lib/stripe/resources/dispute.rb#51
    def update(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/dispute.rb#14
Stripe::Dispute::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/dispute_service.rb#5
class Stripe::DisputeService < ::Stripe::StripeService
  # Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.
  #
  # The status of the dispute will change from needs_response to lost. Closing a dispute is irreversible.
  #
  # source://stripe//lib/stripe/services/dispute_service.rb#9
  def close(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your disputes.
  #
  # source://stripe//lib/stripe/services/dispute_service.rb#20
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the dispute with the given ID.
  #
  # source://stripe//lib/stripe/services/dispute_service.rb#25
  def retrieve(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # When you get a dispute, contacting your customer is always the best first step. If that doesn't work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your [dashboard](https://dashboard.stripe.com/disputes), but if you prefer, you can use the API to submit evidence programmatically.
  #
  # Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our [guide to dispute types](https://stripe.com/docs/disputes/categories).
  #
  # source://stripe//lib/stripe/services/dispute_service.rb#38
  def update(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/entitlements/active_entitlement.rb#5
module Stripe::Entitlements; end

# An active entitlement describes access to a feature for a customer.
#
# source://stripe//lib/stripe/resources/entitlements/active_entitlement.rb#7
class Stripe::Entitlements::ActiveEntitlement < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Retrieve a list of active entitlements for a customer
    #
    # source://stripe//lib/stripe/resources/entitlements/active_entitlement.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/entitlements/active_entitlement.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/entitlements/active_entitlement.rb#10
Stripe::Entitlements::ActiveEntitlement::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/entitlements/active_entitlement_service.rb#6
class Stripe::Entitlements::ActiveEntitlementService < ::Stripe::StripeService
  # Retrieve a list of active entitlements for a customer
  #
  # source://stripe//lib/stripe/services/entitlements/active_entitlement_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve an active entitlement
  #
  # source://stripe//lib/stripe/services/entitlements/active_entitlement_service.rb#19
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A feature represents a monetizable ability or functionality in your system.
# Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.
#
# source://stripe//lib/stripe/resources/entitlements/feature.rb#8
class Stripe::Entitlements::Feature < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a feature
    #
    # source://stripe//lib/stripe/resources/entitlements/feature.rb#19
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Retrieve a list of features
    #
    # source://stripe//lib/stripe/resources/entitlements/feature.rb#29
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/entitlements/feature.rb#14
    def object_name; end

    # Update a feature's metadata or permanently deactivate it.
    #
    # source://stripe//lib/stripe/resources/entitlements/feature.rb#39
    def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/entitlements/feature.rb#13
Stripe::Entitlements::Feature::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/entitlements/feature_service.rb#6
class Stripe::Entitlements::FeatureService < ::Stripe::StripeService
  # Creates a feature
  #
  # source://stripe//lib/stripe/services/entitlements/feature_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve a list of features
  #
  # source://stripe//lib/stripe/services/entitlements/feature_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a feature
  #
  # source://stripe//lib/stripe/services/entitlements/feature_service.rb#30
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Update a feature's metadata or permanently deactivate it.
  #
  # source://stripe//lib/stripe/services/entitlements/feature_service.rb#41
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/entitlements_service.rb#5
class Stripe::EntitlementsService < ::Stripe::StripeService
  # @return [EntitlementsService] a new instance of EntitlementsService
  #
  # source://stripe//lib/stripe/services/entitlements_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute active_entitlements.
  #
  # source://stripe//lib/stripe/services/entitlements_service.rb#6
  def active_entitlements; end

  # Returns the value of attribute features.
  #
  # source://stripe//lib/stripe/services/entitlements_service.rb#6
  def features; end
end

# source://stripe//lib/stripe/resources/ephemeral_key.rb#5
class Stripe::EphemeralKey < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods

  # Invalidates a short-lived API key for a given resource.
  #
  # source://stripe//lib/stripe/resources/ephemeral_key.rb#25
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # source://stripe//lib/stripe/resources/ephemeral_key.rb#34
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Invalidates a short-lived API key for a given resource.
    #
    # source://stripe//lib/stripe/resources/ephemeral_key.rb#15
    def delete(key, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/ephemeral_key.rb#10
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/ephemeral_key.rb#9
Stripe::EphemeralKey::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/ephemeral_key_service.rb#5
class Stripe::EphemeralKeyService < ::Stripe::StripeService
  # Creates a short-lived API key for a given resource.
  #
  # source://stripe//lib/stripe/services/ephemeral_key_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Invalidates a short-lived API key for a given resource.
  #
  # source://stripe//lib/stripe/services/ephemeral_key_service.rb#18
  def delete(key, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Represents an error object as returned by the API.
#
# @see https://stripe.com/docs/api/errors
#
# source://stripe//lib/stripe/error_object.rb#7
class Stripe::ErrorObject < ::Stripe::StripeObject
  # For card errors, the ID of the failed charge.
  #
  # source://stripe//lib/stripe/error_object.rb#15
  def charge; end

  # For some errors that could be handled programmatically, a short string
  # indicating the error code reported.
  #
  # source://stripe//lib/stripe/error_object.rb#21
  def code; end

  # For card errors resulting from a card issuer decline, a short string
  # indicating the card issuer's reason for the decline if they provide one.
  #
  # source://stripe//lib/stripe/error_object.rb#27
  def decline_code; end

  # A URL to more information about the error code reported.
  #
  # source://stripe//lib/stripe/error_object.rb#32
  def doc_url; end

  # A human-readable message providing more details about the error. For card
  # errors, these messages can be shown to your users.
  #
  # source://stripe//lib/stripe/error_object.rb#38
  def message; end

  # If the error is parameter-specific, the parameter related to the error.
  # For example, you can use this to display a message near the correct form
  # field.
  #
  # source://stripe//lib/stripe/error_object.rb#45
  def param; end

  # The PaymentIntent object for errors returned on a request involving a
  # PaymentIntent.
  #
  # source://stripe//lib/stripe/error_object.rb#51
  def payment_intent; end

  # The PaymentMethod object for errors returned on a request involving a
  # PaymentMethod.
  #
  # source://stripe//lib/stripe/error_object.rb#57
  def payment_method; end

  # The SetupIntent object for errors returned on a request involving a
  # SetupIntent.
  #
  # source://stripe//lib/stripe/error_object.rb#63
  def setup_intent; end

  # The source object for errors returned on a request involving a source.
  #
  # source://stripe//lib/stripe/error_object.rb#68
  def source; end

  # The type of error returned. One of `api_error`, `card_error`,
  # `idempotency_error`, or `invalid_request_error`.
  #
  # source://stripe//lib/stripe/error_object.rb#74
  def type; end
end

# Events are our way of letting you know when something interesting happens in
# your account. When an interesting event occurs, we create a new `Event`
# object. For example, when a charge succeeds, we create a `charge.succeeded`
# event, and when an invoice payment attempt fails, we create an
# `invoice.payment_failed` event. Certain API requests might create multiple
# events. For example, if you create a new subscription for a
# customer, you receive both a `customer.subscription.created` event and a
# `charge.succeeded` event.
#
# Events occur when the state of another API resource changes. The event's data
# field embeds the resource's state at the time of the change. For
# example, a `charge.succeeded` event contains a charge, and an
# `invoice.payment_failed` event contains an invoice.
#
# As with other API resources, you can use endpoints to retrieve an
# [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
# from the API. We also have a separate
# [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
# `Event` objects directly to an endpoint on your server. You can manage
# webhooks in your
# [account settings](https://dashboard.stripe.com/account/webhooks). Learn how
# to [listen for events](https://docs.stripe.com/webhooks)
# so that your integration can automatically trigger reactions.
#
# When using [Connect](https://docs.stripe.com/connect), you can also receive event notifications
# that occur in connected accounts. For these events, there's an
# additional `account` attribute in the received `Event` object.
#
# We only guarantee access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event)
# for 30 days.
#
# source://stripe//lib/stripe/resources/event.rb#35
class Stripe::Event < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in [event object](https://docs.stripe.com/api/events/object) api_version attribute (not according to your current Stripe API version or Stripe-Version header).
    #
    # source://stripe//lib/stripe/resources/event.rb#44
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/event.rb#39
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/event.rb#38
Stripe::Event::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/thin_event.rb#13
class Stripe::EventReason
  # @return [EventReason] a new instance of EventReason
  #
  # source://stripe//lib/stripe/thin_event.rb#16
  def initialize(event_reason_payload = T.unsafe(nil)); end

  # Returns the value of attribute request.
  #
  # source://stripe//lib/stripe/thin_event.rb#14
  def request; end

  # Returns the value of attribute type.
  #
  # source://stripe//lib/stripe/thin_event.rb#14
  def type; end
end

# source://stripe//lib/stripe/thin_event.rb#4
class Stripe::EventReasonRequest
  # @return [EventReasonRequest] a new instance of EventReasonRequest
  #
  # source://stripe//lib/stripe/thin_event.rb#7
  def initialize(event_reason_request_payload = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://stripe//lib/stripe/thin_event.rb#5
  def id; end

  # Returns the value of attribute idempotency_key.
  #
  # source://stripe//lib/stripe/thin_event.rb#5
  def idempotency_key; end
end

# source://stripe//lib/stripe/services/event_service.rb#5
class Stripe::EventService < ::Stripe::StripeService
  # List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in [event object](https://docs.stripe.com/api/events/object) api_version attribute (not according to your current Stripe API version or Stripe-Version header).
  #
  # source://stripe//lib/stripe/services/event_service.rb#7
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an event if it was created in the last 30 days. Supply the unique identifier of the event, which you might have received in a webhook.
  #
  # source://stripe//lib/stripe/services/event_service.rb#12
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/event_types.rb#4
module Stripe::EventTypes
  class << self
    # source://stripe//lib/stripe/event_types.rb#5
    def thin_event_names_to_classes; end
  end
end

# `ExchangeRate` objects allow you to determine the rates that Stripe is currently
# using to convert from one currency to another. Since this number is variable
# throughout the day, there are various reasons why you might want to know the current
# rate (for example, to dynamically price an item for a user with a default
# payment in a foreign currency).
#
# Please refer to our [Exchange Rates API](https://stripe.com/docs/fx-rates) guide for more details.
#
# *[Note: this integration path is supported but no longer recommended]* Additionally,
# you can guarantee that a charge is made with an exchange rate that you expect is
# current. To do so, you must pass in the exchange_rate to charges endpoints. If the
# value is no longer up to date, the charge won't go through. Please refer to our
# [Using with charges](https://stripe.com/docs/exchange-rates) guide for more details.
#
# -----
#
# &nbsp;
#
# *This Exchange Rates API is a Beta Service and is subject to Stripe's terms of service. You may use the API solely for the purpose of transacting on Stripe. For example, the API may be queried in order to:*
#
# - *localize prices for processing payments on Stripe*
# - *reconcile Stripe transactions*
# - *determine how much money to send to a connected account*
# - *determine app fees to charge a connected account*
#
# *Using this Exchange Rates API beta for any purpose other than to transact on Stripe is strictly prohibited and constitutes a violation of Stripe's terms of service.*
#
# source://stripe//lib/stripe/resources/exchange_rate.rb#31
class Stripe::ExchangeRate < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.
    #
    # source://stripe//lib/stripe/resources/exchange_rate.rb#40
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/exchange_rate.rb#35
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/exchange_rate.rb#34
Stripe::ExchangeRate::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/exchange_rate_service.rb#5
class Stripe::ExchangeRateService < ::Stripe::StripeService
  # Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.
  #
  # source://stripe//lib/stripe/services/exchange_rate_service.rb#7
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the exchange rates from the given currency to every supported currency.
  #
  # source://stripe//lib/stripe/services/exchange_rate_service.rb#18
  def retrieve(rate_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# This object represents files hosted on Stripe's servers. You can upload
# files with the [create file](https://stripe.com/docs/api#create_file) request
# (for example, when uploading dispute evidence). Stripe also
# creates files independently (for example, the results of a [Sigma scheduled
# query](https://stripe.com/docs/api#scheduled_queries)).
#
# Related guide: [File upload guide](https://stripe.com/docs/file-upload)
#
# source://stripe//lib/stripe/resources/file.rb#12
class Stripe::File < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  class << self
    # To upload a file to Stripe, you need to send a request of type multipart/form-data. Include the file you want to upload in the request, and the parameters for creating a file.
    #
    # All of Stripe's officially supported Client libraries support sending multipart/form-data.
    #
    # source://stripe//lib/stripe/resources/file.rb#24
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.
    #
    # source://stripe//lib/stripe/resources/file.rb#41
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/file.rb#17
    def object_name; end

    # source://stripe//lib/stripe/resources/file.rb#50
    def object_name_alt; end

    # source://stripe//lib/stripe/resources/file.rb#54
    def resource_url; end
  end
end

# source://stripe//lib/stripe/resources/file.rb#16
Stripe::File::OBJECT_NAME = T.let(T.unsafe(nil), String)

# This resource can have two different object names. In latter API
# versions, only `file` is used, but since stripe-ruby may be used with
# any API version, we need to support deserializing the older
# `file_upload` object into the same class.
#
# source://stripe//lib/stripe/resources/file.rb#49
Stripe::File::OBJECT_NAME_ALT = T.let(T.unsafe(nil), String)

# To share the contents of a `File` object with non-Stripe users, you can
# create a `FileLink`. `FileLink`s contain a URL that you can use to
# retrieve the contents of the file without authentication.
#
# source://stripe//lib/stripe/resources/file_link.rb#8
class Stripe::FileLink < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a new file link object.
    #
    # source://stripe//lib/stripe/resources/file_link.rb#19
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of file links.
    #
    # source://stripe//lib/stripe/resources/file_link.rb#24
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/file_link.rb#14
    def object_name; end

    # Updates an existing file link object. Expired links can no longer be updated.
    #
    # source://stripe//lib/stripe/resources/file_link.rb#29
    def update(link, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/file_link.rb#13
Stripe::FileLink::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/file_link_service.rb#5
class Stripe::FileLinkService < ::Stripe::StripeService
  # Creates a new file link object.
  #
  # source://stripe//lib/stripe/services/file_link_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of file links.
  #
  # source://stripe//lib/stripe/services/file_link_service.rb#12
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the file link with the given ID.
  #
  # source://stripe//lib/stripe/services/file_link_service.rb#17
  def retrieve(link, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing file link object. Expired links can no longer be updated.
  #
  # source://stripe//lib/stripe/services/file_link_service.rb#28
  def update(link, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/file_service.rb#5
class Stripe::FileService < ::Stripe::StripeService
  # To upload a file to Stripe, you need to send a request of type multipart/form-data. Include the file you want to upload in the request, and the parameters for creating a file.
  #
  # All of Stripe's officially supported Client libraries support sending multipart/form-data.
  #
  # source://stripe//lib/stripe/services/file_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.
  #
  # source://stripe//lib/stripe/services/file_service.rb#20
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to [access file contents](https://stripe.com/docs/file-upload#download-file-contents).
  #
  # source://stripe//lib/stripe/services/file_service.rb#25
  def retrieve(file, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/financial_connections/account.rb#5
module Stripe::FinancialConnections; end

# A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
#
# source://stripe//lib/stripe/resources/financial_connections/account.rb#7
class Stripe::FinancialConnections::Account < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  # Disables your access to a Financial Connections Account. You will no longer be able to access data associated with the account (e.g. balances, transactions).
  #
  # source://stripe//lib/stripe/resources/financial_connections/account.rb#16
  def disconnect(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Lists all owners for a given Account
  #
  # source://stripe//lib/stripe/resources/financial_connections/account.rb#46
  def list_owners(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Refreshes the data associated with a Financial Connections Account.
  #
  # source://stripe//lib/stripe/resources/financial_connections/account.rb#66
  def refresh_account(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Subscribes to periodic refreshes of data associated with a Financial Connections Account.
  #
  # source://stripe//lib/stripe/resources/financial_connections/account.rb#86
  def subscribe(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Unsubscribes from periodic refreshes of data associated with a Financial Connections Account.
  #
  # source://stripe//lib/stripe/resources/financial_connections/account.rb#106
  def unsubscribe(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Disables your access to a Financial Connections Account. You will no longer be able to access data associated with the account (e.g. balances, transactions).
    #
    # source://stripe//lib/stripe/resources/financial_connections/account.rb#26
    def disconnect(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Financial Connections Account objects.
    #
    # source://stripe//lib/stripe/resources/financial_connections/account.rb#36
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Lists all owners for a given Account
    #
    # source://stripe//lib/stripe/resources/financial_connections/account.rb#56
    def list_owners(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/financial_connections/account.rb#11
    def object_name; end

    # Refreshes the data associated with a Financial Connections Account.
    #
    # source://stripe//lib/stripe/resources/financial_connections/account.rb#76
    def refresh_account(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Subscribes to periodic refreshes of data associated with a Financial Connections Account.
    #
    # source://stripe//lib/stripe/resources/financial_connections/account.rb#96
    def subscribe(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Unsubscribes from periodic refreshes of data associated with a Financial Connections Account.
    #
    # source://stripe//lib/stripe/resources/financial_connections/account.rb#116
    def unsubscribe(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/financial_connections/account.rb#10
Stripe::FinancialConnections::Account::OBJECT_NAME = T.let(T.unsafe(nil), String)

# Describes an owner of an account.
#
# source://stripe//lib/stripe/resources/financial_connections/account_owner.rb#7
class Stripe::FinancialConnections::AccountOwner < ::Stripe::StripeObject
  class << self
    # source://stripe//lib/stripe/resources/financial_connections/account_owner.rb#9
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/financial_connections/account_owner.rb#8
Stripe::FinancialConnections::AccountOwner::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/financial_connections/account_owner_service.rb#6
class Stripe::FinancialConnections::AccountOwnerService < ::Stripe::StripeService
  # Lists all owners for a given Account
  #
  # source://stripe//lib/stripe/services/financial_connections/account_owner_service.rb#8
  def list(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Describes a snapshot of the owners of an account at a particular point in time.
#
# source://stripe//lib/stripe/resources/financial_connections/account_ownership.rb#7
class Stripe::FinancialConnections::AccountOwnership < ::Stripe::StripeObject
  class << self
    # source://stripe//lib/stripe/resources/financial_connections/account_ownership.rb#9
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/financial_connections/account_ownership.rb#8
Stripe::FinancialConnections::AccountOwnership::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/financial_connections/account_service.rb#6
class Stripe::FinancialConnections::AccountService < ::Stripe::StripeService
  # @return [AccountService] a new instance of AccountService
  #
  # source://stripe//lib/stripe/services/financial_connections/account_service.rb#9
  def initialize(requestor); end

  # Disables your access to a Financial Connections Account. You will no longer be able to access data associated with the account (e.g. balances, transactions).
  #
  # source://stripe//lib/stripe/services/financial_connections/account_service.rb#15
  def disconnect(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Financial Connections Account objects.
  #
  # source://stripe//lib/stripe/services/financial_connections/account_service.rb#26
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute owners.
  #
  # source://stripe//lib/stripe/services/financial_connections/account_service.rb#7
  def owners; end

  # Refreshes the data associated with a Financial Connections Account.
  #
  # source://stripe//lib/stripe/services/financial_connections/account_service.rb#37
  def refresh(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an Financial Connections Account.
  #
  # source://stripe//lib/stripe/services/financial_connections/account_service.rb#48
  def retrieve(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Subscribes to periodic refreshes of data associated with a Financial Connections Account.
  #
  # source://stripe//lib/stripe/services/financial_connections/account_service.rb#59
  def subscribe(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Unsubscribes from periodic refreshes of data associated with a Financial Connections Account.
  #
  # source://stripe//lib/stripe/services/financial_connections/account_service.rb#70
  def unsubscribe(account, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
#
# source://stripe//lib/stripe/resources/financial_connections/session.rb#7
class Stripe::FinancialConnections::Session < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # To launch the Financial Connections authorization flow, create a Session. The session's client_secret can be used to launch the flow using Stripe.js.
    #
    # source://stripe//lib/stripe/resources/financial_connections/session.rb#16
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/financial_connections/session.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/financial_connections/session.rb#10
Stripe::FinancialConnections::Session::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/financial_connections/session_service.rb#6
class Stripe::FinancialConnections::SessionService < ::Stripe::StripeService
  # To launch the Financial Connections authorization flow, create a Session. The session's client_secret can be used to launch the flow using Stripe.js.
  #
  # source://stripe//lib/stripe/services/financial_connections/session_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a Financial Connections Session
  #
  # source://stripe//lib/stripe/services/financial_connections/session_service.rb#19
  def retrieve(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Transaction represents a real transaction that affects a Financial Connections Account balance.
#
# source://stripe//lib/stripe/resources/financial_connections/transaction.rb#7
class Stripe::FinancialConnections::Transaction < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Returns a list of Financial Connections Transaction objects.
    #
    # source://stripe//lib/stripe/resources/financial_connections/transaction.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/financial_connections/transaction.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/financial_connections/transaction.rb#10
Stripe::FinancialConnections::Transaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/financial_connections/transaction_service.rb#6
class Stripe::FinancialConnections::TransactionService < ::Stripe::StripeService
  # Returns a list of Financial Connections Transaction objects.
  #
  # source://stripe//lib/stripe/services/financial_connections/transaction_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a Financial Connections Transaction
  #
  # source://stripe//lib/stripe/services/financial_connections/transaction_service.rb#19
  def retrieve(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/financial_connections_service.rb#5
class Stripe::FinancialConnectionsService < ::Stripe::StripeService
  # @return [FinancialConnectionsService] a new instance of FinancialConnectionsService
  #
  # source://stripe//lib/stripe/services/financial_connections_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute accounts.
  #
  # source://stripe//lib/stripe/services/financial_connections_service.rb#6
  def accounts; end

  # Returns the value of attribute sessions.
  #
  # source://stripe//lib/stripe/services/financial_connections_service.rb#6
  def sessions; end

  # Returns the value of attribute transactions.
  #
  # source://stripe//lib/stripe/services/financial_connections_service.rb#6
  def transactions; end
end

# source://stripe//lib/stripe/resources/forwarding/request.rb#5
module Stripe::Forwarding; end

# Instructs Stripe to make a request on your behalf using the destination URL. The destination URL
# is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials
# provided during onboarding, and injects card details from the payment_method into the request.
#
# Stripe redacts all sensitive fields and headers, including authentication credentials and card numbers,
# before storing the request and response data in the forwarding Request object, which are subject to a
# 30-day retention period.
#
# You can provide a Stripe idempotency key to make sure that requests with the same key result in only one
# outbound request. The Stripe idempotency key provided should be unique and different from any idempotency
# keys provided on the underlying third-party request.
#
# Forwarding Requests are synchronous requests that return a response or time out according to
# Stripe's limits.
#
# Related guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).
#
# source://stripe//lib/stripe/resources/forwarding/request.rb#22
class Stripe::Forwarding::Request < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  class << self
    # Creates a ForwardingRequest object.
    #
    # source://stripe//lib/stripe/resources/forwarding/request.rb#32
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Lists all ForwardingRequest objects.
    #
    # source://stripe//lib/stripe/resources/forwarding/request.rb#42
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/forwarding/request.rb#27
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/forwarding/request.rb#26
Stripe::Forwarding::Request::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/forwarding/request_service.rb#6
class Stripe::Forwarding::RequestService < ::Stripe::StripeService
  # Creates a ForwardingRequest object.
  #
  # source://stripe//lib/stripe/services/forwarding/request_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Lists all ForwardingRequest objects.
  #
  # source://stripe//lib/stripe/services/forwarding/request_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a ForwardingRequest object.
  #
  # source://stripe//lib/stripe/services/forwarding/request_service.rb#30
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/forwarding_service.rb#5
class Stripe::ForwardingService < ::Stripe::StripeService
  # @return [ForwardingService] a new instance of ForwardingService
  #
  # source://stripe//lib/stripe/services/forwarding_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute requests.
  #
  # source://stripe//lib/stripe/services/forwarding_service.rb#6
  def requests; end
end

# Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) that is
# automatically applied to future invoices and payments using the `customer_balance` payment method.
# Customers can fund this balance by initiating a bank transfer to any account in the
# `financial_addresses` field.
# Related guide: [Customer balance funding instructions](https://stripe.com/docs/payments/customer-balance/funding-instructions)
#
# source://stripe//lib/stripe/resources/funding_instructions.rb#10
class Stripe::FundingInstructions < ::Stripe::APIResource
  # source://stripe//lib/stripe/resources/funding_instructions.rb#16
  def resource_url; end

  class << self
    # source://stripe//lib/stripe/resources/funding_instructions.rb#12
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/funding_instructions.rb#11
Stripe::FundingInstructions::OBJECT_NAME = T.let(T.unsafe(nil), String)

# IdempotencyError is raised in cases where an idempotency key was used
# improperly.
#
# source://stripe//lib/stripe/errors.rb#82
class Stripe::IdempotencyError < ::Stripe::StripeError; end

# source://stripe//lib/stripe/resources/identity/verification_report.rb#5
module Stripe::Identity; end

# A VerificationReport is the result of an attempt to collect and verify data from a user.
# The collection of verification checks performed is determined from the `type` and `options`
# parameters used. You can find the result of each verification check performed in the
# appropriate sub-resource: `document`, `id_number`, `selfie`.
#
# Each VerificationReport contains a copy of any data collected by the user as well as
# reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
# API. To configure and create VerificationReports, use the
# [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
#
# Related guide: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
#
# source://stripe//lib/stripe/resources/identity/verification_report.rb#17
class Stripe::Identity::VerificationReport < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # List all verification reports.
    #
    # source://stripe//lib/stripe/resources/identity/verification_report.rb#26
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/identity/verification_report.rb#21
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/identity/verification_report.rb#20
Stripe::Identity::VerificationReport::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/identity/verification_report_service.rb#6
class Stripe::Identity::VerificationReportService < ::Stripe::StripeService
  # List all verification reports.
  #
  # source://stripe//lib/stripe/services/identity/verification_report_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an existing VerificationReport
  #
  # source://stripe//lib/stripe/services/identity/verification_report_service.rb#19
  def retrieve(report, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A VerificationSession guides you through the process of collecting and verifying the identities
# of your users. It contains details about the type of verification, such as what [verification
# check](https://stripe.com/docs/identity/verification-checks) to perform. Only create one VerificationSession for
# each verification in your system.
#
# A VerificationSession transitions through [multiple
# statuses](https://stripe.com/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
# the verification flow. The VerificationSession contains the user's verified data after
# verification checks are complete.
#
# Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
#
# source://stripe//lib/stripe/resources/identity/verification_session.rb#17
class Stripe::Identity::VerificationSession < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # A VerificationSession object can be canceled when it is in requires_input [status](https://stripe.com/docs/identity/how-sessions-work).
  #
  # Once canceled, future submission attempts are disabled. This cannot be undone. [Learn more](https://stripe.com/docs/identity/verification-sessions#cancel).
  #
  # source://stripe//lib/stripe/resources/identity/verification_session.rb#30
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Redact a VerificationSession to remove all collected information from Stripe. This will redact
  # the VerificationSession and all objects related to it, including VerificationReports, Events,
  # request logs, etc.
  #
  # A VerificationSession object can be redacted when it is in requires_input or verified
  # [status](https://stripe.com/docs/identity/how-sessions-work). Redacting a VerificationSession in requires_action
  # state will automatically cancel it.
  #
  # The redaction process may take up to four days. When the redaction process is in progress, the
  # VerificationSession's redaction.status field will be set to processing; when the process is
  # finished, it will change to redacted and an identity.verification_session.redacted event
  # will be emitted.
  #
  # Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
  # fields that contain personal data will be replaced by the string [redacted] or a similar
  # placeholder. The metadata field will also be erased. Redacted objects cannot be updated or
  # used for any purpose.
  #
  # [Learn more](https://stripe.com/docs/identity/verification-sessions#redact).
  #
  # source://stripe//lib/stripe/resources/identity/verification_session.rb#96
  def redact(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # A VerificationSession object can be canceled when it is in requires_input [status](https://stripe.com/docs/identity/how-sessions-work).
    #
    # Once canceled, future submission attempts are disabled. This cannot be undone. [Learn more](https://stripe.com/docs/identity/verification-sessions#cancel).
    #
    # source://stripe//lib/stripe/resources/identity/verification_session.rb#42
    def cancel(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a VerificationSession object.
    #
    # After the VerificationSession is created, display a verification modal using the session client_secret or send your users to the session's url.
    #
    # If your API key is in test mode, verification checks won't actually process, though everything else will occur as if in live mode.
    #
    # Related guide: [Verify your users' identity documents](https://stripe.com/docs/identity/verify-identity-documents)
    #
    # source://stripe//lib/stripe/resources/identity/verification_session.rb#58
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of VerificationSessions
    #
    # source://stripe//lib/stripe/resources/identity/verification_session.rb#68
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/identity/verification_session.rb#23
    def object_name; end

    # Redact a VerificationSession to remove all collected information from Stripe. This will redact
    # the VerificationSession and all objects related to it, including VerificationReports, Events,
    # request logs, etc.
    #
    # A VerificationSession object can be redacted when it is in requires_input or verified
    # [status](https://stripe.com/docs/identity/how-sessions-work). Redacting a VerificationSession in requires_action
    # state will automatically cancel it.
    #
    # The redaction process may take up to four days. When the redaction process is in progress, the
    # VerificationSession's redaction.status field will be set to processing; when the process is
    # finished, it will change to redacted and an identity.verification_session.redacted event
    # will be emitted.
    #
    # Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
    # fields that contain personal data will be replaced by the string [redacted] or a similar
    # placeholder. The metadata field will also be erased. Redacted objects cannot be updated or
    # used for any purpose.
    #
    # [Learn more](https://stripe.com/docs/identity/verification-sessions#redact).
    #
    # source://stripe//lib/stripe/resources/identity/verification_session.rb#124
    def redact(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates a VerificationSession object.
    #
    # When the session status is requires_input, you can use this method to update the
    # verification check and options.
    #
    # source://stripe//lib/stripe/resources/identity/verification_session.rb#137
    def update(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/identity/verification_session.rb#22
Stripe::Identity::VerificationSession::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/identity/verification_session_service.rb#6
class Stripe::Identity::VerificationSessionService < ::Stripe::StripeService
  # A VerificationSession object can be canceled when it is in requires_input [status](https://stripe.com/docs/identity/how-sessions-work).
  #
  # Once canceled, future submission attempts are disabled. This cannot be undone. [Learn more](https://stripe.com/docs/identity/verification-sessions#cancel).
  #
  # source://stripe//lib/stripe/services/identity/verification_session_service.rb#10
  def cancel(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a VerificationSession object.
  #
  # After the VerificationSession is created, display a verification modal using the session client_secret or send your users to the session's url.
  #
  # If your API key is in test mode, verification checks won't actually process, though everything else will occur as if in live mode.
  #
  # Related guide: [Verify your users' identity documents](https://stripe.com/docs/identity/verify-identity-documents)
  #
  # source://stripe//lib/stripe/services/identity/verification_session_service.rb#27
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of VerificationSessions
  #
  # source://stripe//lib/stripe/services/identity/verification_session_service.rb#38
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Redact a VerificationSession to remove all collected information from Stripe. This will redact
  # the VerificationSession and all objects related to it, including VerificationReports, Events,
  # request logs, etc.
  #
  # A VerificationSession object can be redacted when it is in requires_input or verified
  # [status](https://stripe.com/docs/identity/how-sessions-work). Redacting a VerificationSession in requires_action
  # state will automatically cancel it.
  #
  # The redaction process may take up to four days. When the redaction process is in progress, the
  # VerificationSession's redaction.status field will be set to processing; when the process is
  # finished, it will change to redacted and an identity.verification_session.redacted event
  # will be emitted.
  #
  # Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
  # fields that contain personal data will be replaced by the string [redacted] or a similar
  # placeholder. The metadata field will also be erased. Redacted objects cannot be updated or
  # used for any purpose.
  #
  # [Learn more](https://stripe.com/docs/identity/verification-sessions#redact).
  #
  # source://stripe//lib/stripe/services/identity/verification_session_service.rb#67
  def redact(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a VerificationSession that was previously created.
  #
  # When the session status is requires_input, you can use this method to retrieve a valid
  # client_secret or url to allow re-submission.
  #
  # source://stripe//lib/stripe/services/identity/verification_session_service.rb#81
  def retrieve(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a VerificationSession object.
  #
  # When the session status is requires_input, you can use this method to update the
  # verification check and options.
  #
  # source://stripe//lib/stripe/services/identity/verification_session_service.rb#95
  def update(session, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/identity_service.rb#5
class Stripe::IdentityService < ::Stripe::StripeService
  # @return [IdentityService] a new instance of IdentityService
  #
  # source://stripe//lib/stripe/services/identity_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute verification_reports.
  #
  # source://stripe//lib/stripe/services/identity_service.rb#6
  def verification_reports; end

  # Returns the value of attribute verification_sessions.
  #
  # source://stripe//lib/stripe/services/identity_service.rb#6
  def verification_sessions; end
end

# source://stripe//lib/stripe/instrumentation.rb#4
class Stripe::Instrumentation
  class << self
    # Returns true if there are a non-zero number of subscribers on the given
    # topic, and false otherwise.
    #
    # @return [Boolean]
    #
    # source://stripe//lib/stripe/instrumentation.rb#84
    def any_subscribers?(topic); end

    # source://stripe//lib/stripe/instrumentation.rb#97
    def notify(topic, event); end

    # source://stripe//lib/stripe/instrumentation.rb#88
    def subscribe(topic, name = T.unsafe(nil), &block); end

    # source://stripe//lib/stripe/instrumentation.rb#93
    def unsubscribe(topic, name); end

    private

    # source://stripe//lib/stripe/instrumentation.rb#101
    def subscribers; end
  end
end

# Event emitted on `request_begin` callback.
#
# source://stripe//lib/stripe/instrumentation.rb#6
class Stripe::Instrumentation::RequestBeginEvent
  # @return [RequestBeginEvent] a new instance of RequestBeginEvent
  #
  # source://stripe//lib/stripe/instrumentation.rb#19
  def initialize(method:, path:, user_data:); end

  # Returns the value of attribute method.
  #
  # source://stripe//lib/stripe/instrumentation.rb#7
  def method; end

  # Returns the value of attribute path.
  #
  # source://stripe//lib/stripe/instrumentation.rb#7
  def path; end

  # Arbitrary user-provided data in the form of a Ruby hash that's passed
  # from subscribers on `request_begin` to subscribers on `request_end`.
  # `request_begin` subscribers can set keys which will then be available
  # in `request_end`.
  #
  # Note that all subscribers of `request_begin` share the same object, so
  # they must be careful to set unique keys so as to not conflict with data
  # set by other subscribers.
  #
  # source://stripe//lib/stripe/instrumentation.rb#17
  def user_data; end
end

# source://stripe//lib/stripe/instrumentation.rb#55
class Stripe::Instrumentation::RequestContext
  # @return [RequestContext] a new instance of RequestContext
  #
  # source://stripe//lib/stripe/instrumentation.rb#58
  def initialize(duration:, context:, header:); end

  # Returns the value of attribute body.
  #
  # source://stripe//lib/stripe/instrumentation.rb#56
  def body; end

  # Returns the value of attribute duration.
  #
  # source://stripe//lib/stripe/instrumentation.rb#56
  def duration; end

  # Returns the value of attribute header.
  #
  # source://stripe//lib/stripe/instrumentation.rb#56
  def header; end

  # Returns the value of attribute method.
  #
  # source://stripe//lib/stripe/instrumentation.rb#56
  def method; end

  # Returns the value of attribute path.
  #
  # source://stripe//lib/stripe/instrumentation.rb#56
  def path; end

  # Returns the value of attribute request_id.
  #
  # source://stripe//lib/stripe/instrumentation.rb#56
  def request_id; end
end

# Event emitted on `request_end` callback.
#
# source://stripe//lib/stripe/instrumentation.rb#28
class Stripe::Instrumentation::RequestEndEvent
  # @return [RequestEndEvent] a new instance of RequestEndEvent
  #
  # source://stripe//lib/stripe/instrumentation.rb#38
  def initialize(request_context:, response_context:, num_retries:, user_data: T.unsafe(nil)); end

  # Returns the value of attribute duration.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def duration; end

  # Returns the value of attribute http_status.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def http_status; end

  # Returns the value of attribute method.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def method; end

  # Returns the value of attribute num_retries.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def num_retries; end

  # Returns the value of attribute path.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def path; end

  # Returns the value of attribute request_body.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def request_body; end

  # Returns the value of attribute request_header.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def request_header; end

  # Returns the value of attribute request_id.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def request_id; end

  # Returns the value of attribute response_body.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def response_body; end

  # Returns the value of attribute response_header.
  #
  # source://stripe//lib/stripe/instrumentation.rb#29
  def response_header; end

  # Arbitrary user-provided data in the form of a Ruby hash that's passed
  # from subscribers on `request_begin` to subscribers on `request_end`.
  # `request_begin` subscribers can set keys which will then be available
  # in `request_end`.
  #
  # source://stripe//lib/stripe/instrumentation.rb#36
  def user_data; end
end

# This class was renamed for consistency. This alias is here for backwards
# compatibility.
#
# source://stripe//lib/stripe/instrumentation.rb#80
Stripe::Instrumentation::RequestEvent = Stripe::Instrumentation::RequestEndEvent

# source://stripe//lib/stripe/instrumentation.rb#68
class Stripe::Instrumentation::ResponseContext
  # @return [ResponseContext] a new instance of ResponseContext
  #
  # source://stripe//lib/stripe/instrumentation.rb#71
  def initialize(http_status:, response:); end

  # Returns the value of attribute body.
  #
  # source://stripe//lib/stripe/instrumentation.rb#69
  def body; end

  # Returns the value of attribute header.
  #
  # source://stripe//lib/stripe/instrumentation.rb#69
  def header; end

  # Returns the value of attribute http_status.
  #
  # source://stripe//lib/stripe/instrumentation.rb#69
  def http_status; end
end

# InvalidRequestError is raised when a request is initiated with invalid
# parameters.
#
# source://stripe//lib/stripe/errors.rb#87
class Stripe::InvalidRequestError < ::Stripe::StripeError
  # @return [InvalidRequestError] a new instance of InvalidRequestError
  #
  # source://stripe//lib/stripe/errors.rb#90
  def initialize(message, param, http_status: T.unsafe(nil), http_body: T.unsafe(nil), json_body: T.unsafe(nil), http_headers: T.unsafe(nil), code: T.unsafe(nil)); end

  # Returns the value of attribute param.
  #
  # source://stripe//lib/stripe/errors.rb#88
  def param; end

  # Sets the attribute param
  #
  # @param value the value to set the attribute param to.
  #
  # source://stripe//lib/stripe/errors.rb#88
  def param=(_arg0); end
end

# Invoices are statements of amounts owed by a customer, and are either
# generated one-off, or generated periodically from a subscription.
#
# They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
# that may be caused by subscription upgrades/downgrades (if necessary).
#
# If your invoice is configured to be billed through automatic charges,
# Stripe automatically finalizes your invoice and attempts payment. Note
# that finalizing the invoice,
# [when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does
# not happen immediately as the invoice is created. Stripe waits
# until one hour after the last webhook was successfully sent (or the last
# webhook timed out after failing). If you (and the platforms you may have
# connected to) have no webhooks configured, Stripe waits one hour after
# creation to finalize the invoice.
#
# If your invoice is configured to be billed by sending an email, then based on your
# [email settings](https://dashboard.stripe.com/account/billing/automatic),
# Stripe will email the invoice to your customer and await payment. These
# emails can contain a link to a hosted page to pay the invoice.
#
# Stripe applies any customer credit on the account before determining the
# amount due for the invoice (i.e., the amount that will be actually
# charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
# per currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts), the
# invoice is automatically marked paid, and we add the amount due to the
# customer's credit balance which is applied to the next invoice.
#
# More details on the customer's credit balance are
# [here](https://stripe.com/docs/billing/customer/balance).
#
# Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
#
# source://stripe//lib/stripe/resources/invoice.rb#37
class Stripe::Invoice < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Search
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.
  #
  # source://stripe//lib/stripe/resources/invoice.rb#53
  def add_lines(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](https://stripe.com/docs/api#void_invoice).
  #
  # source://stripe//lib/stripe/resources/invoice.rb#104
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you'd like to finalize a draft invoice manually, you can do so using this method.
  #
  # source://stripe//lib/stripe/resources/invoice.rb#114
  def finalize_invoice(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.
  #
  # source://stripe//lib/stripe/resources/invoice.rb#149
  def mark_uncollectible(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you'd like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.
  #
  # source://stripe//lib/stripe/resources/invoice.rb#169
  def pay(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.
  #
  # source://stripe//lib/stripe/resources/invoice.rb#189
  def remove_lines(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Stripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you'd like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.
  #
  # Requests made in test-mode result in no emails being sent, despite sending an invoice.sent event.
  #
  # source://stripe//lib/stripe/resources/invoice.rb#219
  def send_invoice(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.
  #
  # source://stripe//lib/stripe/resources/invoice.rb#267
  def update_lines(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](https://stripe.com/docs/api#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.
  #
  # Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you're doing business in. You might need to [issue another invoice or <a href="#create_credit_note">credit note](https://stripe.com/docs/api#create_invoice) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.
  #
  # source://stripe//lib/stripe/resources/invoice.rb#289
  def void_invoice(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#63
    def add_lines(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize the invoice, which allows you to [pay](#pay_invoice) or <a href="#send_invoice">send](https://stripe.com/docs/api#finalize_invoice) the invoice to your customers.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#73
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.
    #
    # Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer's discount.
    #
    # You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the subscription_details.proration_date parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where period[start] is equal to the subscription_details.proration_date value passed in the request.
    #
    # Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)
    #
    # source://stripe//lib/stripe/resources/invoice.rb#84
    def create_preview(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](https://stripe.com/docs/api#void_invoice).
    #
    # source://stripe//lib/stripe/resources/invoice.rb#94
    def delete(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you'd like to finalize a draft invoice manually, you can do so using this method.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#124
    def finalize_invoice(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def lines_url(id, nested_id = T.unsafe(nil)); end

    # You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#134
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_lines(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # When retrieving an upcoming invoice, you'll get a lines property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#139
    def list_upcoming_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#159
    def mark_uncollectible(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/invoice.rb#46
    def object_name; end

    # Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you'd like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#179
    def pay(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#199
    def remove_lines(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/invoice.rb#208
    def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/invoice.rb#212
    def search_auto_paging_each(params = T.unsafe(nil), opts = T.unsafe(nil), &blk); end

    # Stripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you'd like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.
    #
    # Requests made in test-mode result in no emails being sent, despite sending an invoice.sent event.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#231
    def send_invoice(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.
    #
    # Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer's discount.
    #
    # You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the subscription_details.proration_date parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where period[start] is equal to the subscription_details.proration_date value passed in the request.
    #
    # Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)
    #
    # source://stripe//lib/stripe/resources/invoice.rb#247
    def upcoming(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Draft invoices are fully editable. Once an invoice is [finalized](https://stripe.com/docs/billing/invoices/workflow#finalized),
    # monetary values, as well as collection_method, become uneditable.
    #
    # If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
    # sending reminders for, or [automatically reconciling](https://stripe.com/docs/billing/invoices/reconciliation) invoices, pass
    # auto_advance=false.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#257
    def update(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#277
    def update_lines(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](https://stripe.com/docs/api#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.
    #
    # Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you're doing business in. You might need to [issue another invoice or <a href="#create_credit_note">credit note](https://stripe.com/docs/api#create_invoice) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.
    #
    # source://stripe//lib/stripe/resources/invoice.rb#301
    def void_invoice(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/invoice.rb#45
Stripe::Invoice::OBJECT_NAME = T.let(T.unsafe(nil), String)

# Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an
# invoice by creating or updating it with an `invoice` field, at which point it will be included as
# [an invoice line item](https://stripe.com/docs/api/invoices/line_item) within
# [invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).
#
# Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
# with a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
# or credit the customer's card only at the end of a regular billing cycle. This is useful for combining several charges
# (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.
#
# Related guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
#
# source://stripe//lib/stripe/resources/invoice_item.rb#16
class Stripe::InvoiceItem < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they're not attached to invoices, or if it's attached to a draft invoice.
  #
  # source://stripe//lib/stripe/resources/invoice_item.rb#43
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.
    #
    # source://stripe//lib/stripe/resources/invoice_item.rb#28
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they're not attached to invoices, or if it's attached to a draft invoice.
    #
    # source://stripe//lib/stripe/resources/invoice_item.rb#33
    def delete(invoiceitem, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.
    #
    # source://stripe//lib/stripe/resources/invoice_item.rb#53
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/invoice_item.rb#23
    def object_name; end

    # Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it's attached to is closed.
    #
    # source://stripe//lib/stripe/resources/invoice_item.rb#58
    def update(invoiceitem, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/invoice_item.rb#22
Stripe::InvoiceItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/invoice_item_service.rb#5
class Stripe::InvoiceItemService < ::Stripe::StripeService
  # Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.
  #
  # source://stripe//lib/stripe/services/invoice_item_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they're not attached to invoices, or if it's attached to a draft invoice.
  #
  # source://stripe//lib/stripe/services/invoice_item_service.rb#18
  def delete(invoiceitem, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.
  #
  # source://stripe//lib/stripe/services/invoice_item_service.rb#29
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the invoice item with the given ID.
  #
  # source://stripe//lib/stripe/services/invoice_item_service.rb#40
  def retrieve(invoiceitem, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it's attached to is closed.
  #
  # source://stripe//lib/stripe/services/invoice_item_service.rb#51
  def update(invoiceitem, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.
#
# Each line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).
#
# source://stripe//lib/stripe/resources/invoice_line_item.rb#8
class Stripe::InvoiceLineItem < ::Stripe::StripeObject
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # source://stripe//lib/stripe/resources/invoice_line_item.rb#12
    def object_name; end

    # Updates an invoice's line item. Some fields, such as tax_amounts, only live on the invoice line item,
    # so they can only be updated through this endpoint. Other fields, such as amount, live on both the invoice
    # item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
    # Updating an invoice's line item is only possible before the invoice is finalized.
    #
    # source://stripe//lib/stripe/resources/invoice_line_item.rb#20
    def update(invoice, line_item_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/invoice_line_item.rb#11
Stripe::InvoiceLineItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/invoice_line_item_service.rb#5
class Stripe::InvoiceLineItemService < ::Stripe::StripeService
  # When retrieving an invoice, you'll get a lines property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/services/invoice_line_item_service.rb#7
  def list(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an invoice's line item. Some fields, such as tax_amounts, only live on the invoice line item,
  # so they can only be updated through this endpoint. Other fields, such as amount, live on both the invoice
  # item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
  # Updating an invoice's line item is only possible before the invoice is finalized.
  #
  # source://stripe//lib/stripe/services/invoice_line_item_service.rb#21
  def update(invoice, line_item_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Invoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates
# can be created from within the Dashboard, and they can be used over the API when creating invoices.
#
# source://stripe//lib/stripe/resources/invoice_rendering_template.rb#7
class Stripe::InvoiceRenderingTemplate < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  # Updates the status of an invoice rendering template to ‘archived' so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.
  #
  # source://stripe//lib/stripe/resources/invoice_rendering_template.rb#16
  def archive(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Unarchive an invoice rendering template so it can be used on new Stripe objects again.
  #
  # source://stripe//lib/stripe/resources/invoice_rendering_template.rb#46
  def unarchive(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Updates the status of an invoice rendering template to ‘archived' so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.
    #
    # source://stripe//lib/stripe/resources/invoice_rendering_template.rb#26
    def archive(template, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # List all templates, ordered by creation date, with the most recently created template appearing first.
    #
    # source://stripe//lib/stripe/resources/invoice_rendering_template.rb#36
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/invoice_rendering_template.rb#11
    def object_name; end

    # Unarchive an invoice rendering template so it can be used on new Stripe objects again.
    #
    # source://stripe//lib/stripe/resources/invoice_rendering_template.rb#56
    def unarchive(template, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/invoice_rendering_template.rb#10
Stripe::InvoiceRenderingTemplate::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/invoice_rendering_template_service.rb#5
class Stripe::InvoiceRenderingTemplateService < ::Stripe::StripeService
  # Updates the status of an invoice rendering template to ‘archived' so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.
  #
  # source://stripe//lib/stripe/services/invoice_rendering_template_service.rb#7
  def archive(template, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # List all templates, ordered by creation date, with the most recently created template appearing first.
  #
  # source://stripe//lib/stripe/services/invoice_rendering_template_service.rb#18
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template. Optionally, specify a version to see previous versions.
  #
  # source://stripe//lib/stripe/services/invoice_rendering_template_service.rb#29
  def retrieve(template, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Unarchive an invoice rendering template so it can be used on new Stripe objects again.
  #
  # source://stripe//lib/stripe/services/invoice_rendering_template_service.rb#40
  def unarchive(template, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/invoice_service.rb#5
class Stripe::InvoiceService < ::Stripe::StripeService
  # @return [InvoiceService] a new instance of InvoiceService
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#8
  def initialize(requestor); end

  # Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#15
  def add_lines(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize the invoice, which allows you to [pay](#pay_invoice) or <a href="#send_invoice">send](https://stripe.com/docs/api#finalize_invoice) the invoice to your customers.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#26
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.
  #
  # Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer's discount.
  #
  # You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the subscription_details.proration_date parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where period[start] is equal to the subscription_details.proration_date value passed in the request.
  #
  # Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#37
  def create_preview(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](https://stripe.com/docs/api#void_invoice).
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#48
  def delete(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you'd like to finalize a draft invoice manually, you can do so using this method.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#59
  def finalize_invoice(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute line_items.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#6
  def line_items; end

  # You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#70
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#75
  def mark_uncollectible(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you'd like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#86
  def pay(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#97
  def remove_lines(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the invoice with the given ID.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#108
  def retrieve(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Search for invoices you've previously created using Stripe's [Search Query Language](https://stripe.com/docs/search#search-query-language).
  # Don't use search in read-after-write flows where strict consistency is necessary. Under normal operating
  # conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
  # to an hour behind during outages. Search functionality is not available to merchants in India.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#122
  def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Stripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you'd like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.
  #
  # Requests made in test-mode result in no emails being sent, despite sending an invoice.sent event.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#135
  def send_invoice(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.
  #
  # Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer's discount.
  #
  # You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the subscription_details.proration_date parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where period[start] is equal to the subscription_details.proration_date value passed in the request.
  #
  # Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#152
  def upcoming(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute upcoming_lines.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#6
  def upcoming_lines; end

  # Draft invoices are fully editable. Once an invoice is [finalized](https://stripe.com/docs/billing/invoices/workflow#finalized),
  # monetary values, as well as collection_method, become uneditable.
  #
  # If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
  # sending reminders for, or [automatically reconciling](https://stripe.com/docs/billing/invoices/reconciliation) invoices, pass
  # auto_advance=false.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#168
  def update(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#179
  def update_lines(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](https://stripe.com/docs/api#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.
  #
  # Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you're doing business in. You might need to [issue another invoice or <a href="#create_credit_note">credit note](https://stripe.com/docs/api#create_invoice) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.
  #
  # source://stripe//lib/stripe/services/invoice_service.rb#192
  def void_invoice(invoice, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/invoice_upcoming_lines_service.rb#5
class Stripe::InvoiceUpcomingLinesService < ::Stripe::StripeService
  # When retrieving an upcoming invoice, you'll get a lines property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/services/invoice_upcoming_lines_service.rb#7
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/issuing/authorization.rb#5
module Stripe::Issuing; end

# When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
# object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
# purchase to be completed successfully.
#
# Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
#
# source://stripe//lib/stripe/resources/issuing/authorization.rb#11
class Stripe::Issuing::Authorization < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Gem::Deprecate
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/issuing/authorization.rb#23
  def _deprecated_approve(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/issuing/authorization.rb#51
  def _deprecated_decline(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # [Deprecated] Approves a pending Issuing Authorization object. This request should be made within the timeout window of the [real-time authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations) flow.
  # This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations#authorization-handling).
  def approve(*args, **_arg1, &block); end

  # [Deprecated] Declines a pending Issuing Authorization object. This request should be made within the timeout window of the [real time authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations) flow.
  # This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations#authorization-handling).
  def decline(*args, **_arg1, &block); end

  # source://stripe//lib/stripe/resources/issuing/authorization.rb#97
  def test_helpers; end

  class << self
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#35
    def _deprecated_approve(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/authorization.rb#63
    def _deprecated_decline(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # [Deprecated] Approves a pending Issuing Authorization object. This request should be made within the timeout window of the [real-time authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations) flow.
    # This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations#authorization-handling).
    def approve(*args, **_arg1, &block); end

    # [Deprecated] Declines a pending Issuing Authorization object. This request should be made within the timeout window of the [real time authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations) flow.
    # This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations#authorization-handling).
    def decline(*args, **_arg1, &block); end

    # Returns a list of Issuing Authorization objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#78
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/authorization.rb#17
    def object_name; end

    # Updates the specified Issuing Authorization object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#88
    def update(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/authorization.rb#16
Stripe::Issuing::Authorization::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/issuing/authorization.rb#101
class Stripe::Issuing::Authorization::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Capture a test-mode authorization.
  #
  # source://stripe//lib/stripe/resources/issuing/authorization.rb#118
  def capture(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Expire a test-mode Authorization.
  #
  # source://stripe//lib/stripe/resources/issuing/authorization.rb#148
  def expire(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Finalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.
  #
  # source://stripe//lib/stripe/resources/issuing/authorization.rb#168
  def finalize_amount(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Increment a test-mode Authorization.
  #
  # source://stripe//lib/stripe/resources/issuing/authorization.rb#188
  def increment(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.
  #
  # source://stripe//lib/stripe/resources/issuing/authorization.rb#208
  def respond(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Reverse a test-mode Authorization.
  #
  # source://stripe//lib/stripe/resources/issuing/authorization.rb#228
  def reverse(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Capture a test-mode authorization.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#108
    def capture(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Create a test-mode authorization.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#128
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Expire a test-mode Authorization.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#138
    def expire(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Finalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#158
    def finalize_amount(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Increment a test-mode Authorization.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#178
    def increment(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/authorization.rb#103
    def resource_class; end

    # Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#198
    def respond(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Reverse a test-mode Authorization.
    #
    # source://stripe//lib/stripe/resources/issuing/authorization.rb#218
    def reverse(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/authorization.rb#102
Stripe::Issuing::Authorization::TestHelpers::RESOURCE_CLASS = Stripe::Issuing::Authorization

# source://stripe//lib/stripe/services/issuing/authorization_service.rb#6
class Stripe::Issuing::AuthorizationService < ::Stripe::StripeService
  # [Deprecated] Approves a pending Issuing Authorization object. This request should be made within the timeout window of the [real-time authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations) flow.
  # This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations#authorization-handling).
  #
  # source://stripe//lib/stripe/services/issuing/authorization_service.rb#9
  def approve(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # [Deprecated] Declines a pending Issuing Authorization object. This request should be made within the timeout window of the [real time authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations) flow.
  # This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://stripe.com/docs/issuing/controls/real-time-authorizations#authorization-handling).
  #
  # source://stripe//lib/stripe/services/issuing/authorization_service.rb#21
  def decline(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Issuing Authorization objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/issuing/authorization_service.rb#32
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an Issuing Authorization object.
  #
  # source://stripe//lib/stripe/services/issuing/authorization_service.rb#43
  def retrieve(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified Issuing Authorization object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # source://stripe//lib/stripe/services/issuing/authorization_service.rb#54
  def update(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders.
#
# source://stripe//lib/stripe/resources/issuing/card.rb#7
class Stripe::Issuing::Card < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/issuing/card.rb#37
  def test_helpers; end

  class << self
    # Creates an Issuing Card object.
    #
    # source://stripe//lib/stripe/resources/issuing/card.rb#18
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Issuing Card objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/issuing/card.rb#23
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/card.rb#13
    def object_name; end

    # Updates the specified Issuing Card object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # source://stripe//lib/stripe/resources/issuing/card.rb#28
    def update(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/card.rb#12
Stripe::Issuing::Card::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/issuing/card.rb#41
class Stripe::Issuing::Card::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Updates the shipping status of the specified Issuing Card object to delivered.
  #
  # source://stripe//lib/stripe/resources/issuing/card.rb#58
  def deliver_card(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the shipping status of the specified Issuing Card object to failure.
  #
  # source://stripe//lib/stripe/resources/issuing/card.rb#78
  def fail_card(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the shipping status of the specified Issuing Card object to returned.
  #
  # source://stripe//lib/stripe/resources/issuing/card.rb#98
  def return_card(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the shipping status of the specified Issuing Card object to shipped.
  #
  # source://stripe//lib/stripe/resources/issuing/card.rb#118
  def ship_card(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the shipping status of the specified Issuing Card object to submitted. This method requires Stripe Version ‘2024-09-30.acacia' or later.
  #
  # source://stripe//lib/stripe/resources/issuing/card.rb#138
  def submit_card(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Updates the shipping status of the specified Issuing Card object to delivered.
    #
    # source://stripe//lib/stripe/resources/issuing/card.rb#48
    def deliver_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the shipping status of the specified Issuing Card object to failure.
    #
    # source://stripe//lib/stripe/resources/issuing/card.rb#68
    def fail_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/card.rb#43
    def resource_class; end

    # Updates the shipping status of the specified Issuing Card object to returned.
    #
    # source://stripe//lib/stripe/resources/issuing/card.rb#88
    def return_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the shipping status of the specified Issuing Card object to shipped.
    #
    # source://stripe//lib/stripe/resources/issuing/card.rb#108
    def ship_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the shipping status of the specified Issuing Card object to submitted. This method requires Stripe Version ‘2024-09-30.acacia' or later.
    #
    # source://stripe//lib/stripe/resources/issuing/card.rb#128
    def submit_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/card.rb#42
Stripe::Issuing::Card::TestHelpers::RESOURCE_CLASS = Stripe::Issuing::Card

# source://stripe//lib/stripe/services/issuing/card_service.rb#6
class Stripe::Issuing::CardService < ::Stripe::StripeService
  # Creates an Issuing Card object.
  #
  # source://stripe//lib/stripe/services/issuing/card_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Issuing Card objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/issuing/card_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an Issuing Card object.
  #
  # source://stripe//lib/stripe/services/issuing/card_service.rb#30
  def retrieve(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified Issuing Card object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # source://stripe//lib/stripe/services/issuing/card_service.rb#41
  def update(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
#
# Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards/virtual/issue-cards#create-cardholder)
#
# source://stripe//lib/stripe/resources/issuing/cardholder.rb#9
class Stripe::Issuing::Cardholder < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a new Issuing Cardholder object that can be issued cards.
    #
    # source://stripe//lib/stripe/resources/issuing/cardholder.rb#20
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Issuing Cardholder objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/issuing/cardholder.rb#30
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/cardholder.rb#15
    def object_name; end

    # Updates the specified Issuing Cardholder object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # source://stripe//lib/stripe/resources/issuing/cardholder.rb#40
    def update(cardholder, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/cardholder.rb#14
Stripe::Issuing::Cardholder::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/issuing/cardholder_service.rb#6
class Stripe::Issuing::CardholderService < ::Stripe::StripeService
  # Creates a new Issuing Cardholder object that can be issued cards.
  #
  # source://stripe//lib/stripe/services/issuing/cardholder_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Issuing Cardholder objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/issuing/cardholder_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an Issuing Cardholder object.
  #
  # source://stripe//lib/stripe/services/issuing/cardholder_service.rb#30
  def retrieve(cardholder, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified Issuing Cardholder object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # source://stripe//lib/stripe/services/issuing/cardholder_service.rb#41
  def update(cardholder, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
#
# Related guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)
#
# source://stripe//lib/stripe/resources/issuing/dispute.rb#9
class Stripe::Issuing::Dispute < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Submits an Issuing Dispute to the card network. Stripe validates that all evidence fields required for the dispute's reason are present. For more details, see [Dispute reasons and evidence](https://stripe.com/docs/issuing/purchases/disputes#dispute-reasons-and-evidence).
  #
  # source://stripe//lib/stripe/resources/issuing/dispute.rb#40
  def submit(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates an Issuing Dispute object. Individual pieces of evidence within the evidence object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to [Dispute reasons and evidence](https://stripe.com/docs/issuing/purchases/disputes#dispute-reasons-and-evidence) for more details about evidence requirements.
    #
    # source://stripe//lib/stripe/resources/issuing/dispute.rb#20
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Issuing Dispute objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/issuing/dispute.rb#30
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/dispute.rb#15
    def object_name; end

    # Submits an Issuing Dispute to the card network. Stripe validates that all evidence fields required for the dispute's reason are present. For more details, see [Dispute reasons and evidence](https://stripe.com/docs/issuing/purchases/disputes#dispute-reasons-and-evidence).
    #
    # source://stripe//lib/stripe/resources/issuing/dispute.rb#50
    def submit(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the specified Issuing Dispute object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the evidence object can be unset by passing in an empty string.
    #
    # source://stripe//lib/stripe/resources/issuing/dispute.rb#60
    def update(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/dispute.rb#14
Stripe::Issuing::Dispute::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/issuing/dispute_service.rb#6
class Stripe::Issuing::DisputeService < ::Stripe::StripeService
  # Creates an Issuing Dispute object. Individual pieces of evidence within the evidence object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to [Dispute reasons and evidence](https://stripe.com/docs/issuing/purchases/disputes#dispute-reasons-and-evidence) for more details about evidence requirements.
  #
  # source://stripe//lib/stripe/services/issuing/dispute_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Issuing Dispute objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/issuing/dispute_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an Issuing Dispute object.
  #
  # source://stripe//lib/stripe/services/issuing/dispute_service.rb#30
  def retrieve(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Submits an Issuing Dispute to the card network. Stripe validates that all evidence fields required for the dispute's reason are present. For more details, see [Dispute reasons and evidence](https://stripe.com/docs/issuing/purchases/disputes#dispute-reasons-and-evidence).
  #
  # source://stripe//lib/stripe/services/issuing/dispute_service.rb#41
  def submit(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified Issuing Dispute object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the evidence object can be unset by passing in an empty string.
  #
  # source://stripe//lib/stripe/services/issuing/dispute_service.rb#52
  def update(dispute, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.
#
# source://stripe//lib/stripe/resources/issuing/personalization_design.rb#7
class Stripe::Issuing::PersonalizationDesign < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#47
  def test_helpers; end

  class << self
    # Creates a personalization design object.
    #
    # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#18
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#28
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#13
    def object_name; end

    # Updates a card personalization object.
    #
    # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#38
    def update(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/personalization_design.rb#12
Stripe::Issuing::PersonalizationDesign::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/issuing/personalization_design.rb#51
class Stripe::Issuing::PersonalizationDesign::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Updates the status of the specified testmode personalization design object to active.
  #
  # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#68
  def activate(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the status of the specified testmode personalization design object to inactive.
  #
  # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#88
  def deactivate(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the status of the specified testmode personalization design object to rejected.
  #
  # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#108
  def reject(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Updates the status of the specified testmode personalization design object to active.
    #
    # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#58
    def activate(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the status of the specified testmode personalization design object to inactive.
    #
    # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#78
    def deactivate(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the status of the specified testmode personalization design object to rejected.
    #
    # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#98
    def reject(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/personalization_design.rb#53
    def resource_class; end
  end
end

# source://stripe//lib/stripe/resources/issuing/personalization_design.rb#52
Stripe::Issuing::PersonalizationDesign::TestHelpers::RESOURCE_CLASS = Stripe::Issuing::PersonalizationDesign

# source://stripe//lib/stripe/services/issuing/personalization_design_service.rb#6
class Stripe::Issuing::PersonalizationDesignService < ::Stripe::StripeService
  # Creates a personalization design object.
  #
  # source://stripe//lib/stripe/services/issuing/personalization_design_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/issuing/personalization_design_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a personalization design object.
  #
  # source://stripe//lib/stripe/services/issuing/personalization_design_service.rb#30
  def retrieve(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a card personalization object.
  #
  # source://stripe//lib/stripe/services/issuing/personalization_design_service.rb#41
  def update(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.
#
# source://stripe//lib/stripe/resources/issuing/physical_bundle.rb#7
class Stripe::Issuing::PhysicalBundle < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/issuing/physical_bundle.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/physical_bundle.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/issuing/physical_bundle.rb#10
Stripe::Issuing::PhysicalBundle::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/issuing/physical_bundle_service.rb#6
class Stripe::Issuing::PhysicalBundleService < ::Stripe::StripeService
  # Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/issuing/physical_bundle_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a physical bundle object.
  #
  # source://stripe//lib/stripe/services/issuing/physical_bundle_service.rb#19
  def retrieve(physical_bundle, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.
#
# source://stripe//lib/stripe/resources/issuing/token.rb#7
class Stripe::Issuing::Token < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Lists all Issuing Token objects for a given card.
    #
    # source://stripe//lib/stripe/resources/issuing/token.rb#17
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/token.rb#12
    def object_name; end

    # Attempts to update the specified Issuing Token object to the status specified.
    #
    # source://stripe//lib/stripe/resources/issuing/token.rb#22
    def update(token, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/token.rb#11
Stripe::Issuing::Token::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/issuing/token_service.rb#6
class Stripe::Issuing::TokenService < ::Stripe::StripeService
  # Lists all Issuing Token objects for a given card.
  #
  # source://stripe//lib/stripe/services/issuing/token_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an Issuing Token object.
  #
  # source://stripe//lib/stripe/services/issuing/token_service.rb#19
  def retrieve(token, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Attempts to update the specified Issuing Token object to the status specified.
  #
  # source://stripe//lib/stripe/services/issuing/token_service.rb#30
  def update(token, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
# your Stripe account, such as a completed purchase or refund, is represented by an Issuing
# `Transaction` object.
#
# Related guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)
#
# source://stripe//lib/stripe/resources/issuing/transaction.rb#11
class Stripe::Issuing::Transaction < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/issuing/transaction.rb#40
  def test_helpers; end

  class << self
    # Returns a list of Issuing Transaction objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/issuing/transaction.rb#21
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/transaction.rb#16
    def object_name; end

    # Updates the specified Issuing Transaction object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # source://stripe//lib/stripe/resources/issuing/transaction.rb#31
    def update(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/issuing/transaction.rb#15
Stripe::Issuing::Transaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/issuing/transaction.rb#44
class Stripe::Issuing::Transaction::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Refund a test-mode Transaction.
  #
  # source://stripe//lib/stripe/resources/issuing/transaction.rb#81
  def refund(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Allows the user to capture an arbitrary amount, also known as a forced capture.
    #
    # source://stripe//lib/stripe/resources/issuing/transaction.rb#51
    def create_force_capture(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Allows the user to refund an arbitrary amount, also known as a unlinked refund.
    #
    # source://stripe//lib/stripe/resources/issuing/transaction.rb#61
    def create_unlinked_refund(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Refund a test-mode Transaction.
    #
    # source://stripe//lib/stripe/resources/issuing/transaction.rb#71
    def refund(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/issuing/transaction.rb#46
    def resource_class; end
  end
end

# source://stripe//lib/stripe/resources/issuing/transaction.rb#45
Stripe::Issuing::Transaction::TestHelpers::RESOURCE_CLASS = Stripe::Issuing::Transaction

# source://stripe//lib/stripe/services/issuing/transaction_service.rb#6
class Stripe::Issuing::TransactionService < ::Stripe::StripeService
  # Returns a list of Issuing Transaction objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/issuing/transaction_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an Issuing Transaction object.
  #
  # source://stripe//lib/stripe/services/issuing/transaction_service.rb#19
  def retrieve(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified Issuing Transaction object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # source://stripe//lib/stripe/services/issuing/transaction_service.rb#30
  def update(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/issuing_service.rb#5
class Stripe::IssuingService < ::Stripe::StripeService
  # @return [IssuingService] a new instance of IssuingService
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute authorizations.
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#6
  def authorizations; end

  # Returns the value of attribute cardholders.
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#6
  def cardholders; end

  # Returns the value of attribute cards.
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#6
  def cards; end

  # Returns the value of attribute disputes.
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#6
  def disputes; end

  # Returns the value of attribute personalization_designs.
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#6
  def personalization_designs; end

  # Returns the value of attribute physical_bundles.
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#6
  def physical_bundles; end

  # Returns the value of attribute tokens.
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#6
  def tokens; end

  # Returns the value of attribute transactions.
  #
  # source://stripe//lib/stripe/services/issuing_service.rb#6
  def transactions; end
end

# map to the same values as the standard library's logger
#
# source://stripe//lib/stripe.rb#67
Stripe::LEVEL_DEBUG = T.let(T.unsafe(nil), Integer)

# source://stripe//lib/stripe.rb#68
Stripe::LEVEL_ERROR = T.let(T.unsafe(nil), Integer)

# source://stripe//lib/stripe.rb#69
Stripe::LEVEL_INFO = T.let(T.unsafe(nil), Integer)

# A line item.
#
# source://stripe//lib/stripe/resources/line_item.rb#6
class Stripe::LineItem < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/line_item.rb#8
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/line_item.rb#7
Stripe::LineItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/list_object.rb#4
class Stripe::ListObject < ::Stripe::StripeObject
  include ::Stripe::APIOperations::List
  include ::Stripe::APIOperations::Request
  include ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Request::ClassMethods

  # @return [ListObject] a new instance of ListObject
  #
  # source://stripe//lib/stripe/list_object.rb#27
  def initialize(*args); end

  # source://stripe//lib/stripe/list_object.rb#32
  def [](key); end

  # Iterates through each resource in all pages, making additional fetches to
  # the API as necessary.
  #
  # The default iteration direction is forwards according to Stripe's API
  # "natural" ordering direction -- newer objects first, and moving towards
  # older objects.
  #
  # However, if the initial list object was fetched using an `ending_before`
  # cursor (and only `ending_before`, `starting_after` cannot also be
  # included), the method assumes that the user is trying to iterate
  # backwards compared to natural ordering and returns results that way --
  # older objects first, and moving towards newer objects.
  #
  # Note that this method will make as many API calls as necessary to fetch
  # all resources. For more granular control, please see +each+ and
  # +next_page+.
  #
  # source://stripe//lib/stripe/list_object.rb#70
  def auto_paging_each(&blk); end

  # Iterates through each resource in the page represented by the current
  # `ListObject`.
  #
  # Note that this method makes no effort to fetch a new page when it gets to
  # the end of the current page's resources. See also +auto_paging_each+.
  #
  # source://stripe//lib/stripe/list_object.rb#50
  def each(&blk); end

  # Returns true if the page object contains no elements.
  #
  # @return [Boolean]
  #
  # source://stripe//lib/stripe/list_object.rb#92
  def empty?; end

  # This accessor allows a `ListObject` to inherit various filters that were
  # given to a predecessor. This allows for things like consistent limits,
  # expansions, and predicates as a user pages through resources.
  #
  # source://stripe//lib/stripe/list_object.rb#18
  def filters; end

  # This accessor allows a `ListObject` to inherit various filters that were
  # given to a predecessor. This allows for things like consistent limits,
  # expansions, and predicates as a user pages through resources.
  #
  # source://stripe//lib/stripe/list_object.rb#18
  def filters=(_arg0); end

  # Fetches the next page in the resource list (if there is one).
  #
  # This method will try to respect the limit of the current page. If none
  # was given, the default limit will be fetched again.
  #
  # source://stripe//lib/stripe/list_object.rb#106
  def next_page(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Fetches the previous page in the resource list (if there is one).
  #
  # This method will try to respect the limit of the current page. If none
  # was given, the default limit will be fetched again.
  #
  # source://stripe//lib/stripe/list_object.rb#120
  def previous_page(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/list_object.rb#130
  def resource_url; end

  # source://stripe//lib/stripe/list_object.rb#96
  def retrieve(id, opts = T.unsafe(nil)); end

  # Iterates through each resource in the page represented by the current
  # `ListObject` in reverse.
  #
  # source://stripe//lib/stripe/list_object.rb#137
  def reverse_each(&blk); end

  class << self
    # An empty list object. This is returned from +next+ when we know that
    # there isn't a next page in order to replicate the behavior of the API
    # when it attempts to return a page beyond the last.
    #
    # source://stripe//lib/stripe/list_object.rb#23
    def empty_list(opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/list_object.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/list_object.rb#10
Stripe::ListObject::OBJECT_NAME = T.let(T.unsafe(nil), String)

# Login Links are single-use URLs for a connected account to access the Express Dashboard. The connected account's [account.controller.stripe_dashboard.type](https://stripe.com/api/accounts/object#account_object-controller-stripe_dashboard-type) must be `express` to have access to the Express Dashboard.
#
# source://stripe//lib/stripe/resources/login_link.rb#6
class Stripe::LoginLink < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/login_link.rb#8
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/login_link.rb#12
    def retrieve(_id, _opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/login_link.rb#7
Stripe::LoginLink::OBJECT_NAME = T.let(T.unsafe(nil), String)

# A Mandate is a record of the permission that your customer gives you to debit their payment method.
#
# source://stripe//lib/stripe/resources/mandate.rb#6
class Stripe::Mandate < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/mandate.rb#8
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/mandate.rb#7
Stripe::Mandate::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/mandate_service.rb#5
class Stripe::MandateService < ::Stripe::StripeService
  # Retrieves a Mandate object.
  #
  # source://stripe//lib/stripe/services/mandate_service.rb#7
  def retrieve(mandate, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Encodes parameters into a `multipart/form-data` payload as described by RFC
# 2388:
#
#     https://tools.ietf.org/html/rfc2388
#
# This is most useful for transferring file-like objects.
#
# Parameters should be added with `#encode`. When ready, use `#body` to get
# the encoded result and `#content_type` to get the value that should be
# placed in the `Content-Type` header of a subsequent request (which includes
# a boundary value).
#
# source://stripe//lib/stripe/multipart_encoder.rb#18
class Stripe::MultipartEncoder
  # Initializes a new multipart encoder.
  #
  # @return [MultipartEncoder] a new instance of MultipartEncoder
  #
  # source://stripe//lib/stripe/multipart_encoder.rb#37
  def initialize; end

  # Gets the encoded body. `#close` must be called first.
  #
  # source://stripe//lib/stripe/multipart_encoder.rb#52
  def body; end

  # Gets the object's randomly generated boundary string.
  #
  # source://stripe//lib/stripe/multipart_encoder.rb#34
  def boundary; end

  # Finalizes the object by writing the final boundary.
  #
  # source://stripe//lib/stripe/multipart_encoder.rb#59
  def close; end

  # Gets the value including boundary that should be put into a multipart
  # request's `Content-Type`.
  #
  # source://stripe//lib/stripe/multipart_encoder.rb#72
  def content_type; end

  # Encodes a set of parameters to the body.
  #
  # Note that parameters are expected to be a hash, but a "flat" hash such
  # that complex substructures like hashes and arrays have already been
  # appropriately Stripe-encoded. Pass a complex structure through
  # `Util.flatten_params` first before handing it off to this method.
  #
  # source://stripe//lib/stripe/multipart_encoder.rb#82
  def encode(params); end

  private

  # Escapes double quotes so that the given value can be used in a
  # double-quoted string and replaces any linebreak characters with spaces.
  #
  # source://stripe//lib/stripe/multipart_encoder.rb#104
  def escape(str); end

  # source://stripe//lib/stripe/multipart_encoder.rb#108
  def write_field(name, data, filename:); end

  class << self
    # A shortcut for encoding a single set of parameters and finalizing a
    # result.
    #
    # Returns an encoded body and the value that should be set in the content
    # type header of a subsequent request.
    #
    # source://stripe//lib/stripe/multipart_encoder.rb#26
    def encode(params); end
  end
end

# source://stripe//lib/stripe/multipart_encoder.rb#19
Stripe::MultipartEncoder::MULTIPART_FORM_DATA = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/errors.rb#121
module Stripe::OAuth
  class << self
    # source://stripe//lib/stripe/oauth.rb#29
    def authorize_url(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/oauth.rb#50
    def deauthorize(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/oauth.rb#15
    def get_client_id(params = T.unsafe(nil)); end

    # source://stripe//lib/stripe/oauth.rb#42
    def token(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# InvalidClientError is raised when the client doesn't belong to you, or
# the API key mode (live or test) doesn't match the client mode. Or the
# stripe_user_id doesn't exist or isn't connected to your application.
#
# source://stripe//lib/stripe/errors.rb#141
class Stripe::OAuth::InvalidClientError < ::Stripe::OAuth::OAuthError; end

# InvalidGrantError is raised when a specified code doesn't exist, is
# expired, has been used, or doesn't belong to you; a refresh token doesn't
# exist, or doesn't belong to you; or if an API key's mode (live or test)
# doesn't match the mode of a code or refresh token.
#
# source://stripe//lib/stripe/errors.rb#148
class Stripe::OAuth::InvalidGrantError < ::Stripe::OAuth::OAuthError; end

# InvalidRequestError is raised when a code, refresh token, or grant type
# parameter is not provided, but was required.
#
# source://stripe//lib/stripe/errors.rb#153
class Stripe::OAuth::InvalidRequestError < ::Stripe::OAuth::OAuthError; end

# InvalidScopeError is raised when an invalid scope parameter is provided.
#
# source://stripe//lib/stripe/errors.rb#157
class Stripe::OAuth::InvalidScopeError < ::Stripe::OAuth::OAuthError; end

# OAuthError is raised when the OAuth API returns an error.
#
# source://stripe//lib/stripe/errors.rb#123
class Stripe::OAuth::OAuthError < ::Stripe::StripeError
  # @return [OAuthError] a new instance of OAuthError
  #
  # source://stripe//lib/stripe/errors.rb#124
  def initialize(code, description, http_status: T.unsafe(nil), http_body: T.unsafe(nil), json_body: T.unsafe(nil), http_headers: T.unsafe(nil)); end

  # source://stripe//lib/stripe/errors.rb#131
  def construct_error_object; end
end

# source://stripe//lib/stripe/oauth.rb#5
module Stripe::OAuth::OAuthOperations
  extend ::Stripe::APIOperations::Request::ClassMethods

  class << self
    # source://stripe//lib/stripe/oauth.rb#8
    def execute_resource_request(method, url, base_address, params, opts); end
  end
end

# UnsupportedGrantTypeError is raised when an unuspported grant type
# parameter is specified.
#
# source://stripe//lib/stripe/errors.rb#162
class Stripe::OAuth::UnsupportedGrantTypeError < ::Stripe::OAuth::OAuthError; end

# UnsupportedResponseTypeError is raised when an unsupported response type
# parameter is specified.
#
# source://stripe//lib/stripe/errors.rb#167
class Stripe::OAuth::UnsupportedResponseTypeError < ::Stripe::OAuth::OAuthError; end

# Represents on OAuth error returned by the OAuth API.
#
# @see https://stripe.com/docs/connect/oauth-reference#post-token-errors
#
# source://stripe//lib/stripe/error_object.rb#82
class Stripe::OAuthErrorObject < ::Stripe::StripeObject
  # A unique error code per error type.
  #
  # source://stripe//lib/stripe/error_object.rb#84
  def error; end

  # A human readable description of the error.
  #
  # source://stripe//lib/stripe/error_object.rb#89
  def error_description; end
end

# source://stripe//lib/stripe/services/oauth_service.rb#4
class Stripe::OAuthService < ::Stripe::StripeService
  # @raise [ArgumentError]
  #
  # source://stripe//lib/stripe/services/oauth_service.rb#5
  def authorize_url(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/services/oauth_service.rb#37
  def deauthorize(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/services/oauth_service.rb#24
  def token(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  private

  # @raise [AuthenticationError]
  #
  # source://stripe//lib/stripe/services/oauth_service.rb#49
  def client_id(params = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/object_types.rb#6
module Stripe::ObjectTypes
  class << self
    # source://stripe//lib/stripe/object_types.rb#7
    def object_names_to_classes; end

    # source://stripe//lib/stripe/object_types.rb#150
    def v2_object_names_to_classes; end
  end
end

# A PaymentIntent guides you through the process of collecting a payment from your customer.
# We recommend that you create exactly one PaymentIntent for each order or
# customer session in your system. You can reference the PaymentIntent later to
# see the history of payment attempts for a particular session.
#
# A PaymentIntent transitions through
# [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
# throughout its lifetime as it interfaces with Stripe.js to perform
# authentication flows and ultimately creates at most one successful charge.
#
# Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
#
# source://stripe//lib/stripe/resources/payment_intent.rb#16
class Stripe::PaymentIntent < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Search
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Manually reconcile the remaining amount for a customer_balance PaymentIntent.
  #
  # source://stripe//lib/stripe/resources/payment_intent.rb#28
  def apply_customer_balance(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # You can cancel a PaymentIntent object when it's in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_action or, [in rare cases](https://stripe.com/docs/payments/intents), processing.
  #
  # After it's canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a status of requires_capture, the remaining amount_capturable is automatically refunded.
  #
  # You can't cancel the PaymentIntent for a Checkout Session. [Expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
  #
  # source://stripe//lib/stripe/resources/payment_intent.rb#52
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Capture the funds of an existing uncaptured PaymentIntent when its status is requires_capture.
  #
  # Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.
  #
  # Learn more about [separate authorization and capture](https://stripe.com/docs/payments/capture-later).
  #
  # source://stripe//lib/stripe/resources/payment_intent.rb#80
  def capture(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Confirm that your customer intends to pay with current or provided
  # payment method. Upon confirmation, the PaymentIntent will attempt to initiate
  # a payment.
  # If the selected payment method requires additional authentication steps, the
  # PaymentIntent will transition to the requires_action status and
  # suggest additional actions via next_action. If payment fails,
  # the PaymentIntent transitions to the requires_payment_method status or the
  # canceled status if the confirmation limit is reached. If
  # payment succeeds, the PaymentIntent will transition to the succeeded
  # status (or requires_capture, if capture_method is set to manual).
  # If the confirmation_method is automatic, payment may be attempted
  # using our [client SDKs](https://stripe.com/docs/stripe-js/reference#stripe-handle-card-payment)
  # and the PaymentIntent's [client_secret](https://stripe.com/docs/api#payment_intent_object-client_secret).
  # After next_actions are handled by the client, no additional
  # confirmation is required to complete the payment.
  # If the confirmation_method is manual, all payment attempts must be
  # initiated using a secret key.
  # If any actions are required for the payment, the PaymentIntent will
  # return to the requires_confirmation state
  # after those actions are completed. Your server needs to then
  # explicitly re-confirm the PaymentIntent to initiate the next payment
  # attempt.
  # There is a variable upper limit on how many times a PaymentIntent can be confirmed.
  # After this limit is reached, any further calls to this endpoint will
  # transition the PaymentIntent to the canceled state.
  #
  # source://stripe//lib/stripe/resources/payment_intent.rb#128
  def confirm(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Perform an incremental authorization on an eligible
  # [PaymentIntent](https://stripe.com/docs/api/payment_intents/object). To be eligible, the
  # PaymentIntent's status must be requires_capture and
  # [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported)
  # must be true.
  #
  # Incremental authorizations attempt to increase the authorized amount on
  # your customer's card to the new, higher amount provided. Similar to the
  # initial authorization, incremental authorizations can be declined. A
  # single PaymentIntent can call this endpoint multiple times to further
  # increase the authorized amount.
  #
  # If the incremental authorization succeeds, the PaymentIntent object
  # returns with the updated
  # [amount](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount).
  # If the incremental authorization fails, a
  # [card_declined](https://stripe.com/docs/error-codes#card-declined) error returns, and no other
  # fields on the PaymentIntent or Charge update. The PaymentIntent
  # object remains capturable for the previously authorized amount.
  #
  # Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
  # After it's captured, a PaymentIntent can no longer be incremented.
  #
  # Learn more about [incremental authorizations](https://stripe.com/docs/terminal/features/incremental-authorizations).
  #
  # source://stripe//lib/stripe/resources/payment_intent.rb#209
  def increment_authorization(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Verifies microdeposits on a PaymentIntent object.
  #
  # source://stripe//lib/stripe/resources/payment_intent.rb#286
  def verify_microdeposits(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Manually reconcile the remaining amount for a customer_balance PaymentIntent.
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#38
    def apply_customer_balance(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # You can cancel a PaymentIntent object when it's in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_action or, [in rare cases](https://stripe.com/docs/payments/intents), processing.
    #
    # After it's canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a status of requires_capture, the remaining amount_capturable is automatically refunded.
    #
    # You can't cancel the PaymentIntent for a Checkout Session. [Expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#66
    def cancel(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Capture the funds of an existing uncaptured PaymentIntent when its status is requires_capture.
    #
    # Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.
    #
    # Learn more about [separate authorization and capture](https://stripe.com/docs/payments/capture-later).
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#94
    def capture(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Confirm that your customer intends to pay with current or provided
    # payment method. Upon confirmation, the PaymentIntent will attempt to initiate
    # a payment.
    # If the selected payment method requires additional authentication steps, the
    # PaymentIntent will transition to the requires_action status and
    # suggest additional actions via next_action. If payment fails,
    # the PaymentIntent transitions to the requires_payment_method status or the
    # canceled status if the confirmation limit is reached. If
    # payment succeeds, the PaymentIntent will transition to the succeeded
    # status (or requires_capture, if capture_method is set to manual).
    # If the confirmation_method is automatic, payment may be attempted
    # using our [client SDKs](https://stripe.com/docs/stripe-js/reference#stripe-handle-card-payment)
    # and the PaymentIntent's [client_secret](https://stripe.com/docs/api#payment_intent_object-client_secret).
    # After next_actions are handled by the client, no additional
    # confirmation is required to complete the payment.
    # If the confirmation_method is manual, all payment attempts must be
    # initiated using a secret key.
    # If any actions are required for the payment, the PaymentIntent will
    # return to the requires_confirmation state
    # after those actions are completed. Your server needs to then
    # explicitly re-confirm the PaymentIntent to initiate the next payment
    # attempt.
    # There is a variable upper limit on how many times a PaymentIntent can be confirmed.
    # After this limit is reached, any further calls to this endpoint will
    # transition the PaymentIntent to the canceled state.
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#162
    def confirm(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a PaymentIntent object.
    #
    # After the PaymentIntent is created, attach a payment method and [confirm](https://stripe.com/docs/api/payment_intents/confirm)
    # to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
    # with the Payment Intents API.
    #
    # When you use confirm=true during creation, it's equivalent to creating
    # and confirming the PaymentIntent in the same call. You can use any parameters
    # available in the [confirm API](https://stripe.com/docs/api/payment_intents/confirm) when you supply
    # confirm=true.
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#181
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Perform an incremental authorization on an eligible
    # [PaymentIntent](https://stripe.com/docs/api/payment_intents/object). To be eligible, the
    # PaymentIntent's status must be requires_capture and
    # [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported)
    # must be true.
    #
    # Incremental authorizations attempt to increase the authorized amount on
    # your customer's card to the new, higher amount provided. Similar to the
    # initial authorization, incremental authorizations can be declined. A
    # single PaymentIntent can call this endpoint multiple times to further
    # increase the authorized amount.
    #
    # If the incremental authorization succeeds, the PaymentIntent object
    # returns with the updated
    # [amount](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount).
    # If the incremental authorization fails, a
    # [card_declined](https://stripe.com/docs/error-codes#card-declined) error returns, and no other
    # fields on the PaymentIntent or Charge update. The PaymentIntent
    # object remains capturable for the previously authorized amount.
    #
    # Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
    # After it's captured, a PaymentIntent can no longer be incremented.
    #
    # Learn more about [incremental authorizations](https://stripe.com/docs/terminal/features/incremental-authorizations).
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#242
    def increment_authorization(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of PaymentIntents.
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#252
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/payment_intent.rb#23
    def object_name; end

    # source://stripe//lib/stripe/resources/payment_intent.rb#256
    def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/payment_intent.rb#265
    def search_auto_paging_each(params = T.unsafe(nil), opts = T.unsafe(nil), &blk); end

    # Updates properties on a PaymentIntent object without confirming.
    #
    # Depending on which properties you update, you might need to confirm the
    # PaymentIntent again. For example, updating the payment_method
    # always requires you to confirm the PaymentIntent again. If you prefer to
    # update and confirm at the same time, we recommend updating properties through
    # the [confirm API](https://stripe.com/docs/api/payment_intents/confirm) instead.
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#276
    def update(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Verifies microdeposits on a PaymentIntent object.
    #
    # source://stripe//lib/stripe/resources/payment_intent.rb#296
    def verify_microdeposits(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/payment_intent.rb#22
Stripe::PaymentIntent::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/payment_intent_service.rb#5
class Stripe::PaymentIntentService < ::Stripe::StripeService
  # Manually reconcile the remaining amount for a customer_balance PaymentIntent.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#7
  def apply_customer_balance(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # You can cancel a PaymentIntent object when it's in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_action or, [in rare cases](https://stripe.com/docs/payments/intents), processing.
  #
  # After it's canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a status of requires_capture, the remaining amount_capturable is automatically refunded.
  #
  # You can't cancel the PaymentIntent for a Checkout Session. [Expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#22
  def cancel(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Capture the funds of an existing uncaptured PaymentIntent when its status is requires_capture.
  #
  # Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.
  #
  # Learn more about [separate authorization and capture](https://stripe.com/docs/payments/capture-later).
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#37
  def capture(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Confirm that your customer intends to pay with current or provided
  # payment method. Upon confirmation, the PaymentIntent will attempt to initiate
  # a payment.
  # If the selected payment method requires additional authentication steps, the
  # PaymentIntent will transition to the requires_action status and
  # suggest additional actions via next_action. If payment fails,
  # the PaymentIntent transitions to the requires_payment_method status or the
  # canceled status if the confirmation limit is reached. If
  # payment succeeds, the PaymentIntent will transition to the succeeded
  # status (or requires_capture, if capture_method is set to manual).
  # If the confirmation_method is automatic, payment may be attempted
  # using our [client SDKs](https://stripe.com/docs/stripe-js/reference#stripe-handle-card-payment)
  # and the PaymentIntent's [client_secret](https://stripe.com/docs/api#payment_intent_object-client_secret).
  # After next_actions are handled by the client, no additional
  # confirmation is required to complete the payment.
  # If the confirmation_method is manual, all payment attempts must be
  # initiated using a secret key.
  # If any actions are required for the payment, the PaymentIntent will
  # return to the requires_confirmation state
  # after those actions are completed. Your server needs to then
  # explicitly re-confirm the PaymentIntent to initiate the next payment
  # attempt.
  # There is a variable upper limit on how many times a PaymentIntent can be confirmed.
  # After this limit is reached, any further calls to this endpoint will
  # transition the PaymentIntent to the canceled state.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#72
  def confirm(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a PaymentIntent object.
  #
  # After the PaymentIntent is created, attach a payment method and [confirm](https://stripe.com/docs/api/payment_intents/confirm)
  # to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
  # with the Payment Intents API.
  #
  # When you use confirm=true during creation, it's equivalent to creating
  # and confirming the PaymentIntent in the same call. You can use any parameters
  # available in the [confirm API](https://stripe.com/docs/api/payment_intents/confirm) when you supply
  # confirm=true.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#92
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Perform an incremental authorization on an eligible
  # [PaymentIntent](https://stripe.com/docs/api/payment_intents/object). To be eligible, the
  # PaymentIntent's status must be requires_capture and
  # [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported)
  # must be true.
  #
  # Incremental authorizations attempt to increase the authorized amount on
  # your customer's card to the new, higher amount provided. Similar to the
  # initial authorization, incremental authorizations can be declined. A
  # single PaymentIntent can call this endpoint multiple times to further
  # increase the authorized amount.
  #
  # If the incremental authorization succeeds, the PaymentIntent object
  # returns with the updated
  # [amount](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount).
  # If the incremental authorization fails, a
  # [card_declined](https://stripe.com/docs/error-codes#card-declined) error returns, and no other
  # fields on the PaymentIntent or Charge update. The PaymentIntent
  # object remains capturable for the previously authorized amount.
  #
  # Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
  # After it's captured, a PaymentIntent can no longer be incremented.
  #
  # Learn more about [incremental authorizations](https://stripe.com/docs/terminal/features/incremental-authorizations).
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#126
  def increment_authorization(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of PaymentIntents.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#137
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a PaymentIntent that has previously been created.
  #
  # You can retrieve a PaymentIntent client-side using a publishable key when the client_secret is in the query string.
  #
  # If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the [payment intent](https://stripe.com/docs/api#payment_intent_object) object reference for more details.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#152
  def retrieve(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Search for PaymentIntents you've previously created using Stripe's [Search Query Language](https://stripe.com/docs/search#search-query-language).
  # Don't use search in read-after-write flows where strict consistency is necessary. Under normal operating
  # conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
  # to an hour behind during outages. Search functionality is not available to merchants in India.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#166
  def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates properties on a PaymentIntent object without confirming.
  #
  # Depending on which properties you update, you might need to confirm the
  # PaymentIntent again. For example, updating the payment_method
  # always requires you to confirm the PaymentIntent again. If you prefer to
  # update and confirm at the same time, we recommend updating properties through
  # the [confirm API](https://stripe.com/docs/api/payment_intents/confirm) instead.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#183
  def update(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Verifies microdeposits on a PaymentIntent object.
  #
  # source://stripe//lib/stripe/services/payment_intent_service.rb#194
  def verify_microdeposits(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.
#
# When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.
#
# Related guide: [Payment Links API](https://stripe.com/docs/payment-links)
#
# source://stripe//lib/stripe/resources/payment_link.rb#10
class Stripe::PaymentLink < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # When retrieving a payment link, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/resources/payment_link.rb#31
  def list_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a payment link.
    #
    # source://stripe//lib/stripe/resources/payment_link.rb#21
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your payment links.
    #
    # source://stripe//lib/stripe/resources/payment_link.rb#26
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # When retrieving a payment link, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
    #
    # source://stripe//lib/stripe/resources/payment_link.rb#41
    def list_line_items(payment_link, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/payment_link.rb#16
    def object_name; end

    # Updates a payment link.
    #
    # source://stripe//lib/stripe/resources/payment_link.rb#51
    def update(payment_link, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/payment_link.rb#15
Stripe::PaymentLink::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/payment_link_line_item_service.rb#5
class Stripe::PaymentLinkLineItemService < ::Stripe::StripeService
  # When retrieving a payment link, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/services/payment_link_line_item_service.rb#7
  def list(payment_link, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/payment_link_service.rb#5
class Stripe::PaymentLinkService < ::Stripe::StripeService
  # @return [PaymentLinkService] a new instance of PaymentLinkService
  #
  # source://stripe//lib/stripe/services/payment_link_service.rb#8
  def initialize(requestor); end

  # Creates a payment link.
  #
  # source://stripe//lib/stripe/services/payment_link_service.rb#14
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute line_items.
  #
  # source://stripe//lib/stripe/services/payment_link_service.rb#6
  def line_items; end

  # Returns a list of your payment links.
  #
  # source://stripe//lib/stripe/services/payment_link_service.rb#25
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve a payment link.
  #
  # source://stripe//lib/stripe/services/payment_link_service.rb#36
  def retrieve(payment_link, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a payment link.
  #
  # source://stripe//lib/stripe/services/payment_link_service.rb#47
  def update(payment_link, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# PaymentMethod objects represent your customer's payment instruments.
# You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
# Customer objects to store instrument details for future payments.
#
# Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
#
# source://stripe//lib/stripe/resources/payment_method.rb#10
class Stripe::PaymentMethod < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Attaches a PaymentMethod object to a Customer.
  #
  # To attach a new PaymentMethod to a customer for future payments, we recommend you use a [SetupIntent](https://stripe.com/docs/api/setup_intents)
  # or a PaymentIntent with [setup_future_usage](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-setup_future_usage).
  # These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the /v1/payment_methods/:id/attach
  # endpoint without first using a SetupIntent or PaymentIntent with setup_future_usage does not optimize the PaymentMethod for
  # future use, which makes later declines and payment friction more likely.
  # See [Optimizing cards for future payments](https://stripe.com/docs/payments/payment-intents#future-usage) for more information about setting up
  # future payments.
  #
  # To use this PaymentMethod as the default for invoice or subscription payments,
  # set [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method),
  # on the Customer to the PaymentMethod's ID.
  #
  # source://stripe//lib/stripe/resources/payment_method.rb#33
  def attach(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.
  #
  # source://stripe//lib/stripe/resources/payment_method.rb#72
  def detach(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Attaches a PaymentMethod object to a Customer.
    #
    # To attach a new PaymentMethod to a customer for future payments, we recommend you use a [SetupIntent](https://stripe.com/docs/api/setup_intents)
    # or a PaymentIntent with [setup_future_usage](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-setup_future_usage).
    # These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the /v1/payment_methods/:id/attach
    # endpoint without first using a SetupIntent or PaymentIntent with setup_future_usage does not optimize the PaymentMethod for
    # future use, which makes later declines and payment friction more likely.
    # See [Optimizing cards for future payments](https://stripe.com/docs/payments/payment-intents#future-usage) for more information about setting up
    # future payments.
    #
    # To use this PaymentMethod as the default for invoice or subscription payments,
    # set [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method),
    # on the Customer to the PaymentMethod's ID.
    #
    # source://stripe//lib/stripe/resources/payment_method.rb#55
    def attach(payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a PaymentMethod object. Read the [Stripe.js reference](https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method) to learn how to create PaymentMethods via Stripe.js.
    #
    # Instead of creating a PaymentMethod directly, we recommend using the [PaymentIntents API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent](https://stripe.com/docs/payments/accept-a-payment) API to collect payment method details ahead of a future payment.
    #
    # source://stripe//lib/stripe/resources/payment_method.rb#67
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.
    #
    # source://stripe//lib/stripe/resources/payment_method.rb#82
    def detach(payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the [List a Customer's PaymentMethods](https://stripe.com/docs/api/payment_methods/customer_list) API instead.
    #
    # source://stripe//lib/stripe/resources/payment_method.rb#92
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/payment_method.rb#16
    def object_name; end

    # Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.
    #
    # source://stripe//lib/stripe/resources/payment_method.rb#97
    def update(payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/payment_method.rb#15
Stripe::PaymentMethod::OBJECT_NAME = T.let(T.unsafe(nil), String)

# PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.
#
# There are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):
#
# **Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.
#
# **Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.
#
# Child configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account's associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.
#
# Related guides:
# - [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations)
# - [Multiple configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs)
# - [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)
#
# source://stripe//lib/stripe/resources/payment_method_configuration.rb#19
class Stripe::PaymentMethodConfiguration < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a payment method configuration
    #
    # source://stripe//lib/stripe/resources/payment_method_configuration.rb#30
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # List payment method configurations
    #
    # source://stripe//lib/stripe/resources/payment_method_configuration.rb#40
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/payment_method_configuration.rb#25
    def object_name; end

    # Update payment method configuration
    #
    # source://stripe//lib/stripe/resources/payment_method_configuration.rb#50
    def update(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/payment_method_configuration.rb#24
Stripe::PaymentMethodConfiguration::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/payment_method_configuration_service.rb#5
class Stripe::PaymentMethodConfigurationService < ::Stripe::StripeService
  # Creates a payment method configuration
  #
  # source://stripe//lib/stripe/services/payment_method_configuration_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # List payment method configurations
  #
  # source://stripe//lib/stripe/services/payment_method_configuration_service.rb#18
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve payment method configuration
  #
  # source://stripe//lib/stripe/services/payment_method_configuration_service.rb#29
  def retrieve(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Update payment method configuration
  #
  # source://stripe//lib/stripe/services/payment_method_configuration_service.rb#40
  def update(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A payment method domain represents a web domain that you have registered with Stripe.
# Stripe Elements use registered payment method domains to control where certain payment methods are shown.
#
# Related guide: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
#
# source://stripe//lib/stripe/resources/payment_method_domain.rb#9
class Stripe::PaymentMethodDomain < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren't satisfied when the domain was created, the payment method will be inactive on the domain.
  # The payment method doesn't appear in Elements for this domain until it is active.
  #
  # To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.
  #
  # Related guides: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
  #
  # source://stripe//lib/stripe/resources/payment_method_domain.rb#55
  def validate(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a payment method domain.
    #
    # source://stripe//lib/stripe/resources/payment_method_domain.rb#20
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Lists the details of existing payment method domains.
    #
    # source://stripe//lib/stripe/resources/payment_method_domain.rb#30
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/payment_method_domain.rb#15
    def object_name; end

    # Updates an existing payment method domain.
    #
    # source://stripe//lib/stripe/resources/payment_method_domain.rb#40
    def update(payment_method_domain, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren't satisfied when the domain was created, the payment method will be inactive on the domain.
    # The payment method doesn't appear in Elements for this domain until it is active.
    #
    # To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.
    #
    # Related guides: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
    #
    # source://stripe//lib/stripe/resources/payment_method_domain.rb#70
    def validate(payment_method_domain, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/payment_method_domain.rb#14
Stripe::PaymentMethodDomain::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/payment_method_domain_service.rb#5
class Stripe::PaymentMethodDomainService < ::Stripe::StripeService
  # Creates a payment method domain.
  #
  # source://stripe//lib/stripe/services/payment_method_domain_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Lists the details of existing payment method domains.
  #
  # source://stripe//lib/stripe/services/payment_method_domain_service.rb#18
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing payment method domain.
  #
  # source://stripe//lib/stripe/services/payment_method_domain_service.rb#29
  def retrieve(payment_method_domain, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing payment method domain.
  #
  # source://stripe//lib/stripe/services/payment_method_domain_service.rb#40
  def update(payment_method_domain, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren't satisfied when the domain was created, the payment method will be inactive on the domain.
  # The payment method doesn't appear in Elements for this domain until it is active.
  #
  # To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.
  #
  # Related guides: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
  #
  # source://stripe//lib/stripe/services/payment_method_domain_service.rb#56
  def validate(payment_method_domain, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/payment_method_service.rb#5
class Stripe::PaymentMethodService < ::Stripe::StripeService
  # Attaches a PaymentMethod object to a Customer.
  #
  # To attach a new PaymentMethod to a customer for future payments, we recommend you use a [SetupIntent](https://stripe.com/docs/api/setup_intents)
  # or a PaymentIntent with [setup_future_usage](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-setup_future_usage).
  # These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the /v1/payment_methods/:id/attach
  # endpoint without first using a SetupIntent or PaymentIntent with setup_future_usage does not optimize the PaymentMethod for
  # future use, which makes later declines and payment friction more likely.
  # See [Optimizing cards for future payments](https://stripe.com/docs/payments/payment-intents#future-usage) for more information about setting up
  # future payments.
  #
  # To use this PaymentMethod as the default for invoice or subscription payments,
  # set [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method),
  # on the Customer to the PaymentMethod's ID.
  #
  # source://stripe//lib/stripe/services/payment_method_service.rb#19
  def attach(payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a PaymentMethod object. Read the [Stripe.js reference](https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method) to learn how to create PaymentMethods via Stripe.js.
  #
  # Instead of creating a PaymentMethod directly, we recommend using the [PaymentIntents API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent](https://stripe.com/docs/payments/accept-a-payment) API to collect payment method details ahead of a future payment.
  #
  # source://stripe//lib/stripe/services/payment_method_service.rb#32
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.
  #
  # source://stripe//lib/stripe/services/payment_method_service.rb#43
  def detach(payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the [List a Customer's PaymentMethods](https://stripe.com/docs/api/payment_methods/customer_list) API instead.
  #
  # source://stripe//lib/stripe/services/payment_method_service.rb#54
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use [Retrieve a Customer's PaymentMethods](https://stripe.com/docs/api/payment_methods/customer)
  #
  # source://stripe//lib/stripe/services/payment_method_service.rb#65
  def retrieve(payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.
  #
  # source://stripe//lib/stripe/services/payment_method_service.rb#76
  def update(payment_method, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A `Payout` object is created when you receive funds from Stripe, or when you
# initiate a payout to either a bank account or debit card of a [connected
# Stripe account](https://stripe.com/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
# and list all payouts. Payouts are made on [varying
# schedules](https://stripe.com/docs/connect/manage-payout-schedule), depending on your country and
# industry.
#
# Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
#
# source://stripe//lib/stripe/resources/payout.rb#13
class Stripe::Payout < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # You can cancel a previously created payout if its status is pending. Stripe refunds the funds to your available balance. You can't cancel automatic Stripe payouts.
  #
  # source://stripe//lib/stripe/resources/payout.rb#24
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the pending status, use /v1/payouts/:id/cancel instead.
  #
  # By requesting a reversal through /v1/payouts/:id/reverse, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.
  #
  # source://stripe//lib/stripe/resources/payout.rb#60
  def reverse(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # You can cancel a previously created payout if its status is pending. Stripe refunds the funds to your available balance. You can't cancel automatic Stripe payouts.
    #
    # source://stripe//lib/stripe/resources/payout.rb#34
    def cancel(payout, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # To send funds to your own bank account, create a new payout object. Your [Stripe balance](https://stripe.com/docs/api#balance) must cover the payout amount. If it doesn't, you receive an “Insufficient Funds” error.
    #
    # If your API key is in test mode, money won't actually be sent, though every other action occurs as if you're in live mode.
    #
    # If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The [balance object](https://stripe.com/docs/api#balance_object) details available and pending amounts by source type.
    #
    # source://stripe//lib/stripe/resources/payout.rb#48
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.
    #
    # source://stripe//lib/stripe/resources/payout.rb#53
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/payout.rb#19
    def object_name; end

    # Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the pending status, use /v1/payouts/:id/cancel instead.
    #
    # By requesting a reversal through /v1/payouts/:id/reverse, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.
    #
    # source://stripe//lib/stripe/resources/payout.rb#72
    def reverse(payout, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the specified payout by setting the values of the parameters you pass. We don't change parameters that you don't provide. This request only accepts the metadata as arguments.
    #
    # source://stripe//lib/stripe/resources/payout.rb#82
    def update(payout, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/payout.rb#18
Stripe::Payout::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/payout_service.rb#5
class Stripe::PayoutService < ::Stripe::StripeService
  # You can cancel a previously created payout if its status is pending. Stripe refunds the funds to your available balance. You can't cancel automatic Stripe payouts.
  #
  # source://stripe//lib/stripe/services/payout_service.rb#7
  def cancel(payout, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # To send funds to your own bank account, create a new payout object. Your [Stripe balance](https://stripe.com/docs/api#balance) must cover the payout amount. If it doesn't, you receive an “Insufficient Funds” error.
  #
  # If your API key is in test mode, money won't actually be sent, though every other action occurs as if you're in live mode.
  #
  # If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The [balance object](https://stripe.com/docs/api#balance_object) details available and pending amounts by source type.
  #
  # source://stripe//lib/stripe/services/payout_service.rb#22
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.
  #
  # source://stripe//lib/stripe/services/payout_service.rb#27
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.
  #
  # source://stripe//lib/stripe/services/payout_service.rb#32
  def retrieve(payout, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the pending status, use /v1/payouts/:id/cancel instead.
  #
  # By requesting a reversal through /v1/payouts/:id/reverse, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.
  #
  # source://stripe//lib/stripe/services/payout_service.rb#45
  def reverse(payout, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified payout by setting the values of the parameters you pass. We don't change parameters that you don't provide. This request only accepts the metadata as arguments.
  #
  # source://stripe//lib/stripe/services/payout_service.rb#56
  def update(payout, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# PermissionError is raised in cases where access was attempted on a resource
# that wasn't allowed.
#
# source://stripe//lib/stripe/errors.rb#101
class Stripe::PermissionError < ::Stripe::StripeError; end

# This is an object representing a person associated with a Stripe account.
#
# A platform cannot access a person for an account where [account.controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
#
# See the [Standard onboarding](https://stripe.com/connect/standard-accounts) or [Express onboarding](https://stripe.com/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](https://stripe.com/connect/handling-api-verification#person-information).
#
# source://stripe//lib/stripe/resources/person.rb#10
class Stripe::Person < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/person.rb#18
  def resource_url; end

  class << self
    # source://stripe//lib/stripe/resources/person.rb#14
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/person.rb#26
    def retrieve(_id, _opts = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/person.rb#32
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/person.rb#13
Stripe::Person::OBJECT_NAME = T.let(T.unsafe(nil), String)

# You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
#
# Plans define the base price, currency, and billing cycle for recurring purchases of products.
# [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
#
# For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
#
# Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
#
# source://stripe//lib/stripe/resources/plan.rb#13
class Stripe::Plan < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Deleting plans means new subscribers can't be added. Existing subscribers aren't affected.
  #
  # source://stripe//lib/stripe/resources/plan.rb#40
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
    #
    # source://stripe//lib/stripe/resources/plan.rb#25
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deleting plans means new subscribers can't be added. Existing subscribers aren't affected.
    #
    # source://stripe//lib/stripe/resources/plan.rb#30
    def delete(plan, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your plans.
    #
    # source://stripe//lib/stripe/resources/plan.rb#50
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/plan.rb#20
    def object_name; end

    # Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan's ID, amount, currency, or billing cycle.
    #
    # source://stripe//lib/stripe/resources/plan.rb#55
    def update(plan, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/plan.rb#19
Stripe::Plan::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/plan_service.rb#5
class Stripe::PlanService < ::Stripe::StripeService
  # You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
  #
  # source://stripe//lib/stripe/services/plan_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deleting plans means new subscribers can't be added. Existing subscribers aren't affected.
  #
  # source://stripe//lib/stripe/services/plan_service.rb#12
  def delete(plan, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your plans.
  #
  # source://stripe//lib/stripe/services/plan_service.rb#23
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the plan with the given ID.
  #
  # source://stripe//lib/stripe/services/plan_service.rb#28
  def retrieve(plan, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan's ID, amount, currency, or billing cycle.
  #
  # source://stripe//lib/stripe/services/plan_service.rb#39
  def update(plan, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
# [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
#
# For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
#
# Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
#
# source://stripe//lib/stripe/resources/price.rb#11
class Stripe::Price < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Search
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a new price for an existing product. The price can be recurring or one-time.
    #
    # source://stripe//lib/stripe/resources/price.rb#23
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your active prices, excluding [inline prices](https://stripe.com/docs/products-prices/pricing-models#inline-pricing). For the list of inactive prices, set active to false.
    #
    # source://stripe//lib/stripe/resources/price.rb#28
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/price.rb#18
    def object_name; end

    # source://stripe//lib/stripe/resources/price.rb#32
    def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/price.rb#36
    def search_auto_paging_each(params = T.unsafe(nil), opts = T.unsafe(nil), &blk); end

    # Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.
    #
    # source://stripe//lib/stripe/resources/price.rb#41
    def update(price, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/price.rb#17
Stripe::Price::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/price_service.rb#5
class Stripe::PriceService < ::Stripe::StripeService
  # Creates a new price for an existing product. The price can be recurring or one-time.
  #
  # source://stripe//lib/stripe/services/price_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your active prices, excluding [inline prices](https://stripe.com/docs/products-prices/pricing-models#inline-pricing). For the list of inactive prices, set active to false.
  #
  # source://stripe//lib/stripe/services/price_service.rb#12
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the price with the given ID.
  #
  # source://stripe//lib/stripe/services/price_service.rb#17
  def retrieve(price, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Search for prices you've previously created using Stripe's [Search Query Language](https://stripe.com/docs/search#search-query-language).
  # Don't use search in read-after-write flows where strict consistency is necessary. Under normal operating
  # conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
  # to an hour behind during outages. Search functionality is not available to merchants in India.
  #
  # source://stripe//lib/stripe/services/price_service.rb#31
  def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.
  #
  # source://stripe//lib/stripe/services/price_service.rb#42
  def update(price, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Products describe the specific goods or services you offer to your customers.
# For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
# They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
#
# Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
# [share a Payment Link](https://stripe.com/docs/payment-links),
# [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
# and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
#
# source://stripe//lib/stripe/resources/product.rb#13
class Stripe::Product < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Search
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with type=good is only possible if it has no SKUs associated with it.
  #
  # source://stripe//lib/stripe/resources/product.rb#44
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a new product object.
    #
    # source://stripe//lib/stripe/resources/product.rb#29
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_feature(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with type=good is only possible if it has no SKUs associated with it.
    #
    # source://stripe//lib/stripe/resources/product.rb#34
    def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#77
    def delete_feature(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def features_url(id, nested_id = T.unsafe(nil)); end

    # Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.
    #
    # source://stripe//lib/stripe/resources/product.rb#54
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_features(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/product.rb#22
    def object_name; end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_feature(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/product.rb#58
    def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/product.rb#62
    def search_auto_paging_each(params = T.unsafe(nil), opts = T.unsafe(nil), &blk); end

    # Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # source://stripe//lib/stripe/resources/product.rb#67
    def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/product.rb#21
Stripe::Product::OBJECT_NAME = T.let(T.unsafe(nil), String)

# A product_feature represents an attachment between a feature and a product.
# When a product is purchased that has a feature attached, Stripe will create an entitlement to the feature for the purchasing customer.
#
# source://stripe//lib/stripe/resources/product_feature.rb#7
class Stripe::ProductFeature < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/product_feature.rb#9
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/product_feature.rb#8
Stripe::ProductFeature::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/product_feature_service.rb#5
class Stripe::ProductFeatureService < ::Stripe::StripeService
  # Creates a product_feature, which represents a feature attachment to a product
  #
  # source://stripe//lib/stripe/services/product_feature_service.rb#7
  def create(product, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes the feature attachment to a product
  #
  # source://stripe//lib/stripe/services/product_feature_service.rb#18
  def delete(product, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieve a list of features for a product
  #
  # source://stripe//lib/stripe/services/product_feature_service.rb#29
  def list(product, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a product_feature, which represents a feature attachment to a product
  #
  # source://stripe//lib/stripe/services/product_feature_service.rb#40
  def retrieve(product, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/product_service.rb#5
class Stripe::ProductService < ::Stripe::StripeService
  # @return [ProductService] a new instance of ProductService
  #
  # source://stripe//lib/stripe/services/product_service.rb#8
  def initialize(requestor); end

  # Creates a new product object.
  #
  # source://stripe//lib/stripe/services/product_service.rb#14
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with type=good is only possible if it has no SKUs associated with it.
  #
  # source://stripe//lib/stripe/services/product_service.rb#19
  def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute features.
  #
  # source://stripe//lib/stripe/services/product_service.rb#6
  def features; end

  # Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.
  #
  # source://stripe//lib/stripe/services/product_service.rb#30
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.
  #
  # source://stripe//lib/stripe/services/product_service.rb#35
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Search for products you've previously created using Stripe's [Search Query Language](https://stripe.com/docs/search#search-query-language).
  # Don't use search in read-after-write flows where strict consistency is necessary. Under normal operating
  # conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
  # to an hour behind during outages. Search functionality is not available to merchants in India.
  #
  # source://stripe//lib/stripe/services/product_service.rb#49
  def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # source://stripe//lib/stripe/services/product_service.rb#60
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to
# create multiple codes for a single coupon.
#
# source://stripe//lib/stripe/resources/promotion_code.rb#7
class Stripe::PromotionCode < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.
    #
    # source://stripe//lib/stripe/resources/promotion_code.rb#18
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your promotion codes.
    #
    # source://stripe//lib/stripe/resources/promotion_code.rb#23
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/promotion_code.rb#13
    def object_name; end

    # Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.
    #
    # source://stripe//lib/stripe/resources/promotion_code.rb#28
    def update(promotion_code, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/promotion_code.rb#12
Stripe::PromotionCode::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/promotion_code_service.rb#5
class Stripe::PromotionCodeService < ::Stripe::StripeService
  # A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.
  #
  # source://stripe//lib/stripe/services/promotion_code_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your promotion codes.
  #
  # source://stripe//lib/stripe/services/promotion_code_service.rb#18
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing code use [list](https://stripe.com/docs/api/promotion_codes/list) with the desired code.
  #
  # source://stripe//lib/stripe/services/promotion_code_service.rb#29
  def retrieve(promotion_code, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.
  #
  # source://stripe//lib/stripe/services/promotion_code_service.rb#40
  def update(promotion_code, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Quote is a way to model prices that you'd like to provide to a customer.
# Once accepted, it will automatically create an invoice, subscription or subscription schedule.
#
# source://stripe//lib/stripe/resources/quote.rb#7
class Stripe::Quote < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Accepts the specified quote.
  #
  # source://stripe//lib/stripe/resources/quote.rb#18
  def accept(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Cancels the quote.
  #
  # source://stripe//lib/stripe/resources/quote.rb#38
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Finalizes the quote.
  #
  # source://stripe//lib/stripe/resources/quote.rb#63
  def finalize_quote(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # When retrieving a quote, there is an includable [computed.upfront.line_items](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.
  #
  # source://stripe//lib/stripe/resources/quote.rb#88
  def list_computed_upfront_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # When retrieving a quote, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/resources/quote.rb#108
  def list_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Download the PDF for a finalized quote. Explanation for special handling can be found [here](https://docs.stripe.com/quotes/overview#quote_pdf)
  #
  # source://stripe//lib/stripe/resources/quote.rb#128
  def pdf(params = T.unsafe(nil), opts = T.unsafe(nil), &read_body_chunk_block); end

  class << self
    # Accepts the specified quote.
    #
    # source://stripe//lib/stripe/resources/quote.rb#28
    def accept(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Cancels the quote.
    #
    # source://stripe//lib/stripe/resources/quote.rb#48
    def cancel(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # A quote models prices and services for a customer. Default options for header, description, footer, and expires_at can be set in the dashboard via the [quote template](https://dashboard.stripe.com/settings/billing/quote).
    #
    # source://stripe//lib/stripe/resources/quote.rb#58
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Finalizes the quote.
    #
    # source://stripe//lib/stripe/resources/quote.rb#73
    def finalize_quote(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your quotes.
    #
    # source://stripe//lib/stripe/resources/quote.rb#83
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # When retrieving a quote, there is an includable [computed.upfront.line_items](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.
    #
    # source://stripe//lib/stripe/resources/quote.rb#98
    def list_computed_upfront_line_items(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # When retrieving a quote, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
    #
    # source://stripe//lib/stripe/resources/quote.rb#118
    def list_line_items(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/quote.rb#13
    def object_name; end

    # Download the PDF for a finalized quote. Explanation for special handling can be found [here](https://docs.stripe.com/quotes/overview#quote_pdf)
    #
    # source://stripe//lib/stripe/resources/quote.rb#141
    def pdf(quote, params = T.unsafe(nil), opts = T.unsafe(nil), &read_body_chunk_block); end

    # A quote models prices and services for a customer.
    #
    # source://stripe//lib/stripe/resources/quote.rb#154
    def update(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/quote.rb#12
Stripe::Quote::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/quote_computed_upfront_line_items_service.rb#5
class Stripe::QuoteComputedUpfrontLineItemsService < ::Stripe::StripeService
  # When retrieving a quote, there is an includable [computed.upfront.line_items](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.
  #
  # source://stripe//lib/stripe/services/quote_computed_upfront_line_items_service.rb#7
  def list(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/quote_line_item_service.rb#5
class Stripe::QuoteLineItemService < ::Stripe::StripeService
  # When retrieving a quote, there is an includable line_items property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.
  #
  # source://stripe//lib/stripe/services/quote_line_item_service.rb#7
  def list(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/quote_service.rb#5
class Stripe::QuoteService < ::Stripe::StripeService
  # @return [QuoteService] a new instance of QuoteService
  #
  # source://stripe//lib/stripe/services/quote_service.rb#8
  def initialize(requestor); end

  # Accepts the specified quote.
  #
  # source://stripe//lib/stripe/services/quote_service.rb#15
  def accept(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Cancels the quote.
  #
  # source://stripe//lib/stripe/services/quote_service.rb#26
  def cancel(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute computed_upfront_line_items.
  #
  # source://stripe//lib/stripe/services/quote_service.rb#6
  def computed_upfront_line_items; end

  # A quote models prices and services for a customer. Default options for header, description, footer, and expires_at can be set in the dashboard via the [quote template](https://dashboard.stripe.com/settings/billing/quote).
  #
  # source://stripe//lib/stripe/services/quote_service.rb#37
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Finalizes the quote.
  #
  # source://stripe//lib/stripe/services/quote_service.rb#42
  def finalize_quote(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute line_items.
  #
  # source://stripe//lib/stripe/services/quote_service.rb#6
  def line_items; end

  # Returns a list of your quotes.
  #
  # source://stripe//lib/stripe/services/quote_service.rb#53
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Download the PDF for a finalized quote. Explanation for special handling can be found [here](https://docs.stripe.com/quotes/overview#quote_pdf)
  #
  # source://stripe//lib/stripe/services/quote_service.rb#58
  def pdf(quote, params = T.unsafe(nil), opts = T.unsafe(nil), &read_body_chunk_block); end

  # Retrieves the quote with the given ID.
  #
  # source://stripe//lib/stripe/services/quote_service.rb#71
  def retrieve(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # A quote models prices and services for a customer.
  #
  # source://stripe//lib/stripe/services/quote_service.rb#82
  def update(quote, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/radar/early_fraud_warning.rb#5
module Stripe::Radar; end

# An early fraud warning indicates that the card issuer has notified us that a
# charge may be fraudulent.
#
# Related guide: [Early fraud warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings)
#
# source://stripe//lib/stripe/resources/radar/early_fraud_warning.rb#10
class Stripe::Radar::EarlyFraudWarning < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Returns a list of early fraud warnings.
    #
    # source://stripe//lib/stripe/resources/radar/early_fraud_warning.rb#19
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/radar/early_fraud_warning.rb#14
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/radar/early_fraud_warning.rb#13
Stripe::Radar::EarlyFraudWarning::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/radar/early_fraud_warning_service.rb#6
class Stripe::Radar::EarlyFraudWarningService < ::Stripe::StripeService
  # Returns a list of early fraud warnings.
  #
  # source://stripe//lib/stripe/services/radar/early_fraud_warning_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an early fraud warning that has previously been created.
  #
  # Please refer to the [early fraud warning](https://stripe.com/docs/api#early_fraud_warning_object) object reference for more details.
  #
  # source://stripe//lib/stripe/services/radar/early_fraud_warning_service.rb#21
  def retrieve(early_fraud_warning, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Value lists allow you to group values together which can then be referenced in rules.
#
# Related guide: [Default Stripe lists](https://stripe.com/docs/radar/lists#managing-list-items)
#
# source://stripe//lib/stripe/resources/radar/value_list.rb#9
class Stripe::Radar::ValueList < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Deletes a ValueList object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.
  #
  # source://stripe//lib/stripe/resources/radar/value_list.rb#41
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a new ValueList object, which can then be referenced in rules.
    #
    # source://stripe//lib/stripe/resources/radar/value_list.rb#21
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes a ValueList object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.
    #
    # source://stripe//lib/stripe/resources/radar/value_list.rb#31
    def delete(value_list, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of ValueList objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/radar/value_list.rb#51
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/radar/value_list.rb#16
    def object_name; end

    # Updates a ValueList object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that item_type is immutable.
    #
    # source://stripe//lib/stripe/resources/radar/value_list.rb#61
    def update(value_list, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/radar/value_list.rb#15
Stripe::Radar::ValueList::OBJECT_NAME = T.let(T.unsafe(nil), String)

# Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
#
# Related guide: [Managing list items](https://stripe.com/docs/radar/lists#managing-list-items)
#
# source://stripe//lib/stripe/resources/radar/value_list_item.rb#9
class Stripe::Radar::ValueListItem < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List

  # Deletes a ValueListItem object, removing it from its parent value list.
  #
  # source://stripe//lib/stripe/resources/radar/value_list_item.rb#40
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a new ValueListItem object, which is added to the specified parent value list.
    #
    # source://stripe//lib/stripe/resources/radar/value_list_item.rb#20
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes a ValueListItem object, removing it from its parent value list.
    #
    # source://stripe//lib/stripe/resources/radar/value_list_item.rb#30
    def delete(item, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of ValueListItem objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/radar/value_list_item.rb#50
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/radar/value_list_item.rb#15
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/radar/value_list_item.rb#14
Stripe::Radar::ValueListItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/radar/value_list_item_service.rb#6
class Stripe::Radar::ValueListItemService < ::Stripe::StripeService
  # Creates a new ValueListItem object, which is added to the specified parent value list.
  #
  # source://stripe//lib/stripe/services/radar/value_list_item_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a ValueListItem object, removing it from its parent value list.
  #
  # source://stripe//lib/stripe/services/radar/value_list_item_service.rb#19
  def delete(item, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of ValueListItem objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/radar/value_list_item_service.rb#30
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a ValueListItem object.
  #
  # source://stripe//lib/stripe/services/radar/value_list_item_service.rb#41
  def retrieve(item, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/radar/value_list_service.rb#6
class Stripe::Radar::ValueListService < ::Stripe::StripeService
  # Creates a new ValueList object, which can then be referenced in rules.
  #
  # source://stripe//lib/stripe/services/radar/value_list_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a ValueList object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.
  #
  # source://stripe//lib/stripe/services/radar/value_list_service.rb#19
  def delete(value_list, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of ValueList objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/radar/value_list_service.rb#30
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a ValueList object.
  #
  # source://stripe//lib/stripe/services/radar/value_list_service.rb#41
  def retrieve(value_list, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a ValueList object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that item_type is immutable.
  #
  # source://stripe//lib/stripe/services/radar/value_list_service.rb#52
  def update(value_list, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/radar_service.rb#5
class Stripe::RadarService < ::Stripe::StripeService
  # @return [RadarService] a new instance of RadarService
  #
  # source://stripe//lib/stripe/services/radar_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute early_fraud_warnings.
  #
  # source://stripe//lib/stripe/services/radar_service.rb#6
  def early_fraud_warnings; end

  # Returns the value of attribute value_list_items.
  #
  # source://stripe//lib/stripe/services/radar_service.rb#6
  def value_list_items; end

  # Returns the value of attribute value_lists.
  #
  # source://stripe//lib/stripe/services/radar_service.rb#6
  def value_lists; end
end

# RateLimitError is raised in cases where an account is putting too much load
# on Stripe's API servers (usually by performing too many requests). Please
# back off on request rate.
#
# source://stripe//lib/stripe/errors.rb#107
class Stripe::RateLimitError < ::Stripe::StripeError; end

# Refund objects allow you to refund a previously created charge that isn't
# refunded yet. Funds are refunded to the credit or debit card that's
# initially charged.
#
# Related guide: [Refunds](https://stripe.com/docs/refunds)
#
# source://stripe//lib/stripe/resources/refund.rb#10
class Stripe::Refund < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Cancels a refund with a status of requires_action.
  #
  # You can't cancel refunds in other states. Only refunds for payment methods that require customer action can enter the requires_action state.
  #
  # source://stripe//lib/stripe/resources/refund.rb#23
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/refund.rb#76
  def test_helpers; end

  class << self
    # Cancels a refund with a status of requires_action.
    #
    # You can't cancel refunds in other states. Only refunds for payment methods that require customer action can enter the requires_action state.
    #
    # source://stripe//lib/stripe/resources/refund.rb#35
    def cancel(refund, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.
    #
    # Creating a new refund will refund a charge that has previously been created but not yet refunded.
    # Funds will be refunded to the credit or debit card that was originally charged.
    #
    # You can optionally refund only part of a charge.
    # You can do so multiple times, until the entire charge has been refunded.
    #
    # Once entirely refunded, a charge can't be refunded again.
    # This method will raise an error when called on an already-refunded charge,
    # or when trying to refund more money than is left on a charge.
    #
    # source://stripe//lib/stripe/resources/refund.rb#55
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.
    #
    # source://stripe//lib/stripe/resources/refund.rb#60
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/refund.rb#16
    def object_name; end

    # Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don't provide remain unchanged.
    #
    # This request only accepts metadata as an argument.
    #
    # source://stripe//lib/stripe/resources/refund.rb#67
    def update(refund, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/refund.rb#15
Stripe::Refund::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/refund.rb#80
class Stripe::Refund::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Expire a refund with a status of requires_action.
  #
  # source://stripe//lib/stripe/resources/refund.rb#97
  def expire(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Expire a refund with a status of requires_action.
    #
    # source://stripe//lib/stripe/resources/refund.rb#87
    def expire(refund, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/refund.rb#82
    def resource_class; end
  end
end

# source://stripe//lib/stripe/resources/refund.rb#81
Stripe::Refund::TestHelpers::RESOURCE_CLASS = Stripe::Refund

# source://stripe//lib/stripe/services/refund_service.rb#5
class Stripe::RefundService < ::Stripe::StripeService
  # Cancels a refund with a status of requires_action.
  #
  # You can't cancel refunds in other states. Only refunds for payment methods that require customer action can enter the requires_action state.
  #
  # source://stripe//lib/stripe/services/refund_service.rb#9
  def cancel(refund, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.
  #
  # Creating a new refund will refund a charge that has previously been created but not yet refunded.
  # Funds will be refunded to the credit or debit card that was originally charged.
  #
  # You can optionally refund only part of a charge.
  # You can do so multiple times, until the entire charge has been refunded.
  #
  # Once entirely refunded, a charge can't be refunded again.
  # This method will raise an error when called on an already-refunded charge,
  # or when trying to refund more money than is left on a charge.
  #
  # source://stripe//lib/stripe/services/refund_service.rb#30
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.
  #
  # source://stripe//lib/stripe/services/refund_service.rb#35
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing refund.
  #
  # source://stripe//lib/stripe/services/refund_service.rb#40
  def retrieve(refund, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don't provide remain unchanged.
  #
  # This request only accepts metadata as an argument.
  #
  # source://stripe//lib/stripe/services/refund_service.rb#53
  def update(refund, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/reporting/report_run.rb#5
module Stripe::Reporting; end

# The Report Run object represents an instance of a report type generated with
# specific run parameters. Once the object is created, Stripe begins processing the report.
# When the report has finished running, it will give you a reference to a file
# where you can retrieve your results. For an overview, see
# [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
#
# Note that certain report types can only be run based on your live-mode data (not test-mode
# data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
#
# source://stripe//lib/stripe/resources/reporting/report_run.rb#14
class Stripe::Reporting::ReportRun < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  class << self
    # Creates a new object and begin running the report. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)
    #
    # source://stripe//lib/stripe/resources/reporting/report_run.rb#24
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Report Runs, with the most recent appearing first.
    #
    # source://stripe//lib/stripe/resources/reporting/report_run.rb#34
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/reporting/report_run.rb#19
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/reporting/report_run.rb#18
Stripe::Reporting::ReportRun::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/reporting/report_run_service.rb#6
class Stripe::Reporting::ReportRunService < ::Stripe::StripeService
  # Creates a new object and begin running the report. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)
  #
  # source://stripe//lib/stripe/services/reporting/report_run_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Report Runs, with the most recent appearing first.
  #
  # source://stripe//lib/stripe/services/reporting/report_run_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing Report Run.
  #
  # source://stripe//lib/stripe/services/reporting/report_run_service.rb#30
  def retrieve(report_run, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# The Report Type resource corresponds to a particular type of report, such as
# the "Activity summary" or "Itemized payouts" reports. These objects are
# identified by an ID belonging to a set of enumerated values. See
# [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
# for those Report Type IDs, along with required and optional parameters.
#
# Note that certain report types can only be run based on your live-mode data (not test-mode
# data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
#
# source://stripe//lib/stripe/resources/reporting/report_type.rb#14
class Stripe::Reporting::ReportType < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Returns a full list of Report Types.
    #
    # source://stripe//lib/stripe/resources/reporting/report_type.rb#23
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/reporting/report_type.rb#18
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/reporting/report_type.rb#17
Stripe::Reporting::ReportType::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/reporting/report_type_service.rb#6
class Stripe::Reporting::ReportTypeService < ::Stripe::StripeService
  # Returns a full list of Report Types.
  #
  # source://stripe//lib/stripe/services/reporting/report_type_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a Report Type. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)
  #
  # source://stripe//lib/stripe/services/reporting/report_type_service.rb#19
  def retrieve(report_type, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/reporting_service.rb#5
class Stripe::ReportingService < ::Stripe::StripeService
  # @return [ReportingService] a new instance of ReportingService
  #
  # source://stripe//lib/stripe/services/reporting_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute report_runs.
  #
  # source://stripe//lib/stripe/services/reporting_service.rb#6
  def report_runs; end

  # Returns the value of attribute report_types.
  #
  # source://stripe//lib/stripe/services/reporting_service.rb#6
  def report_types; end
end

# RequestOptions is a class that encapsulates configurable options
# for requests made to the Stripe API. It is used by the APIRequestor
# to set per-request options.
#
# For internal use only. Does not provide a stable API and may be broken
# with future non-major changes.
#
# source://stripe//lib/stripe/request_options.rb#11
module Stripe::RequestOptions
  class << self
    # Merges requestor options hash on a StripeObject
    # with a per-request options hash, giving precedence
    # to the per-request options. Returns the merged request options.
    # Expects two hashes.
    #
    # source://stripe//lib/stripe/request_options.rb#60
    def combine_opts(object_opts, req_opts); end

    # Get options that are copyable from StripeObject to StripeObject
    #
    # source://stripe//lib/stripe/request_options.rb#122
    def copyable(req_opts); end

    # Validates a normalized opts hash.
    #
    # source://stripe//lib/stripe/request_options.rb#95
    def error_on_non_string_user_opts(normalized_opts); end

    # Extracts options from a user-provided hash, returning a new request options hash
    # containing the recognized request options and a `headers` entry for the remaining options.
    #
    # source://stripe//lib/stripe/request_options.rb#77
    def extract_opts_from_hash(opts); end

    # Merges requestor options on a StripeConfiguration object
    # with a per-request options hash, giving precedence
    # to the per-request options. Expects StripeConfiguration and hash.
    #
    # source://stripe//lib/stripe/request_options.rb#35
    def merge_config_and_opts(config, req_opts); end

    # Get options that persist between requests
    #
    # source://stripe//lib/stripe/request_options.rb#110
    def persistable(req_opts); end
  end
end

# Options that should be copyable from one StripeObject to another
# including options that may be internal.
#
# source://stripe//lib/stripe/request_options.rb#23
Stripe::RequestOptions::OPTS_COPYABLE = T.let(T.unsafe(nil), Set)

# Options that should be persisted between API requests.
#
# source://stripe//lib/stripe/request_options.rb#28
Stripe::RequestOptions::OPTS_PERSISTABLE = T.let(T.unsafe(nil), Set)

# Options that a user is allowed to specify.
#
# source://stripe//lib/stripe/request_options.rb#13
Stripe::RequestOptions::OPTS_USER_SPECIFIED = T.let(T.unsafe(nil), Set)

# [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
# connected account, either entirely or partially, and can also specify whether
# to refund any related application fees. Transfer reversals add to the
# platform's balance and subtract from the destination account's balance.
#
# Reversing a transfer that was made for a [destination
# charge](https://stripe.com/docs/connect/destination-charges) is allowed only up to the amount of
# the charge. It is possible to reverse a
# [transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)
# transfer only if the destination account has enough balance to cover the
# reversal.
#
# Related guide: [Reverse transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reverse-transfers)
#
# source://stripe//lib/stripe/resources/reversal.rb#18
class Stripe::Reversal < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Save::ClassMethods

  # source://stripe//lib/stripe/resources/reversal.rb#26
  def resource_url; end

  class << self
    # source://stripe//lib/stripe/resources/reversal.rb#22
    def object_name; end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/reversal.rb#38
    def retrieve(_id, _opts = T.unsafe(nil)); end

    # @raise [NotImplementedError]
    #
    # source://stripe//lib/stripe/resources/reversal.rb#31
    def update(_id, _params = T.unsafe(nil), _opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/reversal.rb#21
Stripe::Reversal::OBJECT_NAME = T.let(T.unsafe(nil), String)

# Reviews can be used to supplement automated fraud detection with human expertise.
#
# Learn more about [Radar](https://stripe.com/radar) and reviewing payments
# [here](https://stripe.com/docs/radar/reviews).
#
# source://stripe//lib/stripe/resources/review.rb#9
class Stripe::Review < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  # Approves a Review object, closing it and removing it from the list of reviews.
  #
  # source://stripe//lib/stripe/resources/review.rb#18
  def approve(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Approves a Review object, closing it and removing it from the list of reviews.
    #
    # source://stripe//lib/stripe/resources/review.rb#28
    def approve(review, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Review objects that have open set to true. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
    #
    # source://stripe//lib/stripe/resources/review.rb#38
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/review.rb#13
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/review.rb#12
Stripe::Review::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/review_service.rb#5
class Stripe::ReviewService < ::Stripe::StripeService
  # Approves a Review object, closing it and removing it from the list of reviews.
  #
  # source://stripe//lib/stripe/services/review_service.rb#7
  def approve(review, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Review objects that have open set to true. The objects are sorted in descending order by creation date, with the most recently created object appearing first.
  #
  # source://stripe//lib/stripe/services/review_service.rb#18
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a Review object.
  #
  # source://stripe//lib/stripe/services/review_service.rb#23
  def retrieve(review, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/search_result_object.rb#4
class Stripe::SearchResultObject < ::Stripe::StripeObject
  include ::Stripe::APIOperations::Search
  include ::Stripe::APIOperations::Request
  extend ::Stripe::APIOperations::Request::ClassMethods

  # @return [SearchResultObject] a new instance of SearchResultObject
  #
  # source://stripe//lib/stripe/search_result_object.rb#26
  def initialize(*args); end

  # source://stripe//lib/stripe/search_result_object.rb#31
  def [](key); end

  # Iterates through each resource in all pages, making additional fetches to
  # the API as necessary.
  #
  # Note that this method will make as many API calls as necessary to fetch
  # all resources. For more granular control, please see +each+ and
  # +next_search_result_page+.
  #
  # source://stripe//lib/stripe/search_result_object.rb#64
  def auto_paging_each(&blk); end

  # Iterates through each resource in the page represented by the current
  # `SearchListObject`.
  #
  # Note that this method makes no effort to fetch a new page when it gets to
  # the end of the current page's resources. See also +auto_paging_each+.
  #
  # source://stripe//lib/stripe/search_result_object.rb#49
  def each(&blk); end

  # Returns true if the page object contains no elements.
  #
  # @return [Boolean]
  #
  # source://stripe//lib/stripe/search_result_object.rb#54
  def empty?; end

  # This accessor allows a `SearchResultObject` to inherit various filters
  # that were given to a predecessor. This allows for things like consistent
  # limits, expansions, and predicates as a user pages through resources.
  #
  # source://stripe//lib/stripe/search_result_object.rb#17
  def filters; end

  # This accessor allows a `SearchResultObject` to inherit various filters
  # that were given to a predecessor. This allows for things like consistent
  # limits, expansions, and predicates as a user pages through resources.
  #
  # source://stripe//lib/stripe/search_result_object.rb#17
  def filters=(_arg0); end

  # Fetches the next page in the resource list (if there is one).
  #
  # This method will try to respect the limit of the current page. If none
  # was given, the default limit will be fetched again.
  #
  # source://stripe//lib/stripe/search_result_object.rb#81
  def next_search_result_page(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # An empty search result object. This is returned from +next+ when we know
    # that there isn't a next page in order to replicate the behavior of the API
    # when it attempts to return a page beyond the last.
    #
    # source://stripe//lib/stripe/search_result_object.rb#22
    def empty_search_result(opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/search_result_object.rb#10
    def object_name; end
  end
end

# source://stripe//lib/stripe/search_result_object.rb#9
Stripe::SearchResultObject::OBJECT_NAME = T.let(T.unsafe(nil), String)

# A SetupAttempt describes one attempted confirmation of a SetupIntent,
# whether that confirmation is successful or unsuccessful. You can use
# SetupAttempts to inspect details of a specific attempt at setting up a
# payment method using a SetupIntent.
#
# source://stripe//lib/stripe/resources/setup_attempt.rb#9
class Stripe::SetupAttempt < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Returns a list of SetupAttempts that associate with a provided SetupIntent.
    #
    # source://stripe//lib/stripe/resources/setup_attempt.rb#18
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/setup_attempt.rb#13
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/setup_attempt.rb#12
Stripe::SetupAttempt::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/setup_attempt_service.rb#5
class Stripe::SetupAttemptService < ::Stripe::StripeService
  # Returns a list of SetupAttempts that associate with a provided SetupIntent.
  #
  # source://stripe//lib/stripe/services/setup_attempt_service.rb#7
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
# For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
# Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
#
# Create a SetupIntent when you're ready to collect your customer's payment credentials.
# Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
# The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
# you through the setup process.
#
# Successful SetupIntents result in payment credentials that are optimized for future payments.
# For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
# [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
# to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
# If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
# it automatically attaches the resulting payment method to that Customer after successful setup.
# We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
# PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
#
# By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
#
# Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
#
# source://stripe//lib/stripe/resources/setup_intent.rb#26
class Stripe::SetupIntent < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # You can cancel a SetupIntent object when it's in one of these statuses: requires_payment_method, requires_confirmation, or requires_action.
  #
  # After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can't cancel the SetupIntent for a Checkout Session. [Expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
  #
  # source://stripe//lib/stripe/resources/setup_intent.rb#39
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Confirm that your customer intends to set up the current or
  # provided payment method. For example, you would confirm a SetupIntent
  # when a customer hits the “Save” button on a payment method management
  # page on your website.
  #
  # If the selected payment method does not require any additional
  # steps from the customer, the SetupIntent will transition to the
  # succeeded status.
  #
  # Otherwise, it will transition to the requires_action status and
  # suggest additional actions via next_action. If setup fails,
  # the SetupIntent will transition to the
  # requires_payment_method status or the canceled status if the
  # confirmation limit is reached.
  #
  # source://stripe//lib/stripe/resources/setup_intent.rb#74
  def confirm(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Verifies microdeposits on a SetupIntent object.
  #
  # source://stripe//lib/stripe/resources/setup_intent.rb#130
  def verify_microdeposits(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # You can cancel a SetupIntent object when it's in one of these statuses: requires_payment_method, requires_confirmation, or requires_action.
    #
    # After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can't cancel the SetupIntent for a Checkout Session. [Expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
    #
    # source://stripe//lib/stripe/resources/setup_intent.rb#51
    def cancel(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Confirm that your customer intends to set up the current or
    # provided payment method. For example, you would confirm a SetupIntent
    # when a customer hits the “Save” button on a payment method management
    # page on your website.
    #
    # If the selected payment method does not require any additional
    # steps from the customer, the SetupIntent will transition to the
    # succeeded status.
    #
    # Otherwise, it will transition to the requires_action status and
    # suggest additional actions via next_action. If setup fails,
    # the SetupIntent will transition to the
    # requires_payment_method status or the canceled status if the
    # confirmation limit is reached.
    #
    # source://stripe//lib/stripe/resources/setup_intent.rb#97
    def confirm(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a SetupIntent object.
    #
    # After you create the SetupIntent, attach a payment method and [confirm](https://stripe.com/docs/api/setup_intents/confirm)
    # it to collect any required permissions to charge the payment method later.
    #
    # source://stripe//lib/stripe/resources/setup_intent.rb#110
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of SetupIntents.
    #
    # source://stripe//lib/stripe/resources/setup_intent.rb#115
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/setup_intent.rb#32
    def object_name; end

    # Updates a SetupIntent object.
    #
    # source://stripe//lib/stripe/resources/setup_intent.rb#120
    def update(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Verifies microdeposits on a SetupIntent object.
    #
    # source://stripe//lib/stripe/resources/setup_intent.rb#140
    def verify_microdeposits(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/setup_intent.rb#31
Stripe::SetupIntent::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/setup_intent_service.rb#5
class Stripe::SetupIntentService < ::Stripe::StripeService
  # You can cancel a SetupIntent object when it's in one of these statuses: requires_payment_method, requires_confirmation, or requires_action.
  #
  # After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can't cancel the SetupIntent for a Checkout Session. [Expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
  #
  # source://stripe//lib/stripe/services/setup_intent_service.rb#9
  def cancel(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Confirm that your customer intends to set up the current or
  # provided payment method. For example, you would confirm a SetupIntent
  # when a customer hits the “Save” button on a payment method management
  # page on your website.
  #
  # If the selected payment method does not require any additional
  # steps from the customer, the SetupIntent will transition to the
  # succeeded status.
  #
  # Otherwise, it will transition to the requires_action status and
  # suggest additional actions via next_action. If setup fails,
  # the SetupIntent will transition to the
  # requires_payment_method status or the canceled status if the
  # confirmation limit is reached.
  #
  # source://stripe//lib/stripe/services/setup_intent_service.rb#33
  def confirm(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a SetupIntent object.
  #
  # After you create the SetupIntent, attach a payment method and [confirm](https://stripe.com/docs/api/setup_intents/confirm)
  # it to collect any required permissions to charge the payment method later.
  #
  # source://stripe//lib/stripe/services/setup_intent_service.rb#47
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of SetupIntents.
  #
  # source://stripe//lib/stripe/services/setup_intent_service.rb#58
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a SetupIntent that has previously been created.
  #
  # Client-side retrieval using a publishable key is allowed when the client_secret is provided in the query string.
  #
  # When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the [SetupIntent](https://stripe.com/docs/api#setup_intent_object) object reference for more details.
  #
  # source://stripe//lib/stripe/services/setup_intent_service.rb#73
  def retrieve(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a SetupIntent object.
  #
  # source://stripe//lib/stripe/services/setup_intent_service.rb#84
  def update(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Verifies microdeposits on a SetupIntent object.
  #
  # source://stripe//lib/stripe/services/setup_intent_service.rb#95
  def verify_microdeposits(intent, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Shipping rates describe the price of shipping presented to your customers and
# applied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).
#
# source://stripe//lib/stripe/resources/shipping_rate.rb#7
class Stripe::ShippingRate < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a new shipping rate object.
    #
    # source://stripe//lib/stripe/resources/shipping_rate.rb#18
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your shipping rates.
    #
    # source://stripe//lib/stripe/resources/shipping_rate.rb#23
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/shipping_rate.rb#13
    def object_name; end

    # Updates an existing shipping rate object.
    #
    # source://stripe//lib/stripe/resources/shipping_rate.rb#28
    def update(shipping_rate_token, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/shipping_rate.rb#12
Stripe::ShippingRate::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/shipping_rate_service.rb#5
class Stripe::ShippingRateService < ::Stripe::StripeService
  # Creates a new shipping rate object.
  #
  # source://stripe//lib/stripe/services/shipping_rate_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your shipping rates.
  #
  # source://stripe//lib/stripe/services/shipping_rate_service.rb#18
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the shipping rate object with the given ID.
  #
  # source://stripe//lib/stripe/services/shipping_rate_service.rb#29
  def retrieve(shipping_rate_token, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing shipping rate object.
  #
  # source://stripe//lib/stripe/services/shipping_rate_service.rb#40
  def update(shipping_rate_token, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/sigma/scheduled_query_run.rb#5
module Stripe::Sigma; end

# If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
# receive a `sigma.scheduled_query_run.created` webhook each time the query
# runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
# retrieve the query results.
#
# source://stripe//lib/stripe/resources/sigma/scheduled_query_run.rb#10
class Stripe::Sigma::ScheduledQueryRun < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Returns a list of scheduled query runs.
    #
    # source://stripe//lib/stripe/resources/sigma/scheduled_query_run.rb#19
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/sigma/scheduled_query_run.rb#14
    def object_name; end

    # source://stripe//lib/stripe/resources/sigma/scheduled_query_run.rb#28
    def resource_url; end
  end
end

# source://stripe//lib/stripe/resources/sigma/scheduled_query_run.rb#13
Stripe::Sigma::ScheduledQueryRun::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/sigma/scheduled_query_run_service.rb#6
class Stripe::Sigma::ScheduledQueryRunService < ::Stripe::StripeService
  # Returns a list of scheduled query runs.
  #
  # source://stripe//lib/stripe/services/sigma/scheduled_query_run_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an scheduled query run.
  #
  # source://stripe//lib/stripe/services/sigma/scheduled_query_run_service.rb#19
  def retrieve(scheduled_query_run, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/sigma_service.rb#5
class Stripe::SigmaService < ::Stripe::StripeService
  # @return [SigmaService] a new instance of SigmaService
  #
  # source://stripe//lib/stripe/services/sigma_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute scheduled_query_runs.
  #
  # source://stripe//lib/stripe/services/sigma_service.rb#6
  def scheduled_query_runs; end
end

# SignatureVerificationError is raised when the signature verification for a
# webhook fails
#
# source://stripe//lib/stripe/errors.rb#112
class Stripe::SignatureVerificationError < ::Stripe::StripeError
  # @return [SignatureVerificationError] a new instance of SignatureVerificationError
  #
  # source://stripe//lib/stripe/errors.rb#115
  def initialize(message, sig_header, http_body: T.unsafe(nil)); end

  # Returns the value of attribute sig_header.
  #
  # source://stripe//lib/stripe/errors.rb#113
  def sig_header; end

  # Sets the attribute sig_header
  #
  # @param value the value to set the attribute sig_header to.
  #
  # source://stripe//lib/stripe/errors.rb#113
  def sig_header=(_arg0); end
end

# source://stripe//lib/stripe/singleton_api_resource.rb#4
class Stripe::SingletonAPIResource < ::Stripe::APIResource
  # source://stripe//lib/stripe/singleton_api_resource.rb#16
  def resource_url; end

  class << self
    # source://stripe//lib/stripe/singleton_api_resource.rb#5
    def resource_url; end

    # source://stripe//lib/stripe/singleton_api_resource.rb#20
    def retrieve(params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# `Source` objects allow you to accept a variety of payment methods. They
# represent a customer's payment instrument, and can be used with the Stripe API
# just like a `Card` object: once chargeable, they can be charged, or can be
# attached to customers.
#
# Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
# We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
# This newer API provides access to our latest features and payment method types.
#
# Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
#
# source://stripe//lib/stripe/resources/source.rb#15
class Stripe::Source < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Save::ClassMethods
  extend ::Gem::Deprecate

  # source://stripe//lib/stripe/resources/source.rb#78
  def _deprecated_source_transactions(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/source.rb#64
  def detach(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  def source_transactions(*args, **_arg1, &block); end

  # Verify a given source.
  #
  # source://stripe//lib/stripe/resources/source.rb#45
  def verify(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a new source object.
    #
    # source://stripe//lib/stripe/resources/source.rb#28
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_source_transactions(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/source.rb#21
    def object_name; end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_source_transaction(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def source_transactions_url(id, nested_id = T.unsafe(nil)); end

    # Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # This request accepts the metadata and owner as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our [payment method guides](https://stripe.com/docs/sources) for more detail.
    #
    # source://stripe//lib/stripe/resources/source.rb#35
    def update(source, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Verify a given source.
    #
    # source://stripe//lib/stripe/resources/source.rb#55
    def verify(source, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/source.rb#20
Stripe::Source::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/source_service.rb#5
class Stripe::SourceService < ::Stripe::StripeService
  # @return [SourceService] a new instance of SourceService
  #
  # source://stripe//lib/stripe/services/source_service.rb#8
  def initialize(requestor); end

  # Creates a new source object.
  #
  # source://stripe//lib/stripe/services/source_service.rb#14
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Delete a specified source for a given customer.
  #
  # source://stripe//lib/stripe/services/source_service.rb#19
  def detach(customer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.
  #
  # source://stripe//lib/stripe/services/source_service.rb#30
  def retrieve(source, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute transactions.
  #
  # source://stripe//lib/stripe/services/source_service.rb#6
  def transactions; end

  # Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # This request accepts the metadata and owner as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our [payment method guides](https://stripe.com/docs/sources) for more detail.
  #
  # source://stripe//lib/stripe/services/source_service.rb#43
  def update(source, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Verify a given source.
  #
  # source://stripe//lib/stripe/services/source_service.rb#54
  def verify(source, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Some payment methods have no required amount that a customer must send.
# Customers can be instructed to send any amount, and it can be made up of
# multiple transactions. As such, sources can have multiple associated
# transactions.
#
# source://stripe//lib/stripe/resources/source_transaction.rb#9
class Stripe::SourceTransaction < ::Stripe::StripeObject
  class << self
    # source://stripe//lib/stripe/resources/source_transaction.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/source_transaction.rb#10
Stripe::SourceTransaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/source_transaction_service.rb#5
class Stripe::SourceTransactionService < ::Stripe::StripeService
  # List source transactions for a given source.
  #
  # source://stripe//lib/stripe/services/source_transaction_service.rb#7
  def list(source, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/stripe_client.rb#6
class Stripe::StripeClient
  extend ::Gem::Deprecate

  # Initializes a new StripeClient
  #
  # @return [StripeClient] a new instance of StripeClient
  #
  # source://stripe//lib/stripe/stripe_client.rb#18
  def initialize(api_key, stripe_account: T.unsafe(nil), stripe_context: T.unsafe(nil), stripe_version: T.unsafe(nil), api_base: T.unsafe(nil), uploads_base: T.unsafe(nil), connect_base: T.unsafe(nil), meter_events_base: T.unsafe(nil), client_id: T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_client.rb#56
  def _deprecated_request(&block); end

  # source://stripe//lib/stripe/stripe_client.rb#82
  def deserialize(data, api_mode: T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_client.rb#62
  def parse_thin_event(payload, sig_header, secret, tolerance: T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_client.rb#73
  def raw_request(method, url, base_address: T.unsafe(nil), params: T.unsafe(nil), opts: T.unsafe(nil)); end

  def request(*args, **_arg1, &block); end

  # attr_readers: The beginning of the section generated from our OpenAPI spec
  #
  # source://stripe//lib/stripe/stripe_client.rb#8
  def v1; end

  # Returns the value of attribute v2.
  #
  # source://stripe//lib/stripe/stripe_client.rb#9
  def v2; end
end

# For internal use only. Does not provide a stable API and may be broken
# with future non-major changes.
#
# source://stripe//lib/stripe/stripe_client.rb#15
Stripe::StripeClient::CLIENT_OPTIONS = T.let(T.unsafe(nil), Set)

# Configurable options:
#
# =ca_bundle_path=
# The location of a file containing a bundle of CA certificates. By default
# the library will use an included bundle that can successfully validate
# Stripe certificates.
#
# =log_level=
# When set prompts the library to log some extra information to $stdout and
# $stderr about what it's doing. For example, it'll produce information about
# requests, responses, and errors that are received. Valid log levels are
# `debug` and `info`, with `debug` being a little more verbose in places.
#
# Use of this configuration is only useful when `.logger` is _not_ set. When
# it is, the decision what levels to print is entirely deferred to the logger.
#
# =logger=
# The logger should support the same interface as the `Logger` class that's
# part of Ruby's standard library (hint, anything in `Rails.logger` will
# likely be suitable).
#
# If `.logger` is set, the value of `.log_level` is ignored. The decision on
# what levels to print is entirely deferred to the logger.
#
# source://stripe//lib/stripe/stripe_configuration.rb#27
class Stripe::StripeConfiguration
  # @return [StripeConfiguration] a new instance of StripeConfiguration
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#72
  def initialize; end

  # Returns the value of attribute api_base.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def api_base; end

  # source://stripe//lib/stripe/stripe_configuration.rb#171
  def api_base=(api_base); end

  # Returns the value of attribute api_key.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def api_key; end

  # Sets the attribute api_key
  #
  # @param value the value to set the attribute api_key to.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def api_key=(_arg0); end

  # Returns the value of attribute api_version.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def api_version; end

  # Sets the attribute api_version
  #
  # @param value the value to set the attribute api_version to.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def api_version=(_arg0); end

  # Returns the value of attribute base_addresses.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def base_addresses; end

  # Returns the value of attribute ca_bundle_path.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def ca_bundle_path; end

  # source://stripe//lib/stripe/stripe_configuration.rb#177
  def ca_bundle_path=(path); end

  # A certificate store initialized from the the bundle in #ca_bundle_path and
  # which is used to validate TLS on every request.
  #
  # This was added to the give the gem "pseudo thread safety" in that it seems
  # when initiating many parallel requests marshaling the certificate store is
  # the most likely point of failure (see issue #382). Any program attempting
  # to leverage this pseudo safety should make a call to this method (i.e.
  # `Stripe.ca_store`) in their initialization code because it marshals lazily
  # and is itself not thread safe.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#195
  def ca_store; end

  # Returns the value of attribute client_id.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def client_id; end

  # Sets the attribute client_id
  #
  # @param value the value to set the attribute client_id to.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def client_id=(_arg0); end

  # Returns the value of attribute connect_base.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def connect_base; end

  # source://stripe//lib/stripe/stripe_configuration.rb#165
  def connect_base=(connect_base); end

  # Returns the value of attribute enable_telemetry.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def enable_telemetry; end

  # Sets the attribute enable_telemetry
  #
  # @param value the value to set the attribute enable_telemetry to.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def enable_telemetry=(_arg0); end

  # @return [Boolean]
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#203
  def enable_telemetry?; end

  # Returns the value of attribute initial_network_retry_delay.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def initial_network_retry_delay; end

  # source://stripe//lib/stripe/stripe_configuration.rb#122
  def initial_network_retry_delay=(val); end

  # Generates a deterministic key to identify configuration objects with
  # identical configuration values.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#209
  def key; end

  # Returns the value of attribute log_level.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def log_level; end

  # source://stripe//lib/stripe/stripe_configuration.rb#94
  def log_level=(val); end

  # Returns the value of attribute logger.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def logger=(_arg0); end

  # Returns the value of attribute max_network_retries.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def max_network_retries; end

  # source://stripe//lib/stripe/stripe_configuration.rb#114
  def max_network_retries=(val); end

  # Returns the value of attribute max_network_retry_delay.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def max_network_retry_delay; end

  # source://stripe//lib/stripe/stripe_configuration.rb#118
  def max_network_retry_delay=(val); end

  # Returns the value of attribute meter_events_base.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def meter_events_base; end

  # source://stripe//lib/stripe/stripe_configuration.rb#153
  def meter_events_base=(meter_events_base); end

  # Returns the value of attribute open_timeout.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def open_timeout; end

  # source://stripe//lib/stripe/stripe_configuration.rb#126
  def open_timeout=(open_timeout); end

  # Returns the value of attribute proxy.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def proxy; end

  # source://stripe//lib/stripe/stripe_configuration.rb#143
  def proxy=(proxy); end

  # Returns the value of attribute read_timeout.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def read_timeout; end

  # source://stripe//lib/stripe/stripe_configuration.rb#131
  def read_timeout=(read_timeout); end

  # Create a new config based off an existing one. This is useful when the
  # caller wants to override the global configuration
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#61
  def reverse_duplicate_merge(hash); end

  # Returns the value of attribute stripe_account.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def stripe_account; end

  # Sets the attribute stripe_account
  #
  # @param value the value to set the attribute stripe_account to.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def stripe_account=(_arg0); end

  # Returns the value of attribute stripe_context.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def stripe_context; end

  # Sets the attribute stripe_context
  #
  # @param value the value to set the attribute stripe_context to.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#28
  def stripe_context=(_arg0); end

  # Returns the value of attribute uploads_base.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def uploads_base; end

  # source://stripe//lib/stripe/stripe_configuration.rb#159
  def uploads_base=(uploads_base); end

  # Returns the value of attribute verify_ssl_certs.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def verify_ssl_certs; end

  # source://stripe//lib/stripe/stripe_configuration.rb#148
  def verify_ssl_certs=(verify_ssl_certs); end

  # Returns the value of attribute write_timeout.
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#30
  def write_timeout; end

  # @raise [NotImplementedError]
  #
  # source://stripe//lib/stripe/stripe_configuration.rb#136
  def write_timeout=(write_timeout); end

  class << self
    # Set options to the StripeClient configured options, if valid as a client option and provided
    # Otherwise, for user configurable global options, set them to the global configuration
    # For all other options, set them to the StripeConfiguration default value
    #
    # source://stripe//lib/stripe/stripe_configuration.rb#43
    def client_init(config_opts); end

    # source://stripe//lib/stripe/stripe_configuration.rb#34
    def setup; end
  end
end

# StripeError is the base error from which all other more specific Stripe
# errors derive.
#
# source://stripe//lib/stripe/errors.rb#6
class Stripe::StripeError < ::StandardError
  # Initializes a StripeError.
  #
  # @return [StripeError] a new instance of StripeError
  #
  # source://stripe//lib/stripe/errors.rb#14
  def initialize(message = T.unsafe(nil), http_status: T.unsafe(nil), http_body: T.unsafe(nil), json_body: T.unsafe(nil), http_headers: T.unsafe(nil), code: T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://stripe//lib/stripe/errors.rb#7
  def code; end

  # source://stripe//lib/stripe/errors.rb#27
  def construct_error_object; end

  # Returns the value of attribute error.
  #
  # source://stripe//lib/stripe/errors.rb#7
  def error; end

  # Returns the value of attribute http_body.
  #
  # source://stripe//lib/stripe/errors.rb#7
  def http_body; end

  # Returns the value of attribute http_headers.
  #
  # source://stripe//lib/stripe/errors.rb#7
  def http_headers; end

  # Returns the value of attribute http_status.
  #
  # source://stripe//lib/stripe/errors.rb#7
  def http_status; end

  # Whether the error was the result of an idempotent replay, meaning that it
  # originally occurred on a previous request and is being replayed back
  # because the user sent the same idempotency key for this one.
  #
  # @return [Boolean]
  #
  # source://stripe//lib/stripe/errors.rb#37
  def idempotent_replayed?; end

  # Returns the value of attribute json_body.
  #
  # source://stripe//lib/stripe/errors.rb#7
  def json_body; end

  # Returns the value of attribute message.
  #
  # source://stripe//lib/stripe/errors.rb#7
  def message; end

  # Returns the value of attribute request_id.
  #
  # source://stripe//lib/stripe/errors.rb#7
  def request_id; end

  # Response contains a StripeResponse object that has some basic information
  # about the response that conveyed the error.
  #
  # source://stripe//lib/stripe/errors.rb#11
  def response; end

  # Response contains a StripeResponse object that has some basic information
  # about the response that conveyed the error.
  #
  # source://stripe//lib/stripe/errors.rb#11
  def response=(_arg0); end

  # source://stripe//lib/stripe/errors.rb#41
  def to_s; end
end

# StripeHeadersOnlyResponse includes only header-related vitals of the
# response. This is used for streaming requests where the response was read
# directly in a block and we explicitly don't want to store the body of the
# response in memory.
#
# source://stripe//lib/stripe/stripe_response.rb#97
class Stripe::StripeHeadersOnlyResponse
  include ::Stripe::StripeResponseBase

  class << self
    # Initializes a StripeHeadersOnlyResponse object from a
    # Net::HTTP::HTTPResponse object.
    #
    # source://stripe//lib/stripe/stripe_response.rb#102
    def from_net_http(http_resp); end
  end
end

# source://stripe//lib/stripe/stripe_object.rb#4
class Stripe::StripeObject
  include ::Enumerable

  # @return [StripeObject] a new instance of StripeObject
  #
  # source://stripe//lib/stripe/stripe_object.rb#75
  def initialize(id = T.unsafe(nil), opts = T.unsafe(nil), api_mode = T.unsafe(nil), requestor = T.unsafe(nil)); end

  # Determines the equality of two Stripe objects. Stripe objects are
  # considered to be equal if they have the same set of values and each one
  # of those values is the same.
  #
  # source://stripe//lib/stripe/stripe_object.rb#100
  def ==(other); end

  # source://stripe//lib/stripe/stripe_object.rb#162
  def [](key); end

  # source://stripe//lib/stripe/stripe_object.rb#166
  def []=(key, value); end

  # source://stripe//lib/stripe/stripe_object.rb#183
  def as_json(*opts); end

  # Indicates whether or not the resource has been deleted on the server.
  # Note that some, but not all, resources can indicate whether they have
  # been deleted.
  #
  # @return [Boolean]
  #
  # source://stripe//lib/stripe/stripe_object.rb#121
  def deleted?; end

  # Sets all keys within the StripeObject as unsaved so that they will be
  # included with an update when #serialize_params is called. This method is
  # also recursive, so any StripeObjects contained as values or which are
  # values in a tenant array are also marked as dirty.
  #
  # source://stripe//lib/stripe/stripe_object.rb#212
  def dirty!; end

  # source://stripe//lib/stripe/stripe_object.rb#204
  def each(&blk); end

  # Hash equality. As with `#==`, we consider two equivalent Stripe objects
  # equal.
  #
  # @return [Boolean]
  #
  # source://stripe//lib/stripe/stripe_object.rb#107
  def eql?(other); end

  # As with equality in `#==` and `#eql?`, we hash two Stripe objects to the
  # same value if they're equivalent objects.
  #
  # source://stripe//lib/stripe/stripe_object.rb#114
  def hash; end

  # source://stripe//lib/stripe/stripe_object.rb#129
  def inspect; end

  # source://stripe//lib/stripe/stripe_object.rb#170
  def keys; end

  # Returns the value of attribute last_response.
  #
  # source://stripe//lib/stripe/stripe_object.rb#7
  def last_response; end

  # Implements custom encoding for Ruby's Marshal. The data produced by this
  # method should be comprehendable by #marshal_load.
  #
  # This allows us to remove certain features that cannot or should not be
  # serialized.
  #
  # source://stripe//lib/stripe/stripe_object.rb#224
  def marshal_dump; end

  # Implements custom decoding for Ruby's Marshal. Consumes data that's
  # produced by #marshal_dump.
  #
  # source://stripe//lib/stripe/stripe_object.rb#237
  def marshal_load(data, api_mode: T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_object.rb#243
  def serialize_params(options = T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_object.rb#187
  def to_hash; end

  # source://stripe//lib/stripe/stripe_object.rb#178
  def to_json(*_opts); end

  # source://stripe//lib/stripe/stripe_object.rb#125
  def to_s(*_args); end

  # Mass assigns attributes on the model.
  #
  # This is a version of +update_attributes+ that takes some extra options
  # for internal use.
  #
  # ==== Attributes
  #
  # * +values+ - Hash of values to use to update the current attributes of
  #   the object. If you are on ruby 2.7 or higher make sure to wrap in curly
  #   braces to be ruby 3 compatible.
  # * +opts+ - Options for +StripeObject+ like an API key that will be reused
  #   on subsequent API calls.
  #
  # ==== Options
  #
  # * +:dirty+ - Whether values should be initiated as "dirty" (unsaved) and
  #   which applies only to new StripeObjects being initiated under this
  #   StripeObject. Defaults to true.
  #
  # source://stripe//lib/stripe/stripe_object.rb#153
  def update_attributes(values, opts = T.unsafe(nil), dirty: T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_object.rb#174
  def values; end

  protected

  # Should only be for v2 events and lists, for now.
  #
  # source://stripe//lib/stripe/stripe_object.rb#470
  def _request(method:, path:, base_address:, params: T.unsafe(nil), opts: T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_object.rb#338
  def add_accessors(keys, values); end

  # Re-initializes the object based on a hash of values (usually one that's
  # come back from an API call). Adds or removes value accessors as necessary
  # and updates the state of internal data.
  #
  # Protected on purpose! Please do not expose.
  #
  # ==== Options
  #
  # * +:values:+ Hash used to update accessors and values.
  # * +:opts:+ Options for StripeObject like an API key.
  # * +:partial:+ Indicates that the re-initialization should not attempt to
  #   remove accessors.
  #
  # source://stripe//lib/stripe/stripe_object.rb#434
  def initialize_from(values, opts, last_response = T.unsafe(nil), api_mode:, requestor: T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_object.rb#298
  def metaclass; end

  # Disabling the cop because it's confused by the fact that the methods are
  # protected, but we do define `#respond_to_missing?` just below. Hopefully
  # this is fixed in more recent Rubocop versions.
  #
  # source://stripe//lib/stripe/stripe_object.rb#377
  def method_missing(name, *args); end

  # source://stripe//lib/stripe/stripe_object.rb#302
  def remove_accessors(keys); end

  # @return [Boolean]
  #
  # source://stripe//lib/stripe/stripe_object.rb#418
  def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_object.rb#482
  def serialize_params_value(value, original, unsaved, force, key: T.unsafe(nil)); end

  private

  # source://stripe//lib/stripe/stripe_object.rb#583
  def dirty_value!(value); end

  # Returns a hash of empty values for all the values that are in the given
  # StripeObject.
  #
  # source://stripe//lib/stripe/stripe_object.rb#594
  def empty_values(obj); end

  class << self
    # Sets the given parameter name to one which is known to be an additive
    # object.
    #
    # Additive objects are subobjects in the API that don't have the same
    # semantics as most subobjects, which are fully replaced when they're set.
    # This is best illustrated by example. The `source` parameter sent when
    # updating a subscription is *not* additive; if we set it:
    #
    #     source[object]=card&source[number]=123
    #
    # We expect the old `source` object to have been overwritten completely. If
    # the previous source had an `address_state` key associated with it and we
    # didn't send one this time, that value of `address_state` is gone.
    #
    # By contrast, additive objects are those that will have new data added to
    # them while keeping any existing data in place. The only known case of its
    # use is for `metadata`, but it could in theory be more general. As an
    # example, say we have a `metadata` object that looks like this on the
    # server side:
    #
    #     metadata = { old: "old_value" }
    #
    # If we update the object with `metadata[new]=new_value`, the server side
    # object now has *both* fields:
    #
    #     metadata = { old: "old_value", new: "new_value" }
    #
    # This is okay in itself because usually users will want to treat it as
    # additive:
    #
    #     obj.metadata[:new] = "new_value"
    #     obj.save
    #
    # However, in other cases, they may want to replace the entire existing
    # contents:
    #
    #     obj.metadata = { new: "new_value" }
    #     obj.save
    #
    # This is where things get a little bit tricky because in order to clear
    # any old keys that may have existed, we actually have to send an explicit
    # empty string to the server. So the operation above would have to send
    # this form to get the intended behavior:
    #
    #     metadata[old]=&metadata[new]=new_value
    #
    # This method allows us to track which parameters are considered additive,
    # and lets us behave correctly where appropriate when serializing
    # parameters to be sent.
    #
    # source://stripe//lib/stripe/stripe_object.rb#63
    def additive_object_param(name); end

    # Returns whether the given name is an additive object parameter. See
    # `.additive_object_param` for details.
    #
    # @return [Boolean]
    #
    # source://stripe//lib/stripe/stripe_object.rb#70
    def additive_object_param?(name); end

    # source://stripe//lib/stripe/stripe_object.rb#90
    def construct_from(values, opts = T.unsafe(nil), last_response = T.unsafe(nil), api_mode = T.unsafe(nil), requestor = T.unsafe(nil)); end

    # A protected field is one that doesn't get an accessor assigned to it
    # (i.e. `obj.public = ...`) and one which is not allowed to be updated via
    # the class level `Model.update(id, { ... })`.
    #
    # source://stripe//lib/stripe/stripe_object.rb#273
    def protected_fields; end

    private

    # Produces a deep copy of the given object including support for arrays,
    # hashes, and StripeObjects.
    #
    # source://stripe//lib/stripe/stripe_object.rb#561
    def deep_copy(obj, api_mode:); end
  end
end

# When designing APIs, we now make a conscious effort server-side to avoid
# naming fields after important built-ins in various languages (e.g. class,
# method, etc.).
#
# However, a long time ago we made the mistake (either consciously or by
# accident) of initializing our `metadata` fields as instances of
# `StripeObject`, and metadata can have a wide range of different keys
# defined in it. This is somewhat a convenient in that it allows users to
# access data like `obj.metadata.my_field`, but is almost certainly not
# worth the cost.
#
# Naming metadata fields bad things like `class` causes `initialize_from`
# to produce strange results, so we ban known offenders here.
#
# In a future major version we should consider leaving `metadata` as a hash
# and forcing people to access it with `obj.metadata[:my_field]` because
# the potential for trouble is just too high. For now, reserve names.
#
# source://stripe//lib/stripe/stripe_object.rb#294
Stripe::StripeObject::RESERVED_FIELD_NAMES = T.let(T.unsafe(nil), Array)

# StripeResponse encapsulates some vitals of a response that came back from
# the Stripe API.
#
# source://stripe//lib/stripe/stripe_response.rb#68
class Stripe::StripeResponse
  include ::Stripe::StripeResponseBase

  # The data contained by the HTTP body of the response deserialized from
  # JSON.
  #
  # source://stripe//lib/stripe/stripe_response.rb#72
  def data; end

  # The data contained by the HTTP body of the response deserialized from
  # JSON.
  #
  # source://stripe//lib/stripe/stripe_response.rb#72
  def data=(_arg0); end

  # The raw HTTP body of the response.
  #
  # source://stripe//lib/stripe/stripe_response.rb#75
  def http_body; end

  # The raw HTTP body of the response.
  #
  # source://stripe//lib/stripe/stripe_response.rb#75
  def http_body=(_arg0); end

  class << self
    # Initializes a StripeResponse object from a Net::HTTP::HTTPResponse
    # object.
    #
    # source://stripe//lib/stripe/stripe_response.rb#79
    def from_net_http(http_resp); end
  end
end

# We have to alias StripeResponseHeaders to StripeResponse::Headers, as this
# class used to be embedded within StripeResponse and we want to be backwards
# compatible.
#
# source://stripe//lib/stripe/stripe_response.rb#91
Stripe::StripeResponse::Headers = Stripe::StripeResponseHeaders

# source://stripe//lib/stripe/stripe_response.rb#49
module Stripe::StripeResponseBase
  # A Hash of the HTTP headers of the response.
  #
  # source://stripe//lib/stripe/stripe_response.rb#51
  def http_headers; end

  # A Hash of the HTTP headers of the response.
  #
  # source://stripe//lib/stripe/stripe_response.rb#51
  def http_headers=(_arg0); end

  # The integer HTTP status code of the response.
  #
  # source://stripe//lib/stripe/stripe_response.rb#54
  def http_status; end

  # The integer HTTP status code of the response.
  #
  # source://stripe//lib/stripe/stripe_response.rb#54
  def http_status=(_arg0); end

  # The Stripe request ID of the response.
  #
  # source://stripe//lib/stripe/stripe_response.rb#57
  def request_id; end

  # The Stripe request ID of the response.
  #
  # source://stripe//lib/stripe/stripe_response.rb#57
  def request_id=(_arg0); end

  class << self
    # source://stripe//lib/stripe/stripe_response.rb#59
    def populate_for_net_http(resp, http_resp); end
  end
end

# Headers provides an access wrapper to an API response's header data. It
# mainly exists so that we don't need to expose the entire
# `Net::HTTPResponse` object while still getting some of its benefits like
# case-insensitive access to header names and flattening of header values.
#
# source://stripe//lib/stripe/stripe_response.rb#8
class Stripe::StripeResponseHeaders
  # `hash` is expected to be a hash mapping header names to arrays of
  # header values. This is the default format generated by calling
  # `#to_hash` on a `Net::HTTPResponse` object because headers can be
  # repeated multiple times. Using `#[]` will collapse values down to just
  # the first.
  #
  # @return [StripeResponseHeaders] a new instance of StripeResponseHeaders
  #
  # source://stripe//lib/stripe/stripe_response.rb#19
  def initialize(hash); end

  # source://stripe//lib/stripe/stripe_response.rb#42
  def [](name); end

  class << self
    # Initializes a Headers object from a Net::HTTP::HTTPResponse object.
    #
    # source://stripe//lib/stripe/stripe_response.rb#10
    def from_net_http(resp); end
  end
end

# source://stripe//lib/stripe/stripe_service.rb#5
class Stripe::StripeService
  # Initializes a new StripeService
  #
  # @return [StripeService] a new instance of StripeService
  #
  # source://stripe//lib/stripe/stripe_service.rb#7
  def initialize(requestor); end

  # source://stripe//lib/stripe/stripe_service.rb#11
  def request(method:, path:, base_address:, params: T.unsafe(nil), opts: T.unsafe(nil)); end

  # source://stripe//lib/stripe/stripe_service.rb#21
  def request_stream(method:, path:, base_address:, params: T.unsafe(nil), opts: T.unsafe(nil), &read_body_chunk_block); end
end

# Subscriptions allow you to charge a customer on a recurring basis.
#
# Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
#
# source://stripe//lib/stripe/resources/subscription.rb#8
class Stripe::Subscription < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Search
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Cancels a customer's subscription immediately. The customer won't be charged again for the subscription. After it's canceled, you can no longer update the subscription or its [metadata](https://stripe.com/metadata).
  #
  # Any pending invoice items that you've created are still charged at the end of the period, unless manually [deleted](https://stripe.com/docs/api#delete_invoiceitem). If you've set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed.
  #
  # By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.
  #
  # source://stripe//lib/stripe/resources/subscription.rb#24
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Removes the currently applied discount on a subscription.
  #
  # source://stripe//lib/stripe/resources/subscription.rb#59
  def delete_discount(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become active, and if payment fails the subscription will be past_due. The resumption invoice will void automatically if not paid by the expiration date.
  #
  # source://stripe//lib/stripe/resources/subscription.rb#84
  def resume(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/api_resource.rb#51
  def source=(value); end

  class << self
    # Cancels a customer's subscription immediately. The customer won't be charged again for the subscription. After it's canceled, you can no longer update the subscription or its [metadata](https://stripe.com/metadata).
    #
    # Any pending invoice items that you've created are still charged at the end of the period, unless manually [deleted](https://stripe.com/docs/api#delete_invoiceitem). If you've set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed.
    #
    # By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.
    #
    # source://stripe//lib/stripe/resources/subscription.rb#38
    def cancel(subscription_exposed_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.
    #
    # When you create a subscription with collection_method=charge_automatically, the first invoice is finalized as part of the request.
    # The payment_behavior parameter determines the exact behavior of the initial payment.
    #
    # To start subscriptions where the first invoice always begins in a draft status, use [subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules#managing) instead.
    # Schedules provide the flexibility to model more complex billing configurations that change over time.
    #
    # source://stripe//lib/stripe/resources/subscription.rb#54
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Removes the currently applied discount on a subscription.
    #
    # source://stripe//lib/stripe/resources/subscription.rb#69
    def delete_discount(subscription_exposed_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify status=canceled.
    #
    # source://stripe//lib/stripe/resources/subscription.rb#79
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/subscription.rb#15
    def object_name; end

    # Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become active, and if payment fails the subscription will be past_due. The resumption invoice will void automatically if not paid by the expiration date.
    #
    # source://stripe//lib/stripe/resources/subscription.rb#94
    def resume(subscription, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/subscription.rb#103
    def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/subscription.rb#112
    def search_auto_paging_each(params = T.unsafe(nil), opts = T.unsafe(nil), &blk); end

    # Updates an existing subscription to match the specified parameters.
    # When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
    # To preview how the proration is calculated, use the [create preview](https://stripe.com/docs/api/invoices/create_preview) endpoint.
    #
    # By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 price, they'll be billed 100 immediately. If on May 15 they switch to a 200 price, then on June 1 they'll be billed 250 (200 for a renewal of her subscription, plus a 50 prorating adjustment for half of the previous month's 100 difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.
    #
    # Switching prices does not normally change the billing date or generate an immediate charge unless:
    #
    #
    # The billing interval is changed (for example, from monthly to yearly).
    # The subscription moves from free to paid.
    # A trial starts or ends.
    #
    #
    # In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://stripe.com/docs/billing/subscriptions/upgrade-downgrade#immediate-payment).
    #
    # If you want to charge for an upgrade immediately, pass proration_behavior as always_invoice to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass create_prorations, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription's renewal date, you need to manually [invoice the customer](https://stripe.com/docs/api/invoices/create).
    #
    # If you don't want to prorate, set the proration_behavior option to none. With this option, the customer is billed 100 on May 1 and 200 on June 1. Similarly, if you set proration_behavior to none when switching between different billing intervals (for example, from monthly to yearly), we don't generate any credits for the old subscription's unused time. We still reset the billing date and bill immediately for the new subscription.
    #
    # Updating the quantity on a subscription many times in an hour may result in [rate limiting. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing](https://stripe.com/docs/rate-limits) instead.
    #
    # source://stripe//lib/stripe/resources/subscription.rb#137
    def update(subscription_exposed_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/subscription.rb#14
Stripe::Subscription::OBJECT_NAME = T.let(T.unsafe(nil), String)

# Subscription items allow you to create customer subscriptions with more than
# one plan, making it easy to represent complex billing relationships.
#
# source://stripe//lib/stripe/resources/subscription_item.rb#7
class Stripe::SubscriptionItem < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.
  #
  # source://stripe//lib/stripe/resources/subscription_item.rb#45
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Adds a new item to an existing subscription. No existing items will be changed or replaced.
    #
    # source://stripe//lib/stripe/resources/subscription_item.rb#25
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_usage_record(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.
    #
    # source://stripe//lib/stripe/resources/subscription_item.rb#35
    def delete(item, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your subscription items for a given subscription.
    #
    # source://stripe//lib/stripe/resources/subscription_item.rb#55
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_usage_record_summaries(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/subscription_item.rb#15
    def object_name; end

    # Updates the plan or quantity of an item on a current subscription.
    #
    # source://stripe//lib/stripe/resources/subscription_item.rb#65
    def update(item, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def usage_record_summarys_url(id, nested_id = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def usage_records_url(id, nested_id = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/subscription_item.rb#14
Stripe::SubscriptionItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/subscription_item_service.rb#5
class Stripe::SubscriptionItemService < ::Stripe::StripeService
  # @return [SubscriptionItemService] a new instance of SubscriptionItemService
  #
  # source://stripe//lib/stripe/services/subscription_item_service.rb#8
  def initialize(requestor); end

  # Adds a new item to an existing subscription. No existing items will be changed or replaced.
  #
  # source://stripe//lib/stripe/services/subscription_item_service.rb#15
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.
  #
  # source://stripe//lib/stripe/services/subscription_item_service.rb#26
  def delete(item, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your subscription items for a given subscription.
  #
  # source://stripe//lib/stripe/services/subscription_item_service.rb#37
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the subscription item with the given ID.
  #
  # source://stripe//lib/stripe/services/subscription_item_service.rb#48
  def retrieve(item, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the plan or quantity of an item on a current subscription.
  #
  # source://stripe//lib/stripe/services/subscription_item_service.rb#59
  def update(item, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute usage_record_summaries.
  #
  # source://stripe//lib/stripe/services/subscription_item_service.rb#6
  def usage_record_summaries; end

  # Returns the value of attribute usage_records.
  #
  # source://stripe//lib/stripe/services/subscription_item_service.rb#6
  def usage_records; end
end

# source://stripe//lib/stripe/services/subscription_item_usage_record_service.rb#5
class Stripe::SubscriptionItemUsageRecordService < ::Stripe::StripeService
  # Creates a usage record for a specified subscription item and date, and fills it with a quantity.
  #
  # Usage records provide quantity information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the [metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing) plan, Stripe helps you send accurate invoices to your customers.
  #
  # The default calculation for usage is to add up all the quantity values of the usage records within a billing period. You can change this default behavior with the billing plan's aggregate_usage [parameter](https://stripe.com/docs/api/plans/create#create_plan-aggregate_usage). When there is more than one usage record with the same timestamp, Stripe adds the quantity values together. In most cases, this is the desired resolution, however, you can change this behavior with the action parameter.
  #
  # The default pricing model for metered billing is [per-unit pricing. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing](https://stripe.com/docs/api/plans/object#plan_object-billing_scheme) model.
  #
  # source://stripe//lib/stripe/services/subscription_item_usage_record_service.rb#13
  def create(subscription_item, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/subscription_item_usage_record_summary_service.rb#5
class Stripe::SubscriptionItemUsageRecordSummaryService < ::Stripe::StripeService
  # For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that's been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).
  #
  # The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn't ended yet. Since new usage records can still be added, the returned summary information for the subscription item's ID should be seen as unstable until the subscription billing period ends.
  #
  # source://stripe//lib/stripe/services/subscription_item_usage_record_summary_service.rb#9
  def list(subscription_item, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
#
# Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
#
# source://stripe//lib/stripe/resources/subscription_schedule.rb#8
class Stripe::SubscriptionSchedule < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active.
  #
  # source://stripe//lib/stripe/resources/subscription_schedule.rb#19
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is not_started or active. If the subscription schedule is currently associated with a subscription, releasing it will remove its subscription property and set the subscription's ID to the released_subscription property.
  #
  # source://stripe//lib/stripe/resources/subscription_schedule.rb#59
  def release(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active.
    #
    # source://stripe//lib/stripe/resources/subscription_schedule.rb#29
    def cancel(schedule, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.
    #
    # source://stripe//lib/stripe/resources/subscription_schedule.rb#39
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Retrieves the list of your subscription schedules.
    #
    # source://stripe//lib/stripe/resources/subscription_schedule.rb#49
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/subscription_schedule.rb#14
    def object_name; end

    # Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is not_started or active. If the subscription schedule is currently associated with a subscription, releasing it will remove its subscription property and set the subscription's ID to the released_subscription property.
    #
    # source://stripe//lib/stripe/resources/subscription_schedule.rb#69
    def release(schedule, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates an existing subscription schedule.
    #
    # source://stripe//lib/stripe/resources/subscription_schedule.rb#79
    def update(schedule, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/subscription_schedule.rb#13
Stripe::SubscriptionSchedule::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/subscription_schedule_service.rb#5
class Stripe::SubscriptionScheduleService < ::Stripe::StripeService
  # Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active.
  #
  # source://stripe//lib/stripe/services/subscription_schedule_service.rb#7
  def cancel(schedule, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.
  #
  # source://stripe//lib/stripe/services/subscription_schedule_service.rb#18
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the list of your subscription schedules.
  #
  # source://stripe//lib/stripe/services/subscription_schedule_service.rb#29
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is not_started or active. If the subscription schedule is currently associated with a subscription, releasing it will remove its subscription property and set the subscription's ID to the released_subscription property.
  #
  # source://stripe//lib/stripe/services/subscription_schedule_service.rb#40
  def release(schedule, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.
  #
  # source://stripe//lib/stripe/services/subscription_schedule_service.rb#51
  def retrieve(schedule, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing subscription schedule.
  #
  # source://stripe//lib/stripe/services/subscription_schedule_service.rb#62
  def update(schedule, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/subscription_service.rb#5
class Stripe::SubscriptionService < ::Stripe::StripeService
  # Cancels a customer's subscription immediately. The customer won't be charged again for the subscription. After it's canceled, you can no longer update the subscription or its [metadata](https://stripe.com/metadata).
  #
  # Any pending invoice items that you've created are still charged at the end of the period, unless manually [deleted](https://stripe.com/docs/api#delete_invoiceitem). If you've set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed.
  #
  # By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.
  #
  # source://stripe//lib/stripe/services/subscription_service.rb#11
  def cancel(subscription_exposed_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.
  #
  # When you create a subscription with collection_method=charge_automatically, the first invoice is finalized as part of the request.
  # The payment_behavior parameter determines the exact behavior of the initial payment.
  #
  # To start subscriptions where the first invoice always begins in a draft status, use [subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules#managing) instead.
  # Schedules provide the flexibility to model more complex billing configurations that change over time.
  #
  # source://stripe//lib/stripe/services/subscription_service.rb#28
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Removes the currently applied discount on a subscription.
  #
  # source://stripe//lib/stripe/services/subscription_service.rb#39
  def delete_discount(subscription_exposed_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify status=canceled.
  #
  # source://stripe//lib/stripe/services/subscription_service.rb#50
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become active, and if payment fails the subscription will be past_due. The resumption invoice will void automatically if not paid by the expiration date.
  #
  # source://stripe//lib/stripe/services/subscription_service.rb#61
  def resume(subscription, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the subscription with the given ID.
  #
  # source://stripe//lib/stripe/services/subscription_service.rb#72
  def retrieve(subscription_exposed_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Search for subscriptions you've previously created using Stripe's [Search Query Language](https://stripe.com/docs/search#search-query-language).
  # Don't use search in read-after-write flows where strict consistency is necessary. Under normal operating
  # conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
  # to an hour behind during outages. Search functionality is not available to merchants in India.
  #
  # source://stripe//lib/stripe/services/subscription_service.rb#86
  def search(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing subscription to match the specified parameters.
  # When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
  # To preview how the proration is calculated, use the [create preview](https://stripe.com/docs/api/invoices/create_preview) endpoint.
  #
  # By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 price, they'll be billed 100 immediately. If on May 15 they switch to a 200 price, then on June 1 they'll be billed 250 (200 for a renewal of her subscription, plus a 50 prorating adjustment for half of the previous month's 100 difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.
  #
  # Switching prices does not normally change the billing date or generate an immediate charge unless:
  #
  #
  # The billing interval is changed (for example, from monthly to yearly).
  # The subscription moves from free to paid.
  # A trial starts or ends.
  #
  #
  # In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://stripe.com/docs/billing/subscriptions/upgrade-downgrade#immediate-payment).
  #
  # If you want to charge for an upgrade immediately, pass proration_behavior as always_invoice to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass create_prorations, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription's renewal date, you need to manually [invoice the customer](https://stripe.com/docs/api/invoices/create).
  #
  # If you don't want to prorate, set the proration_behavior option to none. With this option, the customer is billed 100 on May 1 and 200 on June 1. Similarly, if you set proration_behavior to none when switching between different billing intervals (for example, from monthly to yearly), we don't generate any credits for the old subscription's unused time. We still reset the billing date and bill immediately for the new subscription.
  #
  # Updating the quantity on a subscription many times in an hour may result in [rate limiting. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing](https://stripe.com/docs/rate-limits) instead.
  #
  # source://stripe//lib/stripe/services/subscription_service.rb#117
  def update(subscription_exposed_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/tax/calculation.rb#5
module Stripe::Tax; end

# A Tax Calculation allows you to calculate the tax to collect from your customer.
#
# Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom)
#
# source://stripe//lib/stripe/resources/tax/calculation.rb#9
class Stripe::Tax::Calculation < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  # Retrieves the line items of a tax calculation as a collection, if the calculation hasn't expired.
  #
  # source://stripe//lib/stripe/resources/tax/calculation.rb#28
  def list_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Calculates tax based on the input and returns a Tax Calculation object.
    #
    # source://stripe//lib/stripe/resources/tax/calculation.rb#18
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Retrieves the line items of a tax calculation as a collection, if the calculation hasn't expired.
    #
    # source://stripe//lib/stripe/resources/tax/calculation.rb#38
    def list_line_items(calculation, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/tax/calculation.rb#13
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/tax/calculation.rb#12
Stripe::Tax::Calculation::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/tax/calculation_line_item.rb#6
class Stripe::Tax::CalculationLineItem < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/tax/calculation_line_item.rb#8
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/tax/calculation_line_item.rb#7
Stripe::Tax::CalculationLineItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/tax/calculation_line_item_service.rb#6
class Stripe::Tax::CalculationLineItemService < ::Stripe::StripeService
  # Retrieves the line items of a tax calculation as a collection, if the calculation hasn't expired.
  #
  # source://stripe//lib/stripe/services/tax/calculation_line_item_service.rb#8
  def list(calculation, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/tax/calculation_service.rb#6
class Stripe::Tax::CalculationService < ::Stripe::StripeService
  # @return [CalculationService] a new instance of CalculationService
  #
  # source://stripe//lib/stripe/services/tax/calculation_service.rb#9
  def initialize(requestor); end

  # Calculates tax based on the input and returns a Tax Calculation object.
  #
  # source://stripe//lib/stripe/services/tax/calculation_service.rb#15
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute line_items.
  #
  # source://stripe//lib/stripe/services/tax/calculation_service.rb#7
  def line_items; end

  # Retrieves a Tax Calculation object, if the calculation hasn't expired.
  #
  # source://stripe//lib/stripe/services/tax/calculation_service.rb#26
  def retrieve(calculation, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Tax `Registration` lets us know that your business is registered to collect tax on payments within a region, enabling you to [automatically collect tax](https://stripe.com/docs/tax).
#
# Stripe doesn't register on your behalf with the relevant authorities when you create a Tax `Registration` object. For more information on how to register to collect tax, see [our guide](https://stripe.com/docs/tax/registering).
#
# Related guide: [Using the Registrations API](https://stripe.com/docs/tax/registrations-api)
#
# source://stripe//lib/stripe/resources/tax/registration.rb#11
class Stripe::Tax::Registration < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a new Tax Registration object.
    #
    # source://stripe//lib/stripe/resources/tax/registration.rb#22
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Tax Registration objects.
    #
    # source://stripe//lib/stripe/resources/tax/registration.rb#32
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/tax/registration.rb#17
    def object_name; end

    # Updates an existing Tax Registration object.
    #
    # A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting expires_at.
    #
    # source://stripe//lib/stripe/resources/tax/registration.rb#44
    def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/tax/registration.rb#16
Stripe::Tax::Registration::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/tax/registration_service.rb#6
class Stripe::Tax::RegistrationService < ::Stripe::StripeService
  # Creates a new Tax Registration object.
  #
  # source://stripe//lib/stripe/services/tax/registration_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Tax Registration objects.
  #
  # source://stripe//lib/stripe/services/tax/registration_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a Tax Registration object.
  #
  # source://stripe//lib/stripe/services/tax/registration_service.rb#30
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing Tax Registration object.
  #
  # A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting expires_at.
  #
  # source://stripe//lib/stripe/services/tax/registration_service.rb#43
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.
#
# Related guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)
#
# source://stripe//lib/stripe/resources/tax/settings.rb#9
class Stripe::Tax::Settings < ::Stripe::SingletonAPIResource
  include ::Stripe::APIOperations::SingletonSave
  extend ::Stripe::APIOperations::SingletonSave::ClassMethods

  class << self
    # source://stripe//lib/stripe/resources/tax/settings.rb#12
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/tax/settings.rb#11
Stripe::Tax::Settings::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/tax/settings_service.rb#6
class Stripe::Tax::SettingsService < ::Stripe::StripeService
  # Retrieves Tax Settings for a merchant.
  #
  # source://stripe//lib/stripe/services/tax/settings_service.rb#8
  def retrieve(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates Tax Settings parameters used in tax calculations. All parameters are editable but none can be removed once set.
  #
  # source://stripe//lib/stripe/services/tax/settings_service.rb#19
  def update(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Tax Transaction records the tax collected from or refunded to your customer.
#
# Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom#tax-transaction)
#
# source://stripe//lib/stripe/resources/tax/transaction.rb#9
class Stripe::Tax::Transaction < ::Stripe::APIResource
  # Retrieves the line items of a committed standalone transaction as a collection.
  #
  # source://stripe//lib/stripe/resources/tax/transaction.rb#36
  def list_line_items(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a Tax Transaction from a calculation, if that calculation hasn't expired. Calculations expire after 90 days.
    #
    # source://stripe//lib/stripe/resources/tax/transaction.rb#16
    def create_from_calculation(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Partially or fully reverses a previously created Transaction.
    #
    # source://stripe//lib/stripe/resources/tax/transaction.rb#26
    def create_reversal(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Retrieves the line items of a committed standalone transaction as a collection.
    #
    # source://stripe//lib/stripe/resources/tax/transaction.rb#46
    def list_line_items(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/tax/transaction.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/tax/transaction.rb#10
Stripe::Tax::Transaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/tax/transaction_line_item.rb#6
class Stripe::Tax::TransactionLineItem < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/tax/transaction_line_item.rb#8
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/tax/transaction_line_item.rb#7
Stripe::Tax::TransactionLineItem::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/tax/transaction_line_item_service.rb#6
class Stripe::Tax::TransactionLineItemService < ::Stripe::StripeService
  # Retrieves the line items of a committed standalone transaction as a collection.
  #
  # source://stripe//lib/stripe/services/tax/transaction_line_item_service.rb#8
  def list(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/tax/transaction_service.rb#6
class Stripe::Tax::TransactionService < ::Stripe::StripeService
  # @return [TransactionService] a new instance of TransactionService
  #
  # source://stripe//lib/stripe/services/tax/transaction_service.rb#9
  def initialize(requestor); end

  # Creates a Tax Transaction from a calculation, if that calculation hasn't expired. Calculations expire after 90 days.
  #
  # source://stripe//lib/stripe/services/tax/transaction_service.rb#15
  def create_from_calculation(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Partially or fully reverses a previously created Transaction.
  #
  # source://stripe//lib/stripe/services/tax/transaction_service.rb#26
  def create_reversal(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute line_items.
  #
  # source://stripe//lib/stripe/services/tax/transaction_service.rb#7
  def line_items; end

  # Retrieves a Tax Transaction object.
  #
  # source://stripe//lib/stripe/services/tax/transaction_service.rb#37
  def retrieve(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.
#
# source://stripe//lib/stripe/resources/tax_code.rb#6
class Stripe::TaxCode < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # A list of [all tax codes available](https://stripe.com/docs/tax/tax-categories) to add to Products in order to allow specific tax calculations.
    #
    # source://stripe//lib/stripe/resources/tax_code.rb#15
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/tax_code.rb#10
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/tax_code.rb#9
Stripe::TaxCode::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/tax_code_service.rb#5
class Stripe::TaxCodeService < ::Stripe::StripeService
  # A list of [all tax codes available](https://stripe.com/docs/tax/tax-categories) to add to Products in order to allow specific tax calculations.
  #
  # source://stripe//lib/stripe/services/tax_code_service.rb#7
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.
  #
  # source://stripe//lib/stripe/services/tax_code_service.rb#12
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.
# Customer and account tax IDs get displayed on related invoices and credit notes.
#
# Related guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)
#
# source://stripe//lib/stripe/resources/tax_id.rb#9
class Stripe::TaxId < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List

  # Deletes an existing account or customer tax_id object.
  #
  # source://stripe//lib/stripe/resources/tax_id.rb#35
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a new account or customer tax_id object.
    #
    # source://stripe//lib/stripe/resources/tax_id.rb#20
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes an existing account or customer tax_id object.
    #
    # source://stripe//lib/stripe/resources/tax_id.rb#25
    def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of tax IDs.
    #
    # source://stripe//lib/stripe/resources/tax_id.rb#45
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/tax_id.rb#15
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/tax_id.rb#14
Stripe::TaxId::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/tax_id_service.rb#5
class Stripe::TaxIdService < ::Stripe::StripeService
  # Creates a new account or customer tax_id object.
  #
  # source://stripe//lib/stripe/services/tax_id_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes an existing account or customer tax_id object.
  #
  # source://stripe//lib/stripe/services/tax_id_service.rb#12
  def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of tax IDs.
  #
  # source://stripe//lib/stripe/services/tax_id_service.rb#23
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves an account or customer tax_id object.
  #
  # source://stripe//lib/stripe/services/tax_id_service.rb#28
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
#
# Related guide: [Tax rates](https://stripe.com/docs/billing/taxes/tax-rates)
#
# source://stripe//lib/stripe/resources/tax_rate.rb#8
class Stripe::TaxRate < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # Creates a new tax rate.
    #
    # source://stripe//lib/stripe/resources/tax_rate.rb#19
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.
    #
    # source://stripe//lib/stripe/resources/tax_rate.rb#24
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/tax_rate.rb#14
    def object_name; end

    # Updates an existing tax rate.
    #
    # source://stripe//lib/stripe/resources/tax_rate.rb#29
    def update(tax_rate, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/tax_rate.rb#13
Stripe::TaxRate::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/tax_rate_service.rb#5
class Stripe::TaxRateService < ::Stripe::StripeService
  # Creates a new tax rate.
  #
  # source://stripe//lib/stripe/services/tax_rate_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.
  #
  # source://stripe//lib/stripe/services/tax_rate_service.rb#12
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a tax rate with the given ID
  #
  # source://stripe//lib/stripe/services/tax_rate_service.rb#17
  def retrieve(tax_rate, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates an existing tax rate.
  #
  # source://stripe//lib/stripe/services/tax_rate_service.rb#28
  def update(tax_rate, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/tax_service.rb#5
class Stripe::TaxService < ::Stripe::StripeService
  # @return [TaxService] a new instance of TaxService
  #
  # source://stripe//lib/stripe/services/tax_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute calculations.
  #
  # source://stripe//lib/stripe/services/tax_service.rb#6
  def calculations; end

  # Returns the value of attribute registrations.
  #
  # source://stripe//lib/stripe/services/tax_service.rb#6
  def registrations; end

  # Returns the value of attribute settings.
  #
  # source://stripe//lib/stripe/services/tax_service.rb#6
  def settings; end

  # Returns the value of attribute transactions.
  #
  # source://stripe//lib/stripe/services/tax_service.rb#6
  def transactions; end
end

# class definitions: The beginning of the section generated from our OpenAPI spec
#
# source://stripe//lib/stripe/errors.rb#172
class Stripe::TemporarySessionExpiredError < ::Stripe::StripeError; end

# source://stripe//lib/stripe/resources/terminal/configuration.rb#5
module Stripe::Terminal; end

# A Configurations object represents how features should be configured for terminal readers.
#
# source://stripe//lib/stripe/resources/terminal/configuration.rb#7
class Stripe::Terminal::Configuration < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Deletes a Configuration object.
  #
  # source://stripe//lib/stripe/resources/terminal/configuration.rb#39
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a new Configuration object.
    #
    # source://stripe//lib/stripe/resources/terminal/configuration.rb#19
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes a Configuration object.
    #
    # source://stripe//lib/stripe/resources/terminal/configuration.rb#29
    def delete(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Configuration objects.
    #
    # source://stripe//lib/stripe/resources/terminal/configuration.rb#49
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/terminal/configuration.rb#14
    def object_name; end

    # Updates a new Configuration object.
    #
    # source://stripe//lib/stripe/resources/terminal/configuration.rb#59
    def update(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/terminal/configuration.rb#13
Stripe::Terminal::Configuration::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/terminal/configuration_service.rb#6
class Stripe::Terminal::ConfigurationService < ::Stripe::StripeService
  # Creates a new Configuration object.
  #
  # source://stripe//lib/stripe/services/terminal/configuration_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a Configuration object.
  #
  # source://stripe//lib/stripe/services/terminal/configuration_service.rb#19
  def delete(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Configuration objects.
  #
  # source://stripe//lib/stripe/services/terminal/configuration_service.rb#30
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a Configuration object.
  #
  # source://stripe//lib/stripe/services/terminal/configuration_service.rb#41
  def retrieve(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a new Configuration object.
  #
  # source://stripe//lib/stripe/services/terminal/configuration_service.rb#52
  def update(configuration, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
#
# Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
#
# source://stripe//lib/stripe/resources/terminal/connection_token.rb#9
class Stripe::Terminal::ConnectionToken < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.
    #
    # source://stripe//lib/stripe/resources/terminal/connection_token.rb#18
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/terminal/connection_token.rb#13
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/terminal/connection_token.rb#12
Stripe::Terminal::ConnectionToken::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/terminal/connection_token_service.rb#6
class Stripe::Terminal::ConnectionTokenService < ::Stripe::StripeService
  # To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.
  #
  # source://stripe//lib/stripe/services/terminal/connection_token_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Location represents a grouping of readers.
#
# Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
#
# source://stripe//lib/stripe/resources/terminal/location.rb#9
class Stripe::Terminal::Location < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Deletes a Location object.
  #
  # source://stripe//lib/stripe/resources/terminal/location.rb#42
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Creates a new Location object.
    # For further details, including which address fields are required in each country, see the [Manage locations](https://stripe.com/docs/terminal/fleet/locations) guide.
    #
    # source://stripe//lib/stripe/resources/terminal/location.rb#22
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes a Location object.
    #
    # source://stripe//lib/stripe/resources/terminal/location.rb#32
    def delete(location, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Location objects.
    #
    # source://stripe//lib/stripe/resources/terminal/location.rb#52
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/terminal/location.rb#16
    def object_name; end

    # Updates a Location object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # source://stripe//lib/stripe/resources/terminal/location.rb#62
    def update(location, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/terminal/location.rb#15
Stripe::Terminal::Location::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/terminal/location_service.rb#6
class Stripe::Terminal::LocationService < ::Stripe::StripeService
  # Creates a new Location object.
  # For further details, including which address fields are required in each country, see the [Manage locations](https://stripe.com/docs/terminal/fleet/locations) guide.
  #
  # source://stripe//lib/stripe/services/terminal/location_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a Location object.
  #
  # source://stripe//lib/stripe/services/terminal/location_service.rb#20
  def delete(location, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Location objects.
  #
  # source://stripe//lib/stripe/services/terminal/location_service.rb#31
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a Location object.
  #
  # source://stripe//lib/stripe/services/terminal/location_service.rb#42
  def retrieve(location, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a Location object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # source://stripe//lib/stripe/services/terminal/location_service.rb#53
  def update(location, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A Reader represents a physical device for accepting payment details.
#
# Related guide: [Connecting to a reader](https://stripe.com/docs/terminal/payments/connect-reader)
#
# source://stripe//lib/stripe/resources/terminal/reader.rb#9
class Stripe::Terminal::Reader < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Cancels the current reader action.
  #
  # source://stripe//lib/stripe/resources/terminal/reader.rb#21
  def cancel_action(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a Reader object.
  #
  # source://stripe//lib/stripe/resources/terminal/reader.rb#61
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Initiates a payment flow on a Reader.
  #
  # source://stripe//lib/stripe/resources/terminal/reader.rb#81
  def process_payment_intent(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Initiates a setup intent flow on a Reader.
  #
  # source://stripe//lib/stripe/resources/terminal/reader.rb#101
  def process_setup_intent(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Initiates a refund on a Reader
  #
  # source://stripe//lib/stripe/resources/terminal/reader.rb#121
  def refund_payment(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Sets reader display to show cart details.
  #
  # source://stripe//lib/stripe/resources/terminal/reader.rb#141
  def set_reader_display(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/terminal/reader.rb#170
  def test_helpers; end

  class << self
    # Cancels the current reader action.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#31
    def cancel_action(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a new Reader object.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#41
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes a Reader object.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#51
    def delete(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of Reader objects.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#71
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/terminal/reader.rb#16
    def object_name; end

    # Initiates a payment flow on a Reader.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#91
    def process_payment_intent(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Initiates a setup intent flow on a Reader.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#111
    def process_setup_intent(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Initiates a refund on a Reader
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#131
    def refund_payment(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Sets reader display to show cart details.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#151
    def set_reader_display(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates a Reader object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#161
    def update(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/terminal/reader.rb#15
Stripe::Terminal::Reader::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/terminal/reader.rb#174
class Stripe::Terminal::Reader::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.
  #
  # source://stripe//lib/stripe/resources/terminal/reader.rb#191
  def present_payment_method(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.
    #
    # source://stripe//lib/stripe/resources/terminal/reader.rb#181
    def present_payment_method(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/terminal/reader.rb#176
    def resource_class; end
  end
end

# source://stripe//lib/stripe/resources/terminal/reader.rb#175
Stripe::Terminal::Reader::TestHelpers::RESOURCE_CLASS = Stripe::Terminal::Reader

# source://stripe//lib/stripe/services/terminal/reader_service.rb#6
class Stripe::Terminal::ReaderService < ::Stripe::StripeService
  # Cancels the current reader action.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#8
  def cancel_action(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a new Reader object.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#19
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a Reader object.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#30
  def delete(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of Reader objects.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#41
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Initiates a payment flow on a Reader.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#52
  def process_payment_intent(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Initiates a setup intent flow on a Reader.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#63
  def process_setup_intent(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Initiates a refund on a Reader
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#74
  def refund_payment(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a Reader object.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#85
  def retrieve(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Sets reader display to show cart details.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#96
  def set_reader_display(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a Reader object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # source://stripe//lib/stripe/services/terminal/reader_service.rb#107
  def update(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/terminal_service.rb#5
class Stripe::TerminalService < ::Stripe::StripeService
  # @return [TerminalService] a new instance of TerminalService
  #
  # source://stripe//lib/stripe/services/terminal_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute configurations.
  #
  # source://stripe//lib/stripe/services/terminal_service.rb#6
  def configurations; end

  # Returns the value of attribute connection_tokens.
  #
  # source://stripe//lib/stripe/services/terminal_service.rb#6
  def connection_tokens; end

  # Returns the value of attribute locations.
  #
  # source://stripe//lib/stripe/services/terminal_service.rb#6
  def locations; end

  # Returns the value of attribute readers.
  #
  # source://stripe//lib/stripe/services/terminal_service.rb#6
  def readers; end
end

# source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#5
module Stripe::TestHelpers; end

# source://stripe//lib/stripe/services/test_helpers/confirmation_token_service.rb#6
class Stripe::TestHelpers::ConfirmationTokenService < ::Stripe::StripeService
  # Creates a test mode Confirmation Token server side for your integration tests.
  #
  # source://stripe//lib/stripe/services/test_helpers/confirmation_token_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/customer_service.rb#6
class Stripe::TestHelpers::CustomerService < ::Stripe::StripeService
  # Create an incoming testmode bank transfer
  #
  # source://stripe//lib/stripe/services/test_helpers/customer_service.rb#8
  def fund_cash_balance(customer, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#6
module Stripe::TestHelpers::Issuing; end

# source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#7
class Stripe::TestHelpers::Issuing::AuthorizationService < ::Stripe::StripeService
  # Capture a test-mode authorization.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#9
  def capture(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Create a test-mode authorization.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#20
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Expire a test-mode Authorization.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#31
  def expire(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Finalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#42
  def finalize_amount(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Increment a test-mode Authorization.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#53
  def increment(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#64
  def respond(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Reverse a test-mode Authorization.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/authorization_service.rb#75
  def reverse(authorization, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/issuing/card_service.rb#7
class Stripe::TestHelpers::Issuing::CardService < ::Stripe::StripeService
  # Updates the shipping status of the specified Issuing Card object to delivered.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/card_service.rb#9
  def deliver_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the shipping status of the specified Issuing Card object to failure.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/card_service.rb#20
  def fail_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the shipping status of the specified Issuing Card object to returned.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/card_service.rb#31
  def return_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the shipping status of the specified Issuing Card object to shipped.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/card_service.rb#42
  def ship_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the shipping status of the specified Issuing Card object to submitted. This method requires Stripe Version ‘2024-09-30.acacia' or later.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/card_service.rb#53
  def submit_card(card, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/issuing/personalization_design_service.rb#7
class Stripe::TestHelpers::Issuing::PersonalizationDesignService < ::Stripe::StripeService
  # Updates the status of the specified testmode personalization design object to active.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/personalization_design_service.rb#9
  def activate(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the status of the specified testmode personalization design object to inactive.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/personalization_design_service.rb#20
  def deactivate(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the status of the specified testmode personalization design object to rejected.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/personalization_design_service.rb#31
  def reject(personalization_design, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/issuing/transaction_service.rb#7
class Stripe::TestHelpers::Issuing::TransactionService < ::Stripe::StripeService
  # Allows the user to capture an arbitrary amount, also known as a forced capture.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/transaction_service.rb#9
  def create_force_capture(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Allows the user to refund an arbitrary amount, also known as a unlinked refund.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/transaction_service.rb#20
  def create_unlinked_refund(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Refund a test-mode Transaction.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing/transaction_service.rb#31
  def refund(transaction, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/issuing_service.rb#6
class Stripe::TestHelpers::IssuingService < ::Stripe::StripeService
  # @return [IssuingService] a new instance of IssuingService
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing_service.rb#9
  def initialize(requestor); end

  # Returns the value of attribute authorizations.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing_service.rb#7
  def authorizations; end

  # Returns the value of attribute cards.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing_service.rb#7
  def cards; end

  # Returns the value of attribute personalization_designs.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing_service.rb#7
  def personalization_designs; end

  # Returns the value of attribute transactions.
  #
  # source://stripe//lib/stripe/services/test_helpers/issuing_service.rb#7
  def transactions; end
end

# source://stripe//lib/stripe/services/test_helpers/refund_service.rb#6
class Stripe::TestHelpers::RefundService < ::Stripe::StripeService
  # Expire a refund with a status of requires_action.
  #
  # source://stripe//lib/stripe/services/test_helpers/refund_service.rb#8
  def expire(refund, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/terminal/reader_service.rb#6
module Stripe::TestHelpers::Terminal; end

# source://stripe//lib/stripe/services/test_helpers/terminal/reader_service.rb#7
class Stripe::TestHelpers::Terminal::ReaderService < ::Stripe::StripeService
  # Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.
  #
  # source://stripe//lib/stripe/services/test_helpers/terminal/reader_service.rb#9
  def present_payment_method(reader, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/terminal_service.rb#6
class Stripe::TestHelpers::TerminalService < ::Stripe::StripeService
  # @return [TerminalService] a new instance of TerminalService
  #
  # source://stripe//lib/stripe/services/test_helpers/terminal_service.rb#9
  def initialize(requestor); end

  # Returns the value of attribute readers.
  #
  # source://stripe//lib/stripe/services/test_helpers/terminal_service.rb#7
  def readers; end
end

# A test clock enables deterministic control over objects in testmode. With a test clock, you can create
# objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,
# you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.
#
# source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#9
class Stripe::TestHelpers::TestClock < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List

  # Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to Ready.
  #
  # source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#20
  def advance(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a test clock.
  #
  # source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#60
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to Ready.
    #
    # source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#30
    def advance(test_clock, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a new test clock that can be attached to new customers and quotes.
    #
    # source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#40
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Deletes a test clock.
    #
    # source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#50
    def delete(test_clock, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your test clocks.
    #
    # source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#70
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#15
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/test_helpers/test_clock.rb#14
Stripe::TestHelpers::TestClock::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/test_helpers/test_clock_service.rb#6
class Stripe::TestHelpers::TestClockService < ::Stripe::StripeService
  # Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to Ready.
  #
  # source://stripe//lib/stripe/services/test_helpers/test_clock_service.rb#8
  def advance(test_clock, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a new test clock that can be attached to new customers and quotes.
  #
  # source://stripe//lib/stripe/services/test_helpers/test_clock_service.rb#19
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Deletes a test clock.
  #
  # source://stripe//lib/stripe/services/test_helpers/test_clock_service.rb#30
  def delete(test_clock, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your test clocks.
  #
  # source://stripe//lib/stripe/services/test_helpers/test_clock_service.rb#41
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a test clock.
  #
  # source://stripe//lib/stripe/services/test_helpers/test_clock_service.rb#52
  def retrieve(test_clock, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/treasury/inbound_transfer_service.rb#6
module Stripe::TestHelpers::Treasury; end

# source://stripe//lib/stripe/services/test_helpers/treasury/inbound_transfer_service.rb#7
class Stripe::TestHelpers::Treasury::InboundTransferService < ::Stripe::StripeService
  # Transitions a test mode created InboundTransfer to the failed status. The InboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/inbound_transfer_service.rb#9
  def fail(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the succeeded state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/inbound_transfer_service.rb#20
  def return_inbound_transfer(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created InboundTransfer to the succeeded status. The InboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/inbound_transfer_service.rb#31
  def succeed(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/treasury/outbound_payment_service.rb#7
class Stripe::TestHelpers::Treasury::OutboundPaymentService < ::Stripe::StripeService
  # Transitions a test mode created OutboundPayment to the failed status. The OutboundPayment must already be in the processing state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/outbound_payment_service.rb#9
  def fail(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created OutboundPayment to the posted status. The OutboundPayment must already be in the processing state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/outbound_payment_service.rb#20
  def post(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created OutboundPayment to the returned status. The OutboundPayment must already be in the processing state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/outbound_payment_service.rb#31
  def return_outbound_payment(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the canceled or failed states.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/outbound_payment_service.rb#42
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/treasury/outbound_transfer_service.rb#7
class Stripe::TestHelpers::Treasury::OutboundTransferService < ::Stripe::StripeService
  # Transitions a test mode created OutboundTransfer to the failed status. The OutboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/outbound_transfer_service.rb#9
  def fail(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created OutboundTransfer to the posted status. The OutboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/outbound_transfer_service.rb#20
  def post(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created OutboundTransfer to the returned status. The OutboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/outbound_transfer_service.rb#31
  def return_outbound_transfer(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the canceled or failed states.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/outbound_transfer_service.rb#42
  def update(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/treasury/received_credit_service.rb#7
class Stripe::TestHelpers::Treasury::ReceivedCreditService < ::Stripe::StripeService
  # Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can't directly create ReceivedCredits initiated by third parties.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/received_credit_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/treasury/received_debit_service.rb#7
class Stripe::TestHelpers::Treasury::ReceivedDebitService < ::Stripe::StripeService
  # Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can't directly create ReceivedDebits initiated by third parties.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury/received_debit_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/test_helpers/treasury_service.rb#6
class Stripe::TestHelpers::TreasuryService < ::Stripe::StripeService
  # @return [TreasuryService] a new instance of TreasuryService
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury_service.rb#9
  def initialize(requestor); end

  # Returns the value of attribute inbound_transfers.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury_service.rb#7
  def inbound_transfers; end

  # Returns the value of attribute outbound_payments.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury_service.rb#7
  def outbound_payments; end

  # Returns the value of attribute outbound_transfers.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury_service.rb#7
  def outbound_transfers; end

  # Returns the value of attribute received_credits.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury_service.rb#7
  def received_credits; end

  # Returns the value of attribute received_debits.
  #
  # source://stripe//lib/stripe/services/test_helpers/treasury_service.rb#7
  def received_debits; end
end

# source://stripe//lib/stripe/services/test_helpers_service.rb#5
class Stripe::TestHelpersService < ::Stripe::StripeService
  # @return [TestHelpersService] a new instance of TestHelpersService
  #
  # source://stripe//lib/stripe/services/test_helpers_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute confirmation_tokens.
  #
  # source://stripe//lib/stripe/services/test_helpers_service.rb#6
  def confirmation_tokens; end

  # Returns the value of attribute customers.
  #
  # source://stripe//lib/stripe/services/test_helpers_service.rb#6
  def customers; end

  # Returns the value of attribute issuing.
  #
  # source://stripe//lib/stripe/services/test_helpers_service.rb#6
  def issuing; end

  # Returns the value of attribute refunds.
  #
  # source://stripe//lib/stripe/services/test_helpers_service.rb#6
  def refunds; end

  # Returns the value of attribute terminal.
  #
  # source://stripe//lib/stripe/services/test_helpers_service.rb#6
  def terminal; end

  # Returns the value of attribute test_clocks.
  #
  # source://stripe//lib/stripe/services/test_helpers_service.rb#6
  def test_clocks; end

  # Returns the value of attribute treasury.
  #
  # source://stripe//lib/stripe/services/test_helpers_service.rb#6
  def treasury; end
end

# source://stripe//lib/stripe/thin_event.rb#22
class Stripe::ThinEvent
  # @return [ThinEvent] a new instance of ThinEvent
  #
  # source://stripe//lib/stripe/thin_event.rb#25
  def initialize(event_payload = T.unsafe(nil)); end

  # Returns the value of attribute context.
  #
  # source://stripe//lib/stripe/thin_event.rb#23
  def context; end

  # Returns the value of attribute created.
  #
  # source://stripe//lib/stripe/thin_event.rb#23
  def created; end

  # Returns the value of attribute id.
  #
  # source://stripe//lib/stripe/thin_event.rb#23
  def id; end

  # Returns the value of attribute livemode.
  #
  # source://stripe//lib/stripe/thin_event.rb#23
  def livemode; end

  # Returns the value of attribute reason.
  #
  # source://stripe//lib/stripe/thin_event.rb#23
  def reason; end

  # Returns the value of attribute related_object.
  #
  # source://stripe//lib/stripe/thin_event.rb#23
  def related_object; end

  # Returns the value of attribute type.
  #
  # source://stripe//lib/stripe/thin_event.rb#23
  def type; end
end

# Tokenization is the process Stripe uses to collect sensitive card or bank
# account details, or personally identifiable information (PII), directly from
# your customers in a secure manner. A token representing this information is
# returned to your server to use. Use our
# [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
# on the client-side. This guarantees that no sensitive card data touches your server,
# and allows your integration to operate in a PCI-compliant way.
#
# If you can't use client-side tokenization, you can also create tokens using
# the API with either your publishable or secret API key. If
# your integration uses this method, you're responsible for any PCI compliance
# that it might require, and you must keep your secret API key safe. Unlike with
# client-side tokenization, your customer's information isn't sent directly to
# Stripe, so we can't determine how it's handled or stored.
#
# You can't store or use tokens more than once. To store card or bank account
# information for later use, create [Customer](https://stripe.com/docs/api#customers)
# objects or [External accounts](https://stripe.com/api#external_accounts).
# [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
# performs best with integrations that use client-side tokenization.
#
# source://stripe//lib/stripe/resources/token.rb#25
class Stripe::Token < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create

  class << self
    # Creates a single-use token that represents a bank account's details.
    # You can use this token with any v1 API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a [connected account](https://stripe.com/docs/api#accounts) where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is application, which includes Custom accounts.
    #
    # source://stripe//lib/stripe/resources/token.rb#35
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/token.rb#29
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/token.rb#28
Stripe::Token::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/token_service.rb#5
class Stripe::TokenService < ::Stripe::StripeService
  # Creates a single-use token that represents a bank account's details.
  # You can use this token with any v1 API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a [connected account](https://stripe.com/docs/api#accounts) where [controller.requirement_collection](https://stripe.com/api/accounts/object#account_object-controller-requirement_collection) is application, which includes Custom accounts.
  #
  # source://stripe//lib/stripe/services/token_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the token with the given ID.
  #
  # source://stripe//lib/stripe/services/token_service.rb#13
  def retrieve(token, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# To top up your Stripe balance, you create a top-up object. You can retrieve
# individual top-ups, as well as list all top-ups. Top-ups are identified by a
# unique, random ID.
#
# Related guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)
#
# source://stripe//lib/stripe/resources/topup.rb#10
class Stripe::Topup < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Cancels a top-up. Only pending top-ups can be canceled.
  #
  # source://stripe//lib/stripe/resources/topup.rb#21
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Cancels a top-up. Only pending top-ups can be canceled.
    #
    # source://stripe//lib/stripe/resources/topup.rb#31
    def cancel(topup, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Top up the balance of an account
    #
    # source://stripe//lib/stripe/resources/topup.rb#41
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of top-ups.
    #
    # source://stripe//lib/stripe/resources/topup.rb#46
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/topup.rb#16
    def object_name; end

    # Updates the metadata of a top-up. Other top-up details are not editable by design.
    #
    # source://stripe//lib/stripe/resources/topup.rb#51
    def update(topup, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/topup.rb#15
Stripe::Topup::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/topup_service.rb#5
class Stripe::TopupService < ::Stripe::StripeService
  # Cancels a top-up. Only pending top-ups can be canceled.
  #
  # source://stripe//lib/stripe/services/topup_service.rb#7
  def cancel(topup, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Top up the balance of an account
  #
  # source://stripe//lib/stripe/services/topup_service.rb#18
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of top-ups.
  #
  # source://stripe//lib/stripe/services/topup_service.rb#23
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.
  #
  # source://stripe//lib/stripe/services/topup_service.rb#28
  def retrieve(topup, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the metadata of a top-up. Other top-up details are not editable by design.
  #
  # source://stripe//lib/stripe/services/topup_service.rb#39
  def update(topup, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# A `Transfer` object is created when you move funds between Stripe accounts as
# part of Connect.
#
# Before April 6, 2017, transfers also represented movement of funds from a
# Stripe account to a card or bank account. This behavior has since been split
# out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
# information, read about the
# [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
#
# Related guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)
#
# source://stripe//lib/stripe/resources/transfer.rb#15
class Stripe::Transfer < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::NestedResource
  extend ::Stripe::APIOperations::Save::ClassMethods

  class << self
    # To send funds from your Stripe account to a connected account, you create a new transfer object. Your [Stripe balance](https://stripe.com/docs/api#balance) must be able to cover the transfer amount, or you'll receive an “Insufficient Funds” error.
    #
    # source://stripe//lib/stripe/resources/transfer.rb#29
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#47
    def create_reversal(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.
    #
    # source://stripe//lib/stripe/resources/transfer.rb#34
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#87
    def list_reversals(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/transfer.rb#22
    def object_name; end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#57
    def retrieve_reversal(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#22
    def reversals_url(id, nested_id = T.unsafe(nil)); end

    # Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
    #
    # This request accepts only metadata as an argument.
    #
    # source://stripe//lib/stripe/resources/transfer.rb#41
    def update(transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/api_operations/nested_resource.rb#67
    def update_reversal(id, nested_id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/transfer.rb#21
Stripe::Transfer::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/transfer_reversal_service.rb#5
class Stripe::TransferReversalService < ::Stripe::StripeService
  # When you create a new reversal, you must specify a transfer to create it on.
  #
  # When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.
  #
  # Once entirely reversed, a transfer can't be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.
  #
  # source://stripe//lib/stripe/services/transfer_reversal_service.rb#11
  def create(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional reversals.
  #
  # source://stripe//lib/stripe/services/transfer_reversal_service.rb#22
  def list(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.
  #
  # source://stripe//lib/stripe/services/transfer_reversal_service.rb#33
  def retrieve(transfer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # This request only accepts metadata and description as arguments.
  #
  # source://stripe//lib/stripe/services/transfer_reversal_service.rb#46
  def update(transfer, id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/transfer_service.rb#5
class Stripe::TransferService < ::Stripe::StripeService
  # @return [TransferService] a new instance of TransferService
  #
  # source://stripe//lib/stripe/services/transfer_service.rb#8
  def initialize(requestor); end

  # To send funds from your Stripe account to a connected account, you create a new transfer object. Your [Stripe balance](https://stripe.com/docs/api#balance) must be able to cover the transfer amount, or you'll receive an “Insufficient Funds” error.
  #
  # source://stripe//lib/stripe/services/transfer_service.rb#14
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.
  #
  # source://stripe//lib/stripe/services/transfer_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.
  #
  # source://stripe//lib/stripe/services/transfer_service.rb#24
  def retrieve(transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute reversals.
  #
  # source://stripe//lib/stripe/services/transfer_service.rb#6
  def reversals; end

  # Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
  #
  # This request accepts only metadata as an argument.
  #
  # source://stripe//lib/stripe/services/transfer_service.rb#37
  def update(transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/treasury/credit_reversal.rb#5
module Stripe::Treasury; end

# You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
#
# source://stripe//lib/stripe/resources/treasury/credit_reversal.rb#7
class Stripe::Treasury::CreditReversal < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  class << self
    # Reverses a ReceivedCredit and creates a CreditReversal object.
    #
    # source://stripe//lib/stripe/resources/treasury/credit_reversal.rb#17
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of CreditReversals.
    #
    # source://stripe//lib/stripe/resources/treasury/credit_reversal.rb#27
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/credit_reversal.rb#12
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/credit_reversal.rb#11
Stripe::Treasury::CreditReversal::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/treasury/credit_reversal_service.rb#6
class Stripe::Treasury::CreditReversalService < ::Stripe::StripeService
  # Reverses a ReceivedCredit and creates a CreditReversal object.
  #
  # source://stripe//lib/stripe/services/treasury/credit_reversal_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of CreditReversals.
  #
  # source://stripe//lib/stripe/services/treasury/credit_reversal_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list
  #
  # source://stripe//lib/stripe/services/treasury/credit_reversal_service.rb#30
  def retrieve(credit_reversal, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.
#
# source://stripe//lib/stripe/resources/treasury/debit_reversal.rb#7
class Stripe::Treasury::DebitReversal < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  class << self
    # Reverses a ReceivedDebit and creates a DebitReversal object.
    #
    # source://stripe//lib/stripe/resources/treasury/debit_reversal.rb#17
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of DebitReversals.
    #
    # source://stripe//lib/stripe/resources/treasury/debit_reversal.rb#27
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/debit_reversal.rb#12
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/debit_reversal.rb#11
Stripe::Treasury::DebitReversal::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/treasury/debit_reversal_service.rb#6
class Stripe::Treasury::DebitReversalService < ::Stripe::StripeService
  # Reverses a ReceivedDebit and creates a DebitReversal object.
  #
  # source://stripe//lib/stripe/services/treasury/debit_reversal_service.rb#8
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of DebitReversals.
  #
  # source://stripe//lib/stripe/services/treasury/debit_reversal_service.rb#19
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a DebitReversal object.
  #
  # source://stripe//lib/stripe/services/treasury/debit_reversal_service.rb#30
  def retrieve(debit_reversal, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.
# FinancialAccounts serve as the source and destination of Treasury's money movement APIs.
#
# source://stripe//lib/stripe/resources/treasury/financial_account.rb#8
class Stripe::Treasury::FinancialAccount < ::Stripe::APIResource
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # Closes a FinancialAccount. A FinancialAccount can only be closed if it has a zero balance, has no pending InboundTransfers, and has canceled all attached Issuing cards.
  #
  # source://stripe//lib/stripe/resources/treasury/financial_account.rb#19
  def close(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves Features information associated with the FinancialAccount.
  #
  # source://stripe//lib/stripe/resources/treasury/financial_account.rb#59
  def retrieve_features(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the Features associated with a FinancialAccount.
  #
  # source://stripe//lib/stripe/resources/treasury/financial_account.rb#89
  def update_features(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Closes a FinancialAccount. A FinancialAccount can only be closed if it has a zero balance, has no pending InboundTransfers, and has canceled all attached Issuing cards.
    #
    # source://stripe//lib/stripe/resources/treasury/financial_account.rb#29
    def close(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.
    #
    # source://stripe//lib/stripe/resources/treasury/financial_account.rb#39
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of FinancialAccounts.
    #
    # source://stripe//lib/stripe/resources/treasury/financial_account.rb#49
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/financial_account.rb#14
    def object_name; end

    # Retrieves Features information associated with the FinancialAccount.
    #
    # source://stripe//lib/stripe/resources/treasury/financial_account.rb#69
    def retrieve_features(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the details of a FinancialAccount.
    #
    # source://stripe//lib/stripe/resources/treasury/financial_account.rb#79
    def update(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates the Features associated with a FinancialAccount.
    #
    # source://stripe//lib/stripe/resources/treasury/financial_account.rb#99
    def update_features(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/treasury/financial_account.rb#13
Stripe::Treasury::FinancialAccount::OBJECT_NAME = T.let(T.unsafe(nil), String)

# Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
# Stripe or the platform can control Features via the requested field.
#
# source://stripe//lib/stripe/resources/treasury/financial_account_features.rb#8
class Stripe::Treasury::FinancialAccountFeatures < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/treasury/financial_account_features.rb#10
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/financial_account_features.rb#9
Stripe::Treasury::FinancialAccountFeatures::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/treasury/financial_account_features_service.rb#6
class Stripe::Treasury::FinancialAccountFeaturesService < ::Stripe::StripeService
  # Retrieves Features information associated with the FinancialAccount.
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_features_service.rb#8
  def retrieve(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the Features associated with a FinancialAccount.
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_features_service.rb#19
  def update(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/treasury/financial_account_service.rb#6
class Stripe::Treasury::FinancialAccountService < ::Stripe::StripeService
  # @return [FinancialAccountService] a new instance of FinancialAccountService
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_service.rb#9
  def initialize(requestor); end

  # Closes a FinancialAccount. A FinancialAccount can only be closed if it has a zero balance, has no pending InboundTransfers, and has canceled all attached Issuing cards.
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_service.rb#15
  def close(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_service.rb#26
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute features.
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_service.rb#7
  def features; end

  # Returns a list of FinancialAccounts.
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_service.rb#37
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of a FinancialAccount.
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_service.rb#48
  def retrieve(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the details of a FinancialAccount.
  #
  # source://stripe//lib/stripe/services/treasury/financial_account_service.rb#59
  def update(financial_account, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Use [InboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
#
# Related guide: [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers)
#
# source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#9
class Stripe::Treasury::InboundTransfer < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  # Cancels an InboundTransfer.
  #
  # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#19
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#58
  def test_helpers; end

  class << self
    # Cancels an InboundTransfer.
    #
    # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#29
    def cancel(inbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates an InboundTransfer.
    #
    # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#39
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of InboundTransfers sent from the specified FinancialAccount.
    #
    # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#49
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#14
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#13
Stripe::Treasury::InboundTransfer::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#62
class Stripe::Treasury::InboundTransfer::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Transitions a test mode created InboundTransfer to the failed status. The InboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#79
  def fail(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the succeeded state.
  #
  # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#99
  def return_inbound_transfer(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created InboundTransfer to the succeeded status. The InboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#119
  def succeed(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Transitions a test mode created InboundTransfer to the failed status. The InboundTransfer must already be in the processing state.
    #
    # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#69
    def fail(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#64
    def resource_class; end

    # Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the succeeded state.
    #
    # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#89
    def return_inbound_transfer(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Transitions a test mode created InboundTransfer to the succeeded status. The InboundTransfer must already be in the processing state.
    #
    # source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#109
    def succeed(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/treasury/inbound_transfer.rb#63
Stripe::Treasury::InboundTransfer::TestHelpers::RESOURCE_CLASS = Stripe::Treasury::InboundTransfer

# source://stripe//lib/stripe/services/treasury/inbound_transfer_service.rb#6
class Stripe::Treasury::InboundTransferService < ::Stripe::StripeService
  # Cancels an InboundTransfer.
  #
  # source://stripe//lib/stripe/services/treasury/inbound_transfer_service.rb#8
  def cancel(inbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates an InboundTransfer.
  #
  # source://stripe//lib/stripe/services/treasury/inbound_transfer_service.rb#19
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of InboundTransfers sent from the specified FinancialAccount.
  #
  # source://stripe//lib/stripe/services/treasury/inbound_transfer_service.rb#30
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing InboundTransfer.
  #
  # source://stripe//lib/stripe/services/treasury/inbound_transfer_service.rb#41
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
#
# Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
#
# Related guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)
#
# source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#11
class Stripe::Treasury::OutboundPayment < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  # Cancel an OutboundPayment.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#21
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#60
  def test_helpers; end

  class << self
    # Cancel an OutboundPayment.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#31
    def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates an OutboundPayment.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#41
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of OutboundPayments sent from the specified FinancialAccount.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#51
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#16
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#15
Stripe::Treasury::OutboundPayment::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#64
class Stripe::Treasury::OutboundPayment::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Transitions a test mode created OutboundPayment to the failed status. The OutboundPayment must already be in the processing state.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#81
  def fail(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created OutboundPayment to the posted status. The OutboundPayment must already be in the processing state.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#101
  def post(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created OutboundPayment to the returned status. The OutboundPayment must already be in the processing state.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#121
  def return_outbound_payment(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the canceled or failed states.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#141
  def update(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Transitions a test mode created OutboundPayment to the failed status. The OutboundPayment must already be in the processing state.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#71
    def fail(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Transitions a test mode created OutboundPayment to the posted status. The OutboundPayment must already be in the processing state.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#91
    def post(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#66
    def resource_class; end

    # Transitions a test mode created OutboundPayment to the returned status. The OutboundPayment must already be in the processing state.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#111
    def return_outbound_payment(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the canceled or failed states.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#131
    def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/treasury/outbound_payment.rb#65
Stripe::Treasury::OutboundPayment::TestHelpers::RESOURCE_CLASS = Stripe::Treasury::OutboundPayment

# source://stripe//lib/stripe/services/treasury/outbound_payment_service.rb#6
class Stripe::Treasury::OutboundPaymentService < ::Stripe::StripeService
  # Cancel an OutboundPayment.
  #
  # source://stripe//lib/stripe/services/treasury/outbound_payment_service.rb#8
  def cancel(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates an OutboundPayment.
  #
  # source://stripe//lib/stripe/services/treasury/outbound_payment_service.rb#19
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of OutboundPayments sent from the specified FinancialAccount.
  #
  # source://stripe//lib/stripe/services/treasury/outbound_payment_service.rb#30
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.
  #
  # source://stripe//lib/stripe/services/treasury/outbound_payment_service.rb#41
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Use [OutboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.
#
# Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
#
# Related guide: [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers)
#
# source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#11
class Stripe::Treasury::OutboundTransfer < ::Stripe::APIResource
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::List

  # An OutboundTransfer can be canceled if the funds have not yet been paid out.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#21
  def cancel(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#60
  def test_helpers; end

  class << self
    # An OutboundTransfer can be canceled if the funds have not yet been paid out.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#31
    def cancel(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Creates an OutboundTransfer.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#41
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of OutboundTransfers sent from the specified FinancialAccount.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#51
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#16
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#15
Stripe::Treasury::OutboundTransfer::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#64
class Stripe::Treasury::OutboundTransfer::TestHelpers < ::Stripe::APIResourceTestHelpers
  # Transitions a test mode created OutboundTransfer to the failed status. The OutboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#81
  def fail(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created OutboundTransfer to the posted status. The OutboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#101
  def post(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Transitions a test mode created OutboundTransfer to the returned status. The OutboundTransfer must already be in the processing state.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#121
  def return_outbound_transfer(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the canceled or failed states.
  #
  # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#141
  def update(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # Transitions a test mode created OutboundTransfer to the failed status. The OutboundTransfer must already be in the processing state.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#71
    def fail(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Transitions a test mode created OutboundTransfer to the posted status. The OutboundTransfer must already be in the processing state.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#91
    def post(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#66
    def resource_class; end

    # Transitions a test mode created OutboundTransfer to the returned status. The OutboundTransfer must already be in the processing state.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#111
    def return_outbound_transfer(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the canceled or failed states.
    #
    # source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#131
    def update(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/treasury/outbound_transfer.rb#65
Stripe::Treasury::OutboundTransfer::TestHelpers::RESOURCE_CLASS = Stripe::Treasury::OutboundTransfer

# source://stripe//lib/stripe/services/treasury/outbound_transfer_service.rb#6
class Stripe::Treasury::OutboundTransferService < ::Stripe::StripeService
  # An OutboundTransfer can be canceled if the funds have not yet been paid out.
  #
  # source://stripe//lib/stripe/services/treasury/outbound_transfer_service.rb#8
  def cancel(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Creates an OutboundTransfer.
  #
  # source://stripe//lib/stripe/services/treasury/outbound_transfer_service.rb#19
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of OutboundTransfers sent from the specified FinancialAccount.
  #
  # source://stripe//lib/stripe/services/treasury/outbound_transfer_service.rb#30
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.
  #
  # source://stripe//lib/stripe/services/treasury/outbound_transfer_service.rb#41
  def retrieve(outbound_transfer, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
#
# source://stripe//lib/stripe/resources/treasury/received_credit.rb#7
class Stripe::Treasury::ReceivedCredit < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  # source://stripe//lib/stripe/resources/treasury/received_credit.rb#25
  def test_helpers; end

  class << self
    # Returns a list of ReceivedCredits.
    #
    # source://stripe//lib/stripe/resources/treasury/received_credit.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/received_credit.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/received_credit.rb#10
Stripe::Treasury::ReceivedCredit::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/treasury/received_credit.rb#29
class Stripe::Treasury::ReceivedCredit::TestHelpers < ::Stripe::APIResourceTestHelpers
  class << self
    # Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can't directly create ReceivedCredits initiated by third parties.
    #
    # source://stripe//lib/stripe/resources/treasury/received_credit.rb#36
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/received_credit.rb#31
    def resource_class; end
  end
end

# source://stripe//lib/stripe/resources/treasury/received_credit.rb#30
Stripe::Treasury::ReceivedCredit::TestHelpers::RESOURCE_CLASS = Stripe::Treasury::ReceivedCredit

# source://stripe//lib/stripe/services/treasury/received_credit_service.rb#6
class Stripe::Treasury::ReceivedCreditService < ::Stripe::StripeService
  # Returns a list of ReceivedCredits.
  #
  # source://stripe//lib/stripe/services/treasury/received_credit_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.
  #
  # source://stripe//lib/stripe/services/treasury/received_credit_service.rb#19
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
#
# source://stripe//lib/stripe/resources/treasury/received_debit.rb#7
class Stripe::Treasury::ReceivedDebit < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  # source://stripe//lib/stripe/resources/treasury/received_debit.rb#25
  def test_helpers; end

  class << self
    # Returns a list of ReceivedDebits.
    #
    # source://stripe//lib/stripe/resources/treasury/received_debit.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/received_debit.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/received_debit.rb#10
Stripe::Treasury::ReceivedDebit::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/treasury/received_debit.rb#29
class Stripe::Treasury::ReceivedDebit::TestHelpers < ::Stripe::APIResourceTestHelpers
  class << self
    # Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can't directly create ReceivedDebits initiated by third parties.
    #
    # source://stripe//lib/stripe/resources/treasury/received_debit.rb#36
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/received_debit.rb#31
    def resource_class; end
  end
end

# source://stripe//lib/stripe/resources/treasury/received_debit.rb#30
Stripe::Treasury::ReceivedDebit::TestHelpers::RESOURCE_CLASS = Stripe::Treasury::ReceivedDebit

# source://stripe//lib/stripe/services/treasury/received_debit_service.rb#6
class Stripe::Treasury::ReceivedDebitService < ::Stripe::StripeService
  # Returns a list of ReceivedDebits.
  #
  # source://stripe//lib/stripe/services/treasury/received_debit_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list
  #
  # source://stripe//lib/stripe/services/treasury/received_debit_service.rb#19
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
#
# source://stripe//lib/stripe/resources/treasury/transaction.rb#7
class Stripe::Treasury::Transaction < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Retrieves a list of Transaction objects.
    #
    # source://stripe//lib/stripe/resources/treasury/transaction.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/transaction.rb#11
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/treasury/transaction.rb#10
Stripe::Treasury::Transaction::OBJECT_NAME = T.let(T.unsafe(nil), String)

# TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).
#
# source://stripe//lib/stripe/resources/treasury/transaction_entry.rb#7
class Stripe::Treasury::TransactionEntry < ::Stripe::APIResource
  extend ::Stripe::APIOperations::List

  class << self
    # Retrieves a list of TransactionEntry objects.
    #
    # source://stripe//lib/stripe/resources/treasury/transaction_entry.rb#16
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/treasury/transaction_entry.rb#11
    def object_name; end

    # source://stripe//lib/stripe/resources/treasury/transaction_entry.rb#25
    def resource_url; end
  end
end

# source://stripe//lib/stripe/resources/treasury/transaction_entry.rb#10
Stripe::Treasury::TransactionEntry::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/treasury/transaction_entry_service.rb#6
class Stripe::Treasury::TransactionEntryService < ::Stripe::StripeService
  # Retrieves a list of TransactionEntry objects.
  #
  # source://stripe//lib/stripe/services/treasury/transaction_entry_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves a TransactionEntry object.
  #
  # source://stripe//lib/stripe/services/treasury/transaction_entry_service.rb#19
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/treasury/transaction_service.rb#6
class Stripe::Treasury::TransactionService < ::Stripe::StripeService
  # Retrieves a list of Transaction objects.
  #
  # source://stripe//lib/stripe/services/treasury/transaction_service.rb#8
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an existing Transaction.
  #
  # source://stripe//lib/stripe/services/treasury/transaction_service.rb#19
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/treasury_service.rb#5
class Stripe::TreasuryService < ::Stripe::StripeService
  # @return [TreasuryService] a new instance of TreasuryService
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#8
  def initialize(requestor); end

  # Returns the value of attribute credit_reversals.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def credit_reversals; end

  # Returns the value of attribute debit_reversals.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def debit_reversals; end

  # Returns the value of attribute financial_accounts.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def financial_accounts; end

  # Returns the value of attribute inbound_transfers.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def inbound_transfers; end

  # Returns the value of attribute outbound_payments.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def outbound_payments; end

  # Returns the value of attribute outbound_transfers.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def outbound_transfers; end

  # Returns the value of attribute received_credits.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def received_credits; end

  # Returns the value of attribute received_debits.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def received_debits; end

  # Returns the value of attribute transaction_entries.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def transaction_entries; end

  # Returns the value of attribute transactions.
  #
  # source://stripe//lib/stripe/services/treasury_service.rb#6
  def transactions; end
end

# Options that can be configured globally by users
#
# source://stripe//lib/stripe.rb#78
Stripe::USER_CONFIGURABLE_GLOBAL_OPTIONS = T.let(T.unsafe(nil), Set)

# Usage records allow you to report customer usage and metrics to Stripe for
# metered billing of subscription prices.
#
# Related guide: [Metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing)
#
# This is our legacy usage-based billing API. See the [updated usage-based billing docs](https://docs.stripe.com/billing/subscriptions/usage-based).
#
# source://stripe//lib/stripe/resources/usage_record.rb#11
class Stripe::UsageRecord < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/usage_record.rb#13
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/usage_record.rb#12
Stripe::UsageRecord::OBJECT_NAME = T.let(T.unsafe(nil), String)

# A usage record summary represents an aggregated view of how much usage was accrued for a subscription item within a subscription billing period.
#
# source://stripe//lib/stripe/resources/usage_record_summary.rb#6
class Stripe::UsageRecordSummary < ::Stripe::StripeObject
  class << self
    # source://stripe//lib/stripe/resources/usage_record_summary.rb#8
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/usage_record_summary.rb#7
Stripe::UsageRecordSummary::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/util.rb#6
module Stripe::Util
  class << self
    # @raise [TypeError]
    #
    # source://stripe//lib/stripe/util.rb#318
    def check_api_key!(key); end

    # @raise [TypeError]
    #
    # source://stripe//lib/stripe/util.rb#312
    def check_string_argument!(key); end

    # Converts a hash of fields or an array of hashes into a +StripeObject+ or
    # array of +StripeObject+s. These new objects will be created as a concrete
    # type as dictated by their `object` field (e.g. an `object` value of
    # `charge` would create an instance of +Charge+), but if `object` is not
    # present or of an unknown type, the newly created instance will fall back
    # to being a +StripeObject+.
    #
    # ==== Attributes
    #
    # * +data+ - Hash of fields and values to be converted into a StripeObject.
    # * +params+ - Params for +StripeObject+ like filters used in search that
    #   will be reused on subsequent API calls.
    # * +opts+ - Options for +StripeObject+ like an API key that will be reused
    #   on subsequent API calls.
    #
    # source://stripe//lib/stripe/util.rb#99
    def convert_to_stripe_object(data, opts = T.unsafe(nil), api_mode: T.unsafe(nil), requestor: T.unsafe(nil)); end

    # Converts a hash of fields or an array of hashes into a +StripeObject+ or
    # array of +StripeObject+s. These new objects will be created as a concrete
    # type as dictated by their `object` field (e.g. an `object` value of
    # `charge` would create an instance of +Charge+), but if `object` is not
    # present or of an unknown type, the newly created instance will fall back
    # to being a +StripeObject+.
    #
    # ==== Attributes
    #
    # * +data+ - Hash of fields and values to be converted into a StripeObject.
    # * +opts+ - Options for +StripeObject+ like an API key that will be reused
    #   on subsequent API calls.
    # * +last_response+ - The raw response associated with the object.
    # * +api_mode+ - The API mode to use when converting the object, either :v1 or :v2.
    # * +requestor+ - The requestor to use when constructing the object.
    #
    # source://stripe//lib/stripe/util.rb#118
    def convert_to_stripe_object_with_params(data, params, opts = T.unsafe(nil), last_response = T.unsafe(nil), api_mode: T.unsafe(nil), requestor: T.unsafe(nil)); end

    # Adds a custom method to a resource class. This is used to add support for
    # non-CRUDL API requests, e.g. capturing charges. custom_method takes the
    # following parameters:
    # - name: the name of the custom method to create (as a symbol)
    # - http_verb: the HTTP verb for the API request (:get, :post, or :delete)
    # - http_path: the path to append to the resource's URL. If not provided,
    #              the name is used as the path
    # - resource: the resource implementation class
    # - target: the class that custom static method will be added to
    #
    # For example, this call:
    #     custom_method :capture, http_verb: post
    # adds a `capture` class method to the resource class that, when called,
    # will send a POST request to `/v1/<object_name>/capture`.
    # TODO: are we comfortable with deleting this?
    #
    # source://stripe//lib/stripe/util.rb#53
    def custom_method(resource, target, name, http_verb, http_path); end

    # Encodes a hash of parameters in a way that's suitable for use as query
    # parameters in a URI or as form parameters in a request body. This mainly
    # involves escaping special characters from parameter keys and values (e.g.
    # `&`).
    #
    # source://stripe//lib/stripe/util.rb#221
    def encode_parameters(params, api_mode); end

    # source://stripe//lib/stripe/util.rb#237
    def flatten_params(params, api_mode, parent_key = T.unsafe(nil)); end

    # source://stripe//lib/stripe/util.rb#256
    def flatten_params_array(value, api_mode, calculated_key); end

    # Returns either v1 or v2 as api_mode based on the given path
    #
    # source://stripe//lib/stripe/util.rb#359
    def get_api_mode(path); end

    # source://stripe//lib/stripe/util.rb#187
    def log_debug(message, data = T.unsafe(nil)); end

    # source://stripe//lib/stripe/util.rb#167
    def log_error(message, data = T.unsafe(nil)); end

    # source://stripe//lib/stripe/util.rb#177
    def log_info(message, data = T.unsafe(nil)); end

    # `Time.now` can be unstable in cases like an administrator manually
    # updating its value or a reconcilation via NTP. For this reason, prefer
    # the use of the system's monotonic clock especially where comparing times
    # to calculate an elapsed duration.
    #
    # Shortcut for getting monotonic time, mostly for purposes of line length
    # and test stubbing. Returns time in seconds since the event used for
    # monotonic reference purposes by the platform (e.g. system boot time).
    #
    # source://stripe//lib/stripe/util.rb#282
    def monotonic_time; end

    # Normalizes header keys so that they're all lower case and each
    # hyphen-delimited section starts with a single capitalized letter. For
    # example, `request-id` becomes `Request-Id`. This is useful for extracting
    # certain key values when the user could have set them with a variety of
    # diffent naming schemes.
    #
    # source://stripe//lib/stripe/util.rb#329
    def normalize_headers(headers); end

    # source://stripe//lib/stripe/util.rb#286
    def normalize_id(id); end

    # The secondary opts argument can either be a string or hash
    # Turn this value into an api_key and a set of headers
    #
    # source://stripe//lib/stripe/util.rb#298
    def normalize_opts(opts); end

    # source://stripe//lib/stripe/util.rb#22
    def object_classes; end

    # @return [Boolean]
    #
    # source://stripe//lib/stripe/util.rb#34
    def object_name_matches_class?(object_name, klass); end

    # source://stripe//lib/stripe/util.rb#7
    def objects_to_ids(obj); end

    # Generates a Dashboard link to inspect a request ID based off of a request
    # ID value and an API key, which is used to attempt to extract whether the
    # environment is livemode or testmode.
    #
    # source://stripe//lib/stripe/util.rb#341
    def request_id_dashboard_url(request_id, api_key); end

    # Constant time string comparison to prevent timing attacks
    # Code borrowed from ActiveSupport
    #
    # source://stripe//lib/stripe/util.rb#348
    def secure_compare(str_a, str_b); end

    # source://stripe//lib/stripe/util.rb#197
    def symbolize_names(object); end

    # source://stripe//lib/stripe/util.rb#30
    def thin_event_classes; end

    # Encodes a string in a way that makes it suitable for use in a set of
    # query parameters in a URI or in a set of form parameters in a request
    # body.
    #
    # source://stripe//lib/stripe/util.rb#229
    def url_encode(key); end

    # source://stripe//lib/stripe/util.rb#26
    def v2_object_classes; end

    private

    # Uses an ANSI escape code to colorize text if it's going to be sent to a
    # TTY.
    #
    # source://stripe//lib/stripe/util.rb#386
    def colorize(val, color, isatty); end

    # Turns an integer log level into a printable name.
    #
    # source://stripe//lib/stripe/util.rb#398
    def level_name(level); end

    # source://stripe//lib/stripe/util.rb#408
    def log_internal(message, data = T.unsafe(nil), color:, level:, logger:, out:); end

    # Wraps a value in double quotes if it looks sufficiently complex so that
    # it can be read by logfmt parsers.
    #
    # source://stripe//lib/stripe/util.rb#440
    def wrap_logfmt_value(val); end
  end
end

# private
#
# source://stripe//lib/stripe/util.rb#371
Stripe::Util::COLOR_CODES = T.let(T.unsafe(nil), Hash)

# This event occurs when there are invalid async usage events for a given meter.
#
# source://stripe//lib/stripe/events/v1_billing_meter_error_report_triggered_event.rb#6
class Stripe::V1BillingMeterErrorReportTriggeredEvent < ::Stripe::V2::Event
  # Retrieves the related object from the API. Make an API request on every call.
  #
  # source://stripe//lib/stripe/events/v1_billing_meter_error_report_triggered_event.rb#14
  def fetch_related_object; end

  class << self
    # source://stripe//lib/stripe/events/v1_billing_meter_error_report_triggered_event.rb#7
    def lookup_type; end
  end
end

# This event occurs when async usage events have missing or invalid meter ids.
#
# source://stripe//lib/stripe/events/v1_billing_meter_no_meter_found_event.rb#6
class Stripe::V1BillingMeterNoMeterFoundEvent < ::Stripe::V2::Event
  class << self
    # source://stripe//lib/stripe/events/v1_billing_meter_no_meter_found_event.rb#7
    def lookup_type; end
  end
end

# source://stripe//lib/stripe/services/v1_services.rb#4
class Stripe::V1Services < ::Stripe::StripeService
  # @return [V1Services] a new instance of V1Services
  #
  # source://stripe//lib/stripe/services/v1_services.rb#13
  def initialize(requestor); end

  # Returns the value of attribute account_links.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def account_links; end

  # Returns the value of attribute account_sessions.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def account_sessions; end

  # v1 accessors: The beginning of the section generated from our OpenAPI spec
  #
  # source://stripe//lib/stripe/services/v1_services.rb#6
  def accounts; end

  # Returns the value of attribute apple_pay_domains.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def apple_pay_domains; end

  # Returns the value of attribute application_fees.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def application_fees; end

  # Returns the value of attribute apps.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def apps; end

  # Returns the value of attribute balance.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def balance; end

  # Returns the value of attribute balance_transactions.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def balance_transactions; end

  # Returns the value of attribute billing.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def billing; end

  # Returns the value of attribute billing_portal.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def billing_portal; end

  # Returns the value of attribute charges.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def charges; end

  # Returns the value of attribute checkout.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def checkout; end

  # Returns the value of attribute climate.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def climate; end

  # Returns the value of attribute confirmation_tokens.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def confirmation_tokens; end

  # Returns the value of attribute country_specs.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def country_specs; end

  # Returns the value of attribute coupons.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def coupons; end

  # Returns the value of attribute credit_notes.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def credit_notes; end

  # Returns the value of attribute customer_sessions.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def customer_sessions; end

  # Returns the value of attribute customers.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def customers; end

  # Returns the value of attribute disputes.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def disputes; end

  # Returns the value of attribute entitlements.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def entitlements; end

  # Returns the value of attribute ephemeral_keys.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def ephemeral_keys; end

  # Returns the value of attribute events.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def events; end

  # Returns the value of attribute exchange_rates.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def exchange_rates; end

  # Returns the value of attribute file_links.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def file_links; end

  # Returns the value of attribute files.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def files; end

  # Returns the value of attribute financial_connections.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def financial_connections; end

  # Returns the value of attribute forwarding.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def forwarding; end

  # Returns the value of attribute identity.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def identity; end

  # Returns the value of attribute invoice_items.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def invoice_items; end

  # Returns the value of attribute invoice_rendering_templates.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def invoice_rendering_templates; end

  # Returns the value of attribute invoices.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def invoices; end

  # Returns the value of attribute issuing.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def issuing; end

  # Returns the value of attribute mandates.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def mandates; end

  # OAuthService is manually maintained, as it has special behaviors
  #
  # source://stripe//lib/stripe/services/v1_services.rb#11
  def oauth; end

  # Returns the value of attribute payment_intents.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def payment_intents; end

  # Returns the value of attribute payment_links.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def payment_links; end

  # Returns the value of attribute payment_method_configurations.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def payment_method_configurations; end

  # Returns the value of attribute payment_method_domains.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def payment_method_domains; end

  # Returns the value of attribute payment_methods.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def payment_methods; end

  # Returns the value of attribute payouts.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def payouts; end

  # Returns the value of attribute plans.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def plans; end

  # Returns the value of attribute prices.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def prices; end

  # Returns the value of attribute products.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def products; end

  # Returns the value of attribute promotion_codes.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def promotion_codes; end

  # Returns the value of attribute quotes.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def quotes; end

  # Returns the value of attribute radar.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def radar; end

  # Returns the value of attribute refunds.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def refunds; end

  # Returns the value of attribute reporting.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def reporting; end

  # Returns the value of attribute reviews.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def reviews; end

  # Returns the value of attribute setup_attempts.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def setup_attempts; end

  # Returns the value of attribute setup_intents.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def setup_intents; end

  # Returns the value of attribute shipping_rates.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def shipping_rates; end

  # Returns the value of attribute sigma.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def sigma; end

  # Returns the value of attribute sources.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def sources; end

  # Returns the value of attribute subscription_items.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def subscription_items; end

  # Returns the value of attribute subscription_schedules.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def subscription_schedules; end

  # Returns the value of attribute subscriptions.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def subscriptions; end

  # Returns the value of attribute tax.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def tax; end

  # Returns the value of attribute tax_codes.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def tax_codes; end

  # Returns the value of attribute tax_ids.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def tax_ids; end

  # Returns the value of attribute tax_rates.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def tax_rates; end

  # Returns the value of attribute terminal.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def terminal; end

  # Returns the value of attribute test_helpers.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def test_helpers; end

  # Returns the value of attribute tokens.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def tokens; end

  # Returns the value of attribute topups.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def topups; end

  # Returns the value of attribute transfers.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def transfers; end

  # Returns the value of attribute treasury.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def treasury; end

  # Returns the value of attribute webhook_endpoints.
  #
  # source://stripe//lib/stripe/services/v1_services.rb#7
  def webhook_endpoints; end
end

# source://stripe//lib/stripe/v2_list_object.rb#4
module Stripe::V2; end

# source://stripe//lib/stripe/resources/v2/billing/meter_event.rb#6
module Stripe::V2::Billing; end

# Fix me empty_doc_string.
#
# source://stripe//lib/stripe/resources/v2/billing/meter_event.rb#8
class Stripe::V2::Billing::MeterEvent < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/v2/billing/meter_event.rb#10
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/v2/billing/meter_event.rb#9
Stripe::V2::Billing::MeterEvent::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/v2/billing/meter_event_adjustment.rb#7
class Stripe::V2::Billing::MeterEventAdjustment < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/v2/billing/meter_event_adjustment.rb#9
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/v2/billing/meter_event_adjustment.rb#8
Stripe::V2::Billing::MeterEventAdjustment::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/v2/billing/meter_event_adjustment_service.rb#7
class Stripe::V2::Billing::MeterEventAdjustmentService < ::Stripe::StripeService
  # Creates a meter event adjustment to cancel a previously sent meter event.
  #
  # source://stripe//lib/stripe/services/v2/billing/meter_event_adjustment_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/v2/billing/meter_event_service.rb#7
class Stripe::V2::Billing::MeterEventService < ::Stripe::StripeService
  # Creates a meter event. Events are validated synchronously, but are processed asynchronously. Supports up to 1,000 events per second in livemode. For higher rate-limits, please use meter event streams instead.
  #
  # source://stripe//lib/stripe/services/v2/billing/meter_event_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/resources/v2/billing/meter_event_session.rb#7
class Stripe::V2::Billing::MeterEventSession < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/v2/billing/meter_event_session.rb#9
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/v2/billing/meter_event_session.rb#8
Stripe::V2::Billing::MeterEventSession::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/v2/billing/meter_event_session_service.rb#7
class Stripe::V2::Billing::MeterEventSessionService < ::Stripe::StripeService
  # Creates a meter event session to send usage on the high-throughput meter event stream. Authentication tokens are only valid for 15 minutes, so you will need to create a new meter event session when your token expires.
  #
  # source://stripe//lib/stripe/services/v2/billing/meter_event_session_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/v2/billing/meter_event_stream_service.rb#7
class Stripe::V2::Billing::MeterEventStreamService < ::Stripe::StripeService
  # Creates meter events. Events are processed asynchronously, including validation. Requires a meter event session for authentication. Supports up to 10,000 requests per second in livemode. For even higher rate-limits, contact sales.
  #
  # ** raises TemporarySessionExpiredError
  #
  # source://stripe//lib/stripe/services/v2/billing/meter_event_stream_service.rb#11
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/v2/billing_service.rb#6
class Stripe::V2::BillingService < ::Stripe::StripeService
  # @return [BillingService] a new instance of BillingService
  #
  # source://stripe//lib/stripe/services/v2/billing_service.rb#9
  def initialize(requestor); end

  # Returns the value of attribute meter_event_adjustments.
  #
  # source://stripe//lib/stripe/services/v2/billing_service.rb#7
  def meter_event_adjustments; end

  # Returns the value of attribute meter_event_session.
  #
  # source://stripe//lib/stripe/services/v2/billing_service.rb#7
  def meter_event_session; end

  # Returns the value of attribute meter_event_stream.
  #
  # source://stripe//lib/stripe/services/v2/billing_service.rb#7
  def meter_event_stream; end

  # Returns the value of attribute meter_events.
  #
  # source://stripe//lib/stripe/services/v2/billing_service.rb#7
  def meter_events; end
end

# source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#6
module Stripe::V2::Core; end

# source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#7
class Stripe::V2::Core::EventDestinationService < ::Stripe::StripeService
  # Create a new event destination.
  #
  # source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#9
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Delete an event destination.
  #
  # source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#20
  def delete(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Disable an event destination.
  #
  # source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#31
  def disable(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Enable an event destination.
  #
  # source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#42
  def enable(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Lists all event destinations.
  #
  # source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#53
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Send a `ping` event to an event destination.
  #
  # source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#64
  def ping(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an event destination.
  #
  # source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#75
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Update the details of an event destination.
  #
  # source://stripe//lib/stripe/services/v2/core/event_destination_service.rb#86
  def update(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/v2/core/event_service.rb#7
class Stripe::V2::Core::EventService < ::Stripe::StripeService
  # List events, going back up to 30 days.
  #
  # source://stripe//lib/stripe/services/v2/core/event_service.rb#9
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the details of an event.
  #
  # source://stripe//lib/stripe/services/v2/core/event_service.rb#20
  def retrieve(id, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# source://stripe//lib/stripe/services/v2/core_service.rb#6
class Stripe::V2::CoreService < ::Stripe::StripeService
  # @return [CoreService] a new instance of CoreService
  #
  # source://stripe//lib/stripe/services/v2/core_service.rb#9
  def initialize(requestor); end

  # Returns the value of attribute event_destinations.
  #
  # source://stripe//lib/stripe/services/v2/core_service.rb#7
  def event_destinations; end

  # Returns the value of attribute events.
  #
  # source://stripe//lib/stripe/services/v2/core_service.rb#7
  def events; end
end

# source://stripe//lib/stripe/resources/v2/event.rb#6
class Stripe::V2::Event < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/v2/event.rb#8
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/v2/event.rb#7
Stripe::V2::Event::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/resources/v2/event_destination.rb#6
class Stripe::V2::EventDestination < ::Stripe::APIResource
  class << self
    # source://stripe//lib/stripe/resources/v2/event_destination.rb#8
    def object_name; end
  end
end

# source://stripe//lib/stripe/resources/v2/event_destination.rb#7
Stripe::V2::EventDestination::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/v2_list_object.rb#5
class Stripe::V2::ListObject < ::Stripe::StripeObject
  # source://stripe//lib/stripe/v2_list_object.rb#17
  def [](key); end

  # Iterates through each resource in all pages, making additional fetches to
  # the API as necessary.
  #
  # Note that this method will make as many API calls as necessary to fetch
  # all resources. For more granular control, please see +each+ and
  # +fetch_next_page+.
  #
  # source://stripe//lib/stripe/v2_list_object.rb#51
  def auto_paging_each(&blk); end

  # Iterates through each resource in the page represented by the current
  # `ListObject`.
  #
  # Note that this method makes no effort to fetch a new page when it gets to
  # the end of the current page's resources. See also +auto_paging_each+.
  #
  # source://stripe//lib/stripe/v2_list_object.rb#35
  def each(&blk); end

  # Returns true if the page object contains no elements.
  #
  # @return [Boolean]
  #
  # source://stripe//lib/stripe/v2_list_object.rb#65
  def empty?; end

  # Fetches the next page in the resource list (if there is one).
  #
  # This method will try to respect the limit of the current page. If none
  # was given, the default limit will be fetched again.
  #
  # source://stripe//lib/stripe/v2_list_object.rb#73
  def fetch_next_page(opts = T.unsafe(nil)); end

  # Iterates through each resource in the page represented by the current
  # `ListObject` in reverse.
  #
  # source://stripe//lib/stripe/v2_list_object.rb#41
  def reverse_each(&blk); end

  class << self
    # An empty list object. This is returned from +fetch_next_page+ when we know that
    # there isn't a next page.
    #
    # source://stripe//lib/stripe/v2_list_object.rb#13
    def empty_list(opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/v2_list_object.rb#7
    def object_name; end
  end
end

# source://stripe//lib/stripe/v2_list_object.rb#6
Stripe::V2::ListObject::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/v2_services.rb#5
class Stripe::V2Services < ::Stripe::StripeService
  # @return [V2Services] a new instance of V2Services
  #
  # source://stripe//lib/stripe/services/v2_services.rb#8
  def initialize(requestor); end

  # Returns the value of attribute billing.
  #
  # source://stripe//lib/stripe/services/v2_services.rb#6
  def billing; end

  # Returns the value of attribute core.
  #
  # source://stripe//lib/stripe/services/v2_services.rb#6
  def core; end
end

# source://stripe//lib/stripe/version.rb#4
Stripe::VERSION = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/webhook.rb#4
module Stripe::Webhook
  class << self
    # Initializes an Event object from a JSON payload.
    #
    # This may raise JSON::ParserError if the payload is not valid JSON, or
    # SignatureVerificationError if the signature verification fails.
    #
    # source://stripe//lib/stripe/webhook.rb#11
    def construct_event(payload, sig_header, secret, tolerance: T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/webhook.rb#5
Stripe::Webhook::DEFAULT_TOLERANCE = T.let(T.unsafe(nil), Integer)

# source://stripe//lib/stripe/webhook.rb#24
module Stripe::Webhook::Signature
  class << self
    # Computes a webhook signature given a time (probably the current time),
    # a payload, and a signing secret.
    #
    # @raise [ArgumentError]
    #
    # source://stripe//lib/stripe/webhook.rb#29
    def compute_signature(timestamp, payload, secret); end

    # Generates a value that would be added to a `Stripe-Signature` for a
    # given webhook payload.
    #
    # Note that this isn't needed to verify webhooks in any way, and is
    # mainly here for use in test cases (those that are both within this
    # project and without).
    #
    # @raise [ArgumentError]
    #
    # source://stripe//lib/stripe/webhook.rb#48
    def generate_header(timestamp, signature, scheme: T.unsafe(nil)); end

    # Verifies the signature header for a given payload.
    #
    # Raises a SignatureVerificationError in the following cases:
    # - the header does not match the expected format
    # - no signatures found with the expected scheme
    # - no signatures matching the expected signature
    # - a tolerance is provided and the timestamp is not within the
    #   tolerance
    #
    # Returns true otherwise
    #
    # source://stripe//lib/stripe/webhook.rb#79
    def verify_header(payload, header, secret, tolerance: T.unsafe(nil)); end

    private

    # Extracts the timestamp and the signature(s) with the desired scheme
    # from the header
    #
    # source://stripe//lib/stripe/webhook.rb#61
    def get_timestamp_and_signatures(header, scheme); end
  end
end

# source://stripe//lib/stripe/webhook.rb#25
Stripe::Webhook::Signature::EXPECTED_SCHEME = T.let(T.unsafe(nil), String)

# You can configure [webhook endpoints](https://docs.stripe.com/webhooks/) via the API to be
# notified about events that happen in your Stripe account or connected
# accounts.
#
# Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
#
# Related guide: [Setting up webhooks](https://docs.stripe.com/webhooks/configure)
#
# source://stripe//lib/stripe/resources/webhook_endpoint.rb#12
class Stripe::WebhookEndpoint < ::Stripe::APIResource
  include ::Stripe::APIOperations::Delete
  include ::Stripe::APIOperations::Save
  extend ::Stripe::APIOperations::Create
  extend ::Stripe::APIOperations::Delete::ClassMethods
  extend ::Stripe::APIOperations::List
  extend ::Stripe::APIOperations::Save::ClassMethods

  # You can also delete webhook endpoints via the [webhook endpoint management](https://dashboard.stripe.com/account/webhooks) page of the Stripe dashboard.
  #
  # source://stripe//lib/stripe/resources/webhook_endpoint.rb#44
  def delete(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # A webhook endpoint must have a url and a list of enabled_events. You may optionally specify the Boolean connect parameter. If set to true, then a Connect webhook endpoint that notifies the specified url about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified url only about events from your account is created. You can also create webhook endpoints in the [webhooks settings](https://dashboard.stripe.com/account/webhooks) section of the Dashboard.
    #
    # source://stripe//lib/stripe/resources/webhook_endpoint.rb#24
    def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # You can also delete webhook endpoints via the [webhook endpoint management](https://dashboard.stripe.com/account/webhooks) page of the Stripe dashboard.
    #
    # source://stripe//lib/stripe/resources/webhook_endpoint.rb#34
    def delete(webhook_endpoint, params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # Returns a list of your webhook endpoints.
    #
    # source://stripe//lib/stripe/resources/webhook_endpoint.rb#54
    def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://stripe//lib/stripe/resources/webhook_endpoint.rb#19
    def object_name; end

    # Updates the webhook endpoint. You may edit the url, the list of enabled_events, and the status of your endpoint.
    #
    # source://stripe//lib/stripe/resources/webhook_endpoint.rb#59
    def update(webhook_endpoint, params = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

# source://stripe//lib/stripe/resources/webhook_endpoint.rb#18
Stripe::WebhookEndpoint::OBJECT_NAME = T.let(T.unsafe(nil), String)

# source://stripe//lib/stripe/services/webhook_endpoint_service.rb#5
class Stripe::WebhookEndpointService < ::Stripe::StripeService
  # A webhook endpoint must have a url and a list of enabled_events. You may optionally specify the Boolean connect parameter. If set to true, then a Connect webhook endpoint that notifies the specified url about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified url only about events from your account is created. You can also create webhook endpoints in the [webhooks settings](https://dashboard.stripe.com/account/webhooks) section of the Dashboard.
  #
  # source://stripe//lib/stripe/services/webhook_endpoint_service.rb#7
  def create(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # You can also delete webhook endpoints via the [webhook endpoint management](https://dashboard.stripe.com/account/webhooks) page of the Stripe dashboard.
  #
  # source://stripe//lib/stripe/services/webhook_endpoint_service.rb#18
  def delete(webhook_endpoint, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns a list of your webhook endpoints.
  #
  # source://stripe//lib/stripe/services/webhook_endpoint_service.rb#29
  def list(params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Retrieves the webhook endpoint with the given ID.
  #
  # source://stripe//lib/stripe/services/webhook_endpoint_service.rb#40
  def retrieve(webhook_endpoint, params = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Updates the webhook endpoint. You may edit the url, the list of enabled_events, and the status of your endpoint.
  #
  # source://stripe//lib/stripe/services/webhook_endpoint_service.rb#51
  def update(webhook_endpoint, params = T.unsafe(nil), opts = T.unsafe(nil)); end
end
