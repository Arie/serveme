# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sys-uname` gem.
# Please instead update this file by running `bin/tapioca gem sys-uname`.


# The Sys module provides a namespace only.
#
# source://sys-uname//lib/sys/uname.rb#3
module Sys; end

# The Platform class provides singleton methods to tell you what OS you're on.
#
# source://sys-uname//lib/sys/uname.rb#9
class Sys::Platform
  class << self
    # Returns whether or not you're on any BSD platform
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#47
    def bsd?; end

    # Returns whether or not you're on Linux
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#42
    def linux?; end

    # Returns whether or not you're on a mac, i.e. OSX
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#37
    def mac?; end

    # Returns whether or not you're on a Unixy (non-Windows) OS
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#32
    def unix?; end

    # Returns whether or not you're on a Windows OS
    #
    # @return [Boolean]
    #
    # source://sys-uname//lib/sys/platform.rb#27
    def windows?; end
  end
end

# The CPU architecture
#
# source://sys-uname//lib/sys/platform.rb#8
Sys::Platform::ARCH = T.let(T.unsafe(nil), Symbol)

# Returns the OS type, :macosx, :linux, :mingw32, etc
#
# source://sys-uname//lib/sys/platform.rb#14
Sys::Platform::IMPL = T.let(T.unsafe(nil), Symbol)

# Returns a basic OS family, either :windows or :unix
#
# source://sys-uname//lib/sys/platform.rb#11
Sys::Platform::OS = T.let(T.unsafe(nil), Symbol)

# The version of the sys-uname gem.
#
# source://sys-uname//lib/sys/uname.rb#11
Sys::Platform::VERSION = T.let(T.unsafe(nil), String)

# The Uname class encapsulates uname (platform) information.
#
# source://sys-uname//lib/sys/uname.rb#4
class Sys::Uname
  extend ::FFI::Library

  def sysinfo(*_arg0); end
  def uname_c(*_arg0); end

  class << self
    # Returns the CPU architecture, e.g. "x86"
    #
    # source://sys-uname//lib/sys/unix/uname.rb#204
    def architecture; end

    # The string consisting of the ASCII hexidecimal encoding of the name
    # of the interface configured by boot(1M) followed by the DHCPACK reply
    # from the server.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#218
    def dhcp_cache; end

    # The name of the of the hardware provider.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#238
    def hw_provider; end

    # The ASCII representation of the hardware-specific serial number
    # of the physical machine on which the function is executed.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#232
    def hw_serial; end

    # The variant instruction set architectures executable on the
    # current system.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#225
    def isa_list; end

    # Returns the machine hardware type.  e.g. "i686".
    # --
    # This may or may not return the expected value because some CPU types
    # were unknown to the OS when the OS was originally released.  It
    # appears that MS doesn't necessarily patch this, either.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#184
    def machine; end

    # Returns the model type.
    #
    # Example:
    #
    #  Uname.model # => 'MacBookPro5,3'
    #
    # source://sys-uname//lib/sys/unix/uname.rb#195
    def model; end

    # Returns the nodename.  This is usually, but not necessarily, the
    # same as the system's hostname.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#154
    def nodename; end

    # The specific model of the hardware platform, e.g Sun-Blade-1500, etc.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#210
    def platform; end

    # Returns the release number, e.g. 5.1.2600.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#164
    def release; end

    # The Secure Remote Procedure Call domain name.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#244
    def srpc_domain; end

    # Returns the operating system name, e.g. "Microsoft Windows XP Home"
    #
    # source://sys-uname//lib/sys/unix/uname.rb#142
    def sysname; end

    # Returns a struct of type UnameStruct that contains sysname, nodename,
    # machine, version, and release, as well as a plethora of other fields.
    # Please see the MSDN documentation for what each of these fields mean.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#108
    def uname; end

    # Returns the version plus patch information of the operating system,
    # separated by a hyphen, e.g. "2915-Service Pack 2".
    # --
    # The instance name is unpredictable, so we have to resort to using
    # the 'InstancesOf' method to get the data we need, rather than
    # including it as part of the connection.
    #
    # source://sys-uname//lib/sys/unix/uname.rb#174
    def version; end

    private

    # Returns the model for systems that define sysctl().
    #
    # source://sys-uname//lib/sys/unix/uname.rb#253
    def get_model; end

    def sysinfo(*_arg0); end
    def uname_c(*_arg0); end
  end
end

# source://sys-uname//lib/sys/unix/uname.rb#21
Sys::Uname::BUFSIZE = T.let(T.unsafe(nil), Integer)

# This is the error raised if any of the Sys::Uname methods should fail.
#
# source://sys-uname//lib/sys/unix/uname.rb#14
class Sys::Uname::Error < ::StandardError; end

# source://sys-uname//lib/sys/unix/uname.rb#50
Sys::Uname::SI_ARCHITECTURE = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#56
Sys::Uname::SI_DHCP_CACHE = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#46
Sys::Uname::SI_HOSTNAME = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#52
Sys::Uname::SI_HW_PROVIDER = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#51
Sys::Uname::SI_HW_SERIAL = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#55
Sys::Uname::SI_ISALIST = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#49
Sys::Uname::SI_MACHINE = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#54
Sys::Uname::SI_PLATFORM = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#47
Sys::Uname::SI_RELEASE = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#53
Sys::Uname::SI_SRPC_DOMAIN = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#45
Sys::Uname::SI_SYSNAME = T.let(T.unsafe(nil), Integer)

# source://sys-uname//lib/sys/unix/uname.rb#48
Sys::Uname::SI_VERSION = T.let(T.unsafe(nil), Integer)

# FFI class passed to the underlying C uname function.
#
# source://sys-uname//lib/sys/unix/uname.rb#62
class Sys::Uname::UnameFFIStruct < ::FFI::Struct; end

# The UnameStruct is used to store platform information for some methods.
#
# source://sys-uname//lib/sys/unix/uname.rb#93
Sys::Uname::UnameStruct = Struct

# The version of the sys-uname gem.
#
# source://sys-uname//lib/sys/uname.rb#6
Sys::Uname::VERSION = T.let(T.unsafe(nil), String)
