# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/terser/all/terser.rbi
#
# terser-1.2.3

class Terser
  def comment_options; end
  def comment_setting; end
  def compile(source, source_map_options = nil); end
  def compile_with_map(source, source_map_options = nil); end
  def compress(source, source_map_options = nil); end
  def compressor_options; end
  def conditional_option(value, defaults, overrides = nil); end
  def context; end
  def context_lines_message(source, line_number, column); end
  def enclose_options; end
  def encode_regexp(regexp); end
  def error_context_format_options(low, high, line_index, column); end
  def error_context_lines; end
  def error_message(result, options); end
  def extract_source_mapping_url(source); end
  def format_error_line(line, options); end
  def format_lines(lines, options); end
  def initialize(options = nil); end
  def input_source_map(source, generate_map, options); end
  def keep_classnames?(type); end
  def keep_fnames?(type); end
  def mangle_options; end
  def mangle_properties_options; end
  def negate_iife_block; end
  def output_options; end
  def parse_options(source_map_options); end
  def parse_result(result, generate_map, options, source_map_options = nil); end
  def parse_source_map_options(source_map_options); end
  def quote_style; end
  def read_source(source); end
  def run_terserjs(input, generate_map, source_map_options = nil); end
  def sanitize_map_root(map); end
  def self.compile(source, options = nil); end
  def self.compile_with_map(source, options = nil); end
  def source_map_comments(source_map_options); end
  def source_map_options(input_map, source_map_options); end
  def source_with(path); end
end
class Terser::Railtie < Rails::Railtie
end
class Terser::Error < StandardError
end
class Terser::Compressor
  def cache_key; end
  def call(input); end
  def initialize(options = nil); end
  def self.cache_key; end
  def self.call(input); end
  def self.instance; end
end
