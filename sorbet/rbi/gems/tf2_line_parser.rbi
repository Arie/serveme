# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/tf2_line_parser/all/tf2_line_parser.rbi
#
# tf2_line_parser-0.2.3

module TF2LineParser
end
class TF2LineParser::Parser
  def initialize(line); end
  def line; end
  def line=(arg0); end
  def parse; end
end
class TF2LineParser::Player
  def ==(other); end
  def initialize(name, steam_id, team); end
  def name; end
  def name=(arg0); end
  def steam_id; end
  def steam_id=(arg0); end
  def team; end
  def team=(arg0); end
end
module TF2LineParser::Events
end
class TF2LineParser::Events::Event
  def airshot; end
  def airshot=(arg0); end
  def cap_name; end
  def cap_name=(arg0); end
  def cap_number; end
  def cap_number=(arg0); end
  def customkill; end
  def customkill=(arg0); end
  def healing; end
  def healing=(arg0); end
  def item; end
  def item=(arg0); end
  def length; end
  def length=(arg0); end
  def message; end
  def message=(arg0); end
  def method; end
  def method=(arg0); end
  def parse_time(time_string); end
  def player; end
  def player=(arg0); end
  def role; end
  def role=(arg0); end
  def score; end
  def score=(arg0); end
  def self.regex_cap; end
  def self.regex_console; end
  def self.regex_message; end
  def self.regex_player; end
  def self.regex_results(matched_line); end
  def self.regex_target; end
  def self.regex_time; end
  def self.time_format; end
  def self.types; end
  def target; end
  def target=(arg0); end
  def team; end
  def team=(arg0); end
  def time; end
  def time=(arg0); end
  def type; end
  def type=(arg0); end
  def ubercharge; end
  def ubercharge=(arg0); end
  def unknown; end
  def unknown=(arg0); end
  def value; end
  def value=(arg0); end
  def weapon; end
  def weapon=(arg0); end
end
class TF2LineParser::Events::PVPEvent < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steam_id, player_team, target_name, target_steam_id, target_team); end
  def self.attributes; end
end
class TF2LineParser::Events::PlayerActionEvent < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steam_id, player_team, item = nil); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::RoundEventWithoutVariables < TF2LineParser::Events::Event
  def initialize(time); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::RoundEventWithVariables < TF2LineParser::Events::Event
  def initialize(time, round_variable); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::Connect < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steam_id, player_team, message); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::Score < TF2LineParser::Events::Event
  def initialize(time, team, score); end
  def self.attributes; end
  def self.regex_score; end
  def self.regex_team; end
end
class TF2LineParser::Events::RoleChange < TF2LineParser::Events::PlayerActionEvent
  def self.action_text; end
  def self.item; end
  def self.regex_action; end
end
class TF2LineParser::Events::Damage < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steamid, player_team, target_name, target_steamid, target_team, value, weapon); end
  def self.attributes; end
  def self.regex; end
  def self.regex_damage_against; end
  def self.regex_realdamage; end
  def self.regex_weapon; end
end
class TF2LineParser::Events::Airshot < TF2LineParser::Events::Damage
  def initialize(time, player_name, player_steamid, player_team, target_name, target_steamid, target_team, value, weapon, airshot); end
  def self.attributes; end
  def self.regex; end
  def self.regex_airshot; end
end
class TF2LineParser::Events::Assist < TF2LineParser::Events::PVPEvent
  def self.regex; end
end
class TF2LineParser::Events::CaptureBlock < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steam_id, player_team, cap_number, cap_name); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::ChargeDeployed < TF2LineParser::Events::Event
  def initialize(time, name, steam_id, team); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::Chat < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steam_id, player_team, message); end
  def self.attributes; end
end
class TF2LineParser::Events::Say < TF2LineParser::Events::Chat
  def self.regex; end
end
class TF2LineParser::Events::TeamSay < TF2LineParser::Events::Chat
  def self.regex; end
end
class TF2LineParser::Events::ConsoleSay < TF2LineParser::Events::Event
  def initialize(time, message); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::CurrentScore < TF2LineParser::Events::Score
  def self.regex; end
end
class TF2LineParser::Events::Disconnect < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steam_id, player_team, message); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::Domination < TF2LineParser::Events::PVPEvent
  def self.regex; end
end
class TF2LineParser::Events::FinalScore < TF2LineParser::Events::Score
  def self.regex; end
end
class TF2LineParser::Events::HeadshotDamage < TF2LineParser::Events::Damage
  def initialize(time, player_name, player_steamid, player_team, target_name, target_steamid, target_team, value, weapon); end
  def self.attributes; end
  def self.regex; end
  def self.regex_headshot; end
end
class TF2LineParser::Events::Heal < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steam_id, player_team, target_name, target_steam_id, target_team, value); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::Kill < TF2LineParser::Events::PVPEvent
  def initialize(time, player_name, player_steam_id, player_team, target_name, target_steam_id, target_team, weapon, customkill); end
  def self.attributes; end
  def self.regex; end
  def self.regex_customkill; end
  def self.regex_weapon; end
end
class TF2LineParser::Events::MatchEnd < TF2LineParser::Events::RoundEventWithVariables
  def self.round_type; end
  def self.round_variable; end
  def self.round_variable_regex; end
end
class TF2LineParser::Events::MedicDeath < TF2LineParser::Events::Event
  def initialize(time, player_name, player_steam_id, player_team, target_name, target_steam_id, target_team, healing, ubercharge); end
  def self.attributes; end
  def self.regex; end
  def self.regex_medic_death_info; end
end
class TF2LineParser::Events::PickupItem < TF2LineParser::Events::PlayerActionEvent
  def self.action_text; end
  def self.item; end
  def self.regex_action; end
end
class TF2LineParser::Events::PointCapture < TF2LineParser::Events::Event
  def initialize(time, team, cap_number, cap_name); end
  def self.attributes; end
  def self.regex; end
end
class TF2LineParser::Events::RconCommand < TF2LineParser::Events::Event
  def initialize(time, message); end
  def self.attributes; end
  def self.regex; end
  def self.regex_rcon; end
end
class TF2LineParser::Events::Revenge < TF2LineParser::Events::PVPEvent
  def self.regex; end
end
class TF2LineParser::Events::RoundLength < TF2LineParser::Events::RoundEventWithVariables
  def self.round_type; end
  def self.round_variable; end
  def self.round_variable_regex; end
end
class TF2LineParser::Events::RoundStalemate < TF2LineParser::Events::RoundEventWithoutVariables
  def self.round_type; end
end
class TF2LineParser::Events::RoundStart < TF2LineParser::Events::RoundEventWithoutVariables
  def self.round_type; end
end
class TF2LineParser::Events::RoundWin < TF2LineParser::Events::RoundEventWithVariables
  def self.round_type; end
  def self.round_variable; end
  def self.round_variable_regex; end
end
class TF2LineParser::Events::Spawn < TF2LineParser::Events::RoleChange
  def self.action_text; end
end
class TF2LineParser::Events::Suicide < TF2LineParser::Events::PlayerActionEvent
  def self.action_text; end
  def self.item; end
  def self.regex_action; end
end
class TF2LineParser::Events::Unknown < TF2LineParser::Events::Event
  def initialize(time, unknown); end
  def self.attributes; end
  def self.regex; end
  def self.regex_unknown; end
end
class TF2LineParser::Line
  def initialize(line); end
  def line; end
  def line=(arg0); end
  def parse; end
end
