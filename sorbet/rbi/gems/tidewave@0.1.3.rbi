# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tidewave` gem.
# Please instead update this file by running `bin/tapioca gem tidewave`.


# source://tidewave//lib/tidewave/version.rb#3
module Tidewave; end

# source://tidewave//lib/tidewave/configuration.rb#4
class Tidewave::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://tidewave//lib/tidewave/configuration.rb#7
  def initialize; end

  # Returns the value of attribute allowed_ips.
  #
  # source://tidewave//lib/tidewave/configuration.rb#5
  def allowed_ips; end

  # Sets the attribute allowed_ips
  #
  # @param value the value to set the attribute allowed_ips to.
  #
  # source://tidewave//lib/tidewave/configuration.rb#5
  def allowed_ips=(_arg0); end

  # Returns the value of attribute allowed_origins.
  #
  # source://tidewave//lib/tidewave/configuration.rb#5
  def allowed_origins; end

  # Sets the attribute allowed_origins
  #
  # @param value the value to set the attribute allowed_origins to.
  #
  # source://tidewave//lib/tidewave/configuration.rb#5
  def allowed_origins=(_arg0); end

  # Returns the value of attribute localhost_only.
  #
  # source://tidewave//lib/tidewave/configuration.rb#5
  def localhost_only; end

  # Sets the attribute localhost_only
  #
  # @param value the value to set the attribute localhost_only to.
  #
  # source://tidewave//lib/tidewave/configuration.rb#5
  def localhost_only=(_arg0); end

  # Returns the value of attribute logger.
  #
  # source://tidewave//lib/tidewave/configuration.rb#5
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://tidewave//lib/tidewave/configuration.rb#5
  def logger=(_arg0); end
end

# source://tidewave//lib/tidewave/file_tracker.rb#4
module Tidewave::FileTracker
  extend ::Tidewave::FileTracker

  # source://tidewave//lib/tidewave/file_tracker.rb#43
  def file_full_path(path); end

  # source://tidewave//lib/tidewave/file_tracker.rb#47
  def git_root; end

  # source://tidewave//lib/tidewave/file_tracker.rb#7
  def project_files(glob_pattern: T.unsafe(nil)); end

  # source://tidewave//lib/tidewave/file_tracker.rb#13
  def read_file(path, line_offset: T.unsafe(nil), count: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://tidewave//lib/tidewave/file_tracker.rb#51
  def validate_path_access!(path, validate_existence: T.unsafe(nil)); end

  # source://tidewave//lib/tidewave/file_tracker.rb#66
  def validate_path_is_editable!(path, atime); end

  # source://tidewave//lib/tidewave/file_tracker.rb#73
  def validate_path_is_writable!(path, atime); end

  # source://tidewave//lib/tidewave/file_tracker.rb#30
  def write_file(path, content); end

  private

  # @return [Boolean]
  #
  # source://tidewave//lib/tidewave/file_tracker.rb#82
  def ruby_file?(path); end

  # source://tidewave//lib/tidewave/file_tracker.rb#93
  def validate_path_has_been_read_since_last_write!(path, atime); end

  # source://tidewave//lib/tidewave/file_tracker.rb#87
  def validate_ruby_syntax!(content); end
end

# source://tidewave//lib/tidewave.rb#8
Tidewave::MESSAGES_ROUTE = T.let(T.unsafe(nil), String)

# source://tidewave//lib/tidewave.rb#7
Tidewave::PATH_PREFIX = T.let(T.unsafe(nil), String)

# source://tidewave//lib/tidewave/railtie.rb#13
class Tidewave::Railtie < ::Rails::Railtie; end

# source://tidewave//lib/tidewave.rb#9
Tidewave::SSE_ROUTE = T.let(T.unsafe(nil), String)

# source://tidewave//lib/tidewave/tools/base.rb#4
module Tidewave::Tools; end

# source://tidewave//lib/tidewave/tools/base.rb#5
class Tidewave::Tools::Base < ::FastMcp::Tool; end

# source://tidewave//lib/tidewave/tools/edit_project_file.rb#5
class Tidewave::Tools::EditProjectFile < ::Tidewave::Tools::Base
  # @raise [ArgumentError]
  #
  # source://tidewave//lib/tidewave/tools/edit_project_file.rb#32
  def call(path:, old_string:, new_string:, atime: T.unsafe(nil)); end
end

# source://tidewave//lib/tidewave/tools/execute_sql_query.rb#3
class Tidewave::Tools::ExecuteSqlQuery < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/execute_sql_query.rb#27
  def call(query:, arguments: T.unsafe(nil)); end
end

# source://tidewave//lib/tidewave/tools/execute_sql_query.rb#25
Tidewave::Tools::ExecuteSqlQuery::RESULT_LIMIT = T.let(T.unsafe(nil), Integer)

# source://tidewave//lib/tidewave/tools/get_logs.rb#3
class Tidewave::Tools::GetLogs < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/get_logs.rb#15
  def call(tail:); end
end

# source://tidewave//lib/tidewave/tools/get_models.rb#3
class Tidewave::Tools::GetModels < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/get_models.rb#9
  def call; end

  private

  # source://tidewave//lib/tidewave/tools/get_models.rb#22
  def get_relationships(model); end
end

# source://tidewave//lib/tidewave/tools/get_package_location.rb#5
class Tidewave::Tools::GetPackageLocation < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/get_package_location.rb#22
  def call(package: T.unsafe(nil)); end
end

# source://tidewave//lib/tidewave/tools/get_source_location.rb#3
class Tidewave::Tools::GetSourceLocation < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/get_source_location.rb#23
  def call(reference:); end

  private

  # source://tidewave//lib/tidewave/tools/get_source_location.rb#38
  def get_source_location(reference); end
end

# source://tidewave//lib/tidewave/tools/grep_project_files.rb#3
class Tidewave::Tools::GrepProjectFiles < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/grep_project_files.rb#28
  def call(pattern:, glob: T.unsafe(nil), case_sensitive: T.unsafe(nil), max_results: T.unsafe(nil)); end

  private

  # source://tidewave//lib/tidewave/tools/grep_project_files.rb#54
  def execute_grep(pattern, glob, case_sensitive, max_results); end

  # source://tidewave//lib/tidewave/tools/grep_project_files.rb#38
  def execute_ripgrep(pattern, glob, case_sensitive, max_results); end

  # source://tidewave//lib/tidewave/tools/grep_project_files.rb#95
  def format_ripgrep_results(results); end

  class << self
    # source://tidewave//lib/tidewave/tools/grep_project_files.rb#14
    def description; end

    # @return [Boolean]
    #
    # source://tidewave//lib/tidewave/tools/grep_project_files.rb#10
    def ripgrep_available?; end

    # source://tidewave//lib/tidewave/tools/grep_project_files.rb#6
    def ripgrep_executable; end
  end
end

# source://tidewave//lib/tidewave/tools/list_project_files.rb#5
class Tidewave::Tools::ListProjectFiles < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/list_project_files.rb#23
  def call(glob_pattern: T.unsafe(nil)); end
end

# source://tidewave//lib/tidewave/tools/package_search.rb#7
class Tidewave::Tools::PackageSearch < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/package_search.rb#24
  def call(search:, page: T.unsafe(nil)); end
end

# source://tidewave//lib/tidewave/tools/project_eval.rb#3
class Tidewave::Tools::ProjectEval < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/project_eval.rb#20
  def call(code:); end
end

# source://tidewave//lib/tidewave/tools/read_project_file.rb#5
class Tidewave::Tools::ReadProjectFile < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/read_project_file.rb#20
  def call(path:, **keywords); end
end

# source://tidewave//lib/tidewave/tools/shell_eval.rb#5
class Tidewave::Tools::ShellEval < ::Tidewave::Tools::Base
  # @raise [CommandFailedError]
  #
  # source://tidewave//lib/tidewave/tools/shell_eval.rb#30
  def call(command:); end
end

# source://tidewave//lib/tidewave/tools/shell_eval.rb#7
class Tidewave::Tools::ShellEval::CommandFailedError < ::StandardError; end

# source://tidewave//lib/tidewave/tools/write_project_file.rb#5
class Tidewave::Tools::WriteProjectFile < ::Tidewave::Tools::Base
  # source://tidewave//lib/tidewave/tools/write_project_file.rb#21
  def call(path:, content:, atime: T.unsafe(nil)); end
end

# source://tidewave//lib/tidewave/version.rb#4
Tidewave::VERSION = T.let(T.unsafe(nil), String)
