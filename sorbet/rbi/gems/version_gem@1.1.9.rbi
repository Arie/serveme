# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `version_gem` gem.
# Please instead update this file by running `bin/tapioca gem version_gem`.


# Namespace of this library
#
# source://version_gem//lib/version_gem/version.rb#3
module VersionGem; end

# Public API of this library
#
# source://version_gem//lib/version_gem/api.rb#5
module VersionGem::Api
  # The major version
  #
  # @return [Integer]
  #
  # source://version_gem//lib/version_gem/api.rb#16
  def major; end

  # The minor version
  #
  # @return [Integer]
  #
  # source://version_gem//lib/version_gem/api.rb#23
  def minor; end

  # The patch version
  #
  # @return [Integer]
  #
  # source://version_gem//lib/version_gem/api.rb#30
  def patch; end

  # The pre-release version, if any
  #
  # @return [String, NilClass]
  #
  # source://version_gem//lib/version_gem/api.rb#37
  def pre; end

  # The version number as an array of cast values
  #
  # @return [Array<[Integer, String, NilClass]>]
  #
  # source://version_gem//lib/version_gem/api.rb#56
  def to_a; end

  # The version number as a hash
  #
  # @return [Hash]
  #
  # source://version_gem//lib/version_gem/api.rb#44
  def to_h; end

  # The version number as a string
  #
  # @return [String]
  #
  # source://version_gem//lib/version_gem/api.rb#9
  def to_s; end

  private

  # The version number as an array of strings
  #
  # @return [Array<String>]
  #
  # source://version_gem//lib/version_gem/api.rb#65
  def _to_a; end
end

# This is a very *basic* version parser. Others could be built based on this pattern!
#
# source://version_gem//lib/version_gem/basic.rb#8
module VersionGem::Basic
  class << self
    # @private
    # @raise [Error]
    #
    # source://version_gem//lib/version_gem/basic.rb#10
    def extended(base); end
  end
end

# Support for Epoch Semantic Versioning
# See: https://antfu.me/posts/epoch-semver
#
# source://version_gem//lib/version_gem/epoch.rb#9
module VersionGem::Epoch
  class << self
    # @private
    # @raise [Error]
    #
    # source://version_gem//lib/version_gem/epoch.rb#13
    def extended(base); end
  end
end

# source://version_gem//lib/version_gem/epoch.rb#10
VersionGem::Epoch::EPOCH_SIZE = T.let(T.unsafe(nil), Integer)

# Tweak the basic API so it will support Epoch Semantic Versioning
#
# source://version_gem//lib/version_gem/epoch.rb#22
module VersionGem::Epoch::OverloadApiForEpoch
  # *** OVERLOAD METHODS FROM API ***
  #
  # The epoch version
  #
  # @return [Integer]
  #
  # source://version_gem//lib/version_gem/epoch.rb#28
  def epoch; end

  # The major version
  #
  # @return [Integer]
  #
  # source://version_gem//lib/version_gem/epoch.rb#35
  def major; end

  # NOTE: This is not the same as _to_a, which returns an array of strings
  #
  # The version number as an array of cast values
  # where epoch and major are derived from a single string:
  #   EPOCH * 1000 + MAJOR
  #
  # @return [Array<[Integer, String, NilClass]>]
  #
  # source://version_gem//lib/version_gem/epoch.rb#59
  def to_a; end

  # The version number as a hash
  #
  # @return [Hash]
  #
  # source://version_gem//lib/version_gem/epoch.rb#42
  def to_h; end

  private

  # source://version_gem//lib/version_gem/epoch.rb#65
  def _major; end
end

# Errors raised by VersionGem will be of this class
#
# source://version_gem//lib/version_gem/error.rb#5
class VersionGem::Error < ::RuntimeError; end

# source://version_gem//lib/version_gem/version.rb#4
module VersionGem::Version
  extend ::VersionGem::Basic
  extend ::VersionGem::Api
end

# source://version_gem//lib/version_gem/version.rb#5
VersionGem::Version::VERSION = T.let(T.unsafe(nil), String)
